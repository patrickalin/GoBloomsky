// Code generated by go-bindata.
// sources:
// tmpl/bloomsky.html
// tmpl/bloomsky.txt
// tmpl/bloomsky_body.html
// tmpl/bloomsky_header.html
// lang/en-us.all.json
// lang/fr.all.json
// test-mock/configForTest.yaml
// test-mock/mock.json
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplBloomskyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x5d\x0a\xc2\x40\x0c\x04\xe0\xf7\x9e\x62\xc8\x01\xec\x05\x16\xef\xd2\xba\x23\x15\xf7\x47\x34\x2f\x4b\xc8\xdd\x25\xac\x3e\x34\x4f\x81\xf9\x86\x31\x43\xe6\xfd\xd1\x08\xd9\x4b\xef\xf5\xf3\x1c\x02\xf7\x25\x1d\x5a\xcb\x75\x01\xd2\xc1\x2d\xc7\x13\x67\x06\x65\x7d\x95\x4d\x09\x89\x80\x6f\xb9\xb8\x07\x5b\xff\x2e\xed\x3d\x8f\x59\x38\xf1\x5b\x6f\xca\xa6\x02\xfc\x0a\xd3\xa5\x75\x2e\x99\x81\x2d\x47\xf6\x0d\x00\x00\xff\xff\x69\x4f\x24\xd4\x93\x00\x00\x00")

func tmplBloomskyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyHtml,
		"tmpl/bloomsky.html",
	)
}

func tmplBloomskyHtml() (*asset, error) {
	bytes, err := tmplBloomskyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky.html", size: 147, mode: os.FileMode(420), modTime: time.Unix(1498256157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomskyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x4b\x8e\x9b\x40\x14\x45\xe7\x5e\xc5\x93\xa5\x0c\xe3\x05\x64\x18\x10\x06\x29\xfe\xc8\xbf\x8c\xcb\xe6\xd9\x94\x42\x01\xa2\x8a\x24\x16\x7a\x7b\xea\x35\xf4\xca\x5a\x45\xf1\x31\xae\xb2\xad\x6e\xa6\xf7\x9c\x7b\x1f\x58\xf2\x77\xd7\x33\xf9\x99\xe6\xb9\x90\x7f\xae\x50\xd7\xb3\x5f\x4c\x2a\x8f\xa5\x29\xd1\xc4\x0d\xd7\xf5\x0e\xa6\x3b\x2e\x50\x2a\x26\x0a\x38\xb6\xee\x94\x08\x7e\x80\xeb\xa9\xeb\xd9\x1c\x95\x36\xb6\xda\x20\x32\x15\x1e\x57\x4f\xa4\x41\xd4\x5c\xe7\xf8\xf8\x97\x9f\x10\xa2\xd8\x2d\x1a\xc1\x40\x91\xdf\x49\xcb\x4a\x1c\xb1\x84\xd5\x19\x82\x3c\x4d\xf3\x7f\x58\xca\x7b\xdd\x88\xcb\x4a\xac\xce\x3d\xd3\xe9\x51\x16\xe3\x7f\xd8\x1f\x9e\xdc\x6a\xf4\x06\xdc\x1f\xfa\x59\x7e\x49\xd4\xf3\x17\xd4\x62\x24\x1b\xb0\xb3\x7e\xf3\x2c\x06\x9f\x97\x78\x52\x3c\xcf\x6c\xdd\x4c\x69\xaa\x87\x46\xea\xbc\x92\xee\xd1\x41\xd4\xc8\xa2\x48\x88\x60\x51\x24\x46\xdd\x56\x52\x31\x9e\x61\x0c\x1a\xb8\xf5\x8d\xd6\xe7\x3a\xde\x16\x88\xf1\x5d\xc1\xa7\xb6\xa5\x36\xe5\x97\x97\x6f\xf5\x0d\xe3\x8e\x8f\x64\x7f\x63\xcd\x11\xc1\x20\x81\xcf\x78\x7a\xb5\xf7\x74\xd6\x44\x91\xe6\x79\xf6\x70\x66\xc0\x2d\x12\x36\x4c\xe1\x18\x1f\x68\x9d\xd9\x86\x75\xcd\xfd\x39\x0b\x41\x04\x42\xbc\x78\xeb\x41\xb2\x78\xc7\x51\xf6\x61\x23\x6b\x87\xa2\xc0\x92\xa9\xaa\x6c\xbc\x60\xfa\x68\xef\x06\x0c\x58\x52\x62\x96\x20\x57\x44\xf0\xfe\x16\x38\x9b\x3c\xd7\xcf\x65\x55\x79\x98\x4a\x5e\xc9\xa6\xc7\x33\x3d\x61\x25\x78\xfc\xe2\x6f\xc3\xf4\x74\x24\x11\x7c\x33\xee\xba\x44\x29\xdb\x03\xa2\x2c\xbc\xb4\x05\x06\xef\x42\x1d\xb4\xb9\x6d\x85\x6b\xd6\xad\x8e\xad\x70\xcd\x4c\x3c\xf9\x08\x00\x00\xff\xff\xae\x4a\x2a\x76\x5f\x05\x00\x00")

func tmplBloomskyTxtBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyTxt,
		"tmpl/bloomsky.txt",
	)
}

func tmplBloomskyTxt() (*asset, error) {
	bytes, err := tmplBloomskyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky.txt", size: 1375, mode: os.FileMode(420), modTime: time.Unix(1497985215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomsky_bodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x72\xdb\x36\x16\xbe\xf7\x53\xa0\xe8\xec\xde\x51\x94\x25\xa5\x3b\xd3\x95\x74\x91\x78\x62\x7b\x67\x9b\x66\x6a\x37\x9d\xed\x4d\xe6\x88\x38\x22\x11\x11\x00\x0d\x80\x52\x54\x8f\xde\x69\x9f\x61\x9f\x6c\x07\xa0\x48\x51\x12\xe5\x9f\x9a\x56\x5d\xef\x66\x26\x09\x09\x02\xe7\x3b\xf8\xbe\x83\x03\xea\x80\xb7\xb7\x0c\xa7\x5c\x22\xa1\x91\x92\x16\xa5\xa5\xab\xd5\xc9\x09\x21\x84\x0c\x25\xcc\x49\x94\x82\x31\x23\x2a\x61\x3e\x01\x4d\x8a\xff\x02\x2e\xe7\xa8\x0d\x96\xb7\x53\xfe\x15\x59\x60\x55\x46\xc7\x7e\xa0\x1f\xcc\x78\x35\xd8\x19\x06\x2e\x51\xd7\x9e\xef\xf6\x59\x9b\x4a\x10\xd8\x5e\x3f\xdf\x77\x92\x5b\xab\x24\xb1\xcb\x0c\x47\xb4\xb8\xa1\x3b\x83\xad\x8a\xe3\x14\x49\xa4\xd2\x14\x32\x83\x8c\x12\x06\x16\xd6\xcd\xce\x8d\xa2\xbd\x6c\x06\x1d\xa3\x1d\xd1\x6f\x8b\xd1\x94\x80\xe6\x10\xe0\xd7\x0c\x24\x43\x36\xa2\x53\x48\x5d\x5f\xdf\xea\x66\xa0\x55\x5a\x41\xed\x4e\xc4\x64\x20\x4b\x67\x8c\x0e\x94\x4c\x97\x74\x7c\x5d\xb8\x23\x61\xce\x63\xb0\x5c\xc9\x61\xe8\xfa\xdd\x31\x94\x47\x4a\x06\xde\xfc\xb1\xba\x0e\xc3\x82\xca\x06\xc2\x61\x87\xdd\x89\x06\xc9\x28\x49\x34\x4e\x47\xf4\x5b\x3a\x7e\x9b\x2a\x25\xcc\x6c\x39\x0c\x61\x07\x3c\x64\x7c\xde\xa0\x34\x67\x15\x7d\x9b\xc8\x28\x24\x29\x23\xa9\x92\xa8\xc1\x9f\x3c\xad\x39\x54\x0e\x90\x30\x6f\xe8\xeb\xfb\xa7\xbc\xec\x0f\x91\xe5\x73\xa4\xe3\x21\x6c\xbc\xbf\xbd\xbd\x26\xf4\x42\x09\xa4\xab\x95\x9b\xc1\x30\x4c\xf9\x41\x43\x9b\x91\x89\xb5\x99\xf9\x3e\x0c\x63\x6e\x93\x7c\xd2\x89\x94\x08\x33\xb0\x9a\x47\x33\x48\xb9\x0c\x27\x6b\x4e\x82\x28\xe5\x28\x6d\x10\x2b\x4a\xca\x38\xfb\x3c\x49\x41\xce\xe8\xf8\xdc\x0f\xfd\x1d\x98\x0c\x4c\x32\x51\xa0\x59\xa7\x84\xf1\xf8\xfb\x08\xa5\x32\xe4\xac\x1c\xb1\x41\xdb\xe7\x35\xcc\xd3\x3b\xf5\xab\xdd\x0e\x43\x09\xe5\xe5\x37\x41\x10\x76\x24\xcc\x2b\xcd\x48\x10\xac\xcd\xdf\xb7\xf6\xeb\xcf\xb5\x5a\xdc\x91\x15\x22\x95\x06\x82\x05\xfd\xa6\x78\xe0\x22\x26\x46\x47\x23\x1a\x1a\x0b\x96\x47\x15\xf9\x9d\x4c\xc6\x94\x2c\x38\xb3\xc9\xe8\xbb\xee\x5f\x1a\x86\x66\xa5\xfd\x14\x81\xad\x63\xa1\x22\xad\x90\x8e\x70\x49\xce\x95\x0f\x8e\xac\xc1\x42\x19\xcf\x96\x0b\x34\x16\x44\xe6\xac\x74\xce\xd1\x5e\x73\x81\x57\xae\xc1\x8d\xdc\x5b\x07\xdb\x8e\x53\x02\xa9\x1d\x6d\x90\xb9\x88\xa9\xb7\xea\x67\xc2\x45\xdc\xa5\x24\x41\x1e\x27\x76\x44\x7b\xdd\x6e\x39\x27\x7f\x7d\xff\x92\xf3\x02\x39\x3f\x05\xeb\x6f\xb4\xb9\x83\xe5\x37\xb4\x29\x3c\x26\xba\xa9\xb5\x9c\xbf\xca\x6d\x96\x5b\x3a\x2e\x3d\xd8\xef\x69\x61\xe2\x72\x72\x81\x54\xdc\xf8\x7f\x03\x63\x35\xcf\x90\x1d\x5a\xbe\x56\x37\x3f\x28\x1e\xb2\xf1\x56\x8a\x8b\xd3\x65\x96\xb8\x3c\x47\xaa\xab\x40\x40\x16\x08\xd0\x33\xdc\x24\x3e\xe2\x95\x7e\xc7\xed\xd2\x0b\x6b\xd9\xdd\x10\x07\x1f\x6e\x51\x10\x39\x73\x6b\xf5\x9d\xe9\x83\xc2\x57\x23\x9f\x06\xfc\x57\x39\x31\xd9\xdf\x7f\x87\xf5\x61\x78\x88\xd3\x7b\xc9\x7e\x18\x13\xd2\x85\xaa\xa7\xe2\xd2\x7c\x70\xd7\x2f\x96\x8a\xe7\xb5\xfe\x04\xa2\x87\xd5\xa6\xb5\xe0\x64\xc1\x03\x93\x4b\x83\xd6\x05\x30\x5f\x47\xef\xa5\x64\xf8\x95\xfc\xfc\x89\xae\x56\x4f\x9d\x60\x25\x5c\x3e\xa7\xce\xba\x8b\x60\x6f\xfe\xe7\x4f\x2f\x56\xb9\x36\xb9\x15\x90\xa6\x41\xa4\x61\x6a\x03\x60\x73\x6e\x94\x5e\xd6\x99\xfe\x85\x4b\x46\xce\xb8\xc6\xc8\xbd\xbc\xb5\x98\x31\x16\x5c\x32\xc6\x75\x99\x34\x1c\x4e\x05\xf3\x7f\xe2\xd7\xc4\x9f\xe7\xc6\xb6\xcc\x79\xec\x4c\xd6\x48\x77\x10\x3f\x64\xc9\x73\x53\x5e\xf7\xc1\xb9\x20\xcc\x9e\x13\xe6\x5e\x1f\x9a\x0c\xcd\x44\xb2\x6b\x69\x26\x9e\x32\x9d\x23\x6a\x7c\x95\x1b\xff\x5e\xc8\x88\x73\xbd\x45\xa1\x4d\x6e\xac\x13\xbb\x64\xa6\x02\x72\x38\x57\x19\x22\x3b\xa6\xe4\xa5\x37\x1b\xcd\x1b\xfc\x79\xa4\xfa\xa5\xcd\x9a\xfc\xfb\x46\x5f\x4c\x20\x68\xe0\x92\x69\x95\xd5\xc5\xff\x09\x78\x9b\xf9\xd4\x41\xac\x5f\x3b\x9c\x65\xbf\x31\xbe\xf6\x1c\x7a\x88\x56\x72\x06\x3c\x6d\xf3\xf5\xd6\x03\x79\x9b\xeb\x58\x73\x28\x1e\xe4\xf2\xd9\x37\xab\x7d\x27\x84\xa8\xde\x54\x2a\x3f\x7e\x10\x2f\x3b\xd2\xc9\x4f\x60\x91\xfc\x13\x8c\x25\x89\xca\x75\xcb\xda\x68\xb0\x58\x97\xc6\x81\x1d\x59\x19\xe7\x82\x13\x66\xdb\x89\x97\x22\x8b\x4d\x50\x0b\x25\xd0\x16\x3f\x04\x4b\x65\xae\x51\x64\xa8\xc1\xe6\x1a\x5b\x54\xc4\xa2\xc8\xa6\x55\x2d\x60\x03\xf1\x1e\x12\x8d\x32\x41\x6e\x57\x2b\xf2\x9f\x7f\xbf\x3f\x92\x3a\xce\x9d\xa8\xc1\x9d\x77\x98\x1a\x9e\x1b\xef\xcb\xbb\x97\x20\x52\x92\x0b\xce\xfc\x0f\xe9\x8d\x42\x17\x65\xdb\x6a\x45\x7c\x91\x6d\x16\xb5\xc5\xcb\x06\xae\xa0\xa6\x84\xfa\x5f\x78\xfb\x9e\x80\xde\x5f\x0d\x1f\x35\x1a\xd3\xee\x52\xc8\xd6\x26\xb9\x4c\xe2\x92\xe7\x12\xe6\x52\x5e\xc4\x47\x4b\x51\xa5\x23\x49\x06\xbb\x7e\x5c\x7c\x84\x3f\x28\x49\xdd\x57\xbd\xc2\x9b\x1c\x52\xfe\x5b\xbd\x78\xf5\x49\xa5\x16\x62\x6c\x8b\x96\x79\x61\xae\x5d\x4a\x1e\xe4\xc2\x73\xac\x82\x6f\x82\xa0\x60\x7d\xab\x6c\xfe\x7d\x18\x9a\x7e\x07\x04\xfc\xa6\x24\x2c\x8c\xaf\x97\x4f\xcc\x6c\x69\xb9\x40\x5f\xb4\x36\xe1\x14\xde\xf2\xfc\xd7\x5f\x8c\xcc\x40\xdd\xfc\x7a\xa3\x3f\xf7\x3e\xf7\xba\xa7\x7f\x0b\xba\xdf\x05\xdd\x41\x47\x64\x03\x3a\xae\x95\x6c\xad\xc8\x3a\x31\x9f\xde\x5b\xb9\x3d\xbd\xa3\x72\x4b\xf6\x4e\x4c\x6a\x7f\xf6\x2b\xa8\xd5\x14\x1f\xed\x44\xef\xae\xf2\x71\x8b\x38\xfd\x23\xe1\x0c\x8e\x84\xf3\xe6\xa1\x65\xf7\x0a\xc2\xc5\x65\x10\x3c\x57\x2e\x88\x53\x35\xc1\x9d\x22\xf6\x87\x5c\x4c\x50\x93\x1f\xa7\xe4\xbd\x4a\x53\xb5\x40\x6d\x5a\xcc\xdd\xd3\xca\xe6\x3a\x3b\x7c\xc8\xc5\x8f\xd3\x0a\xe9\xcf\x98\x20\x9e\xaa\x42\x4d\x8f\x48\xc5\x3b\x6a\x9c\xe1\x9c\x47\x48\x2e\xdb\x2c\x64\x30\x6f\xb3\x14\xa0\x40\xb8\x3c\xfb\x93\x51\x3f\x0c\xfd\x61\xcf\xa1\x83\xa5\xbd\xc6\xea\x67\x05\x4e\x35\x9a\xc4\xe5\x69\x47\x75\x71\xb6\x74\xb2\x6d\xb9\x85\x23\xaf\x41\xd3\xc1\xe2\xb3\x9c\x58\x35\xcd\x76\x6f\xd6\x53\xa5\x05\x58\x8b\xec\x9a\x0b\x7c\x53\x4d\xfc\xe0\xb8\x39\x67\xa8\x8a\xcd\x9c\xb3\x4d\xa2\xea\xf7\xea\x07\x87\x83\x2e\x25\xe5\xf7\x0b\x24\x55\xca\x1f\x67\x0e\x8d\xca\x75\x84\xe5\x39\x64\x95\xfd\x0a\x3b\xc5\x47\x16\xde\x7a\xe8\x77\xc0\x7f\xa9\x5c\x93\x89\x56\x0b\x83\x9a\x30\x85\x86\x48\x65\x89\xc9\xb3\x4c\x69\x4b\x6c\x82\xa4\x70\xc5\x42\xdc\x39\x19\x86\xfe\xa6\xdd\x15\xfa\x78\xfe\x06\x8f\xe4\xef\xb4\x25\xfe\x4e\x5f\x09\x7f\xfd\x47\xf2\xd7\x6b\x89\xbf\xde\x2b\xe1\xaf\xf7\x48\xfe\xfa\x2d\xf1\xd7\x7f\x25\xfc\x9d\x3e\x92\xbf\x41\x4b\xfc\x0d\xfe\x00\xfe\x36\xdb\xe4\x43\xf6\x38\xb2\xbd\xc9\x1d\xe8\xbd\xee\xa9\xd5\xa2\xea\x55\xff\x94\xa7\x78\x5a\x7d\x9e\x53\xfb\x7a\xc7\x3d\x79\xab\x94\x35\x56\x43\x46\x22\xa5\x91\xfc\x03\xe6\x70\x15\x69\x9e\xd9\xc6\x49\x8d\x46\xa3\x43\xed\x4f\xf8\xbb\x71\xdb\x79\xf4\x31\x85\x08\x19\x81\x82\x6e\x94\x8c\xa8\xa9\xbf\x64\x2a\xca\x05\x4a\x4b\x8c\xf2\xf7\x19\xc4\xe8\x84\x06\x46\xa6\x60\xec\x7a\x6a\xde\x8e\xf1\x53\xd8\xfe\x6a\xe8\x8b\x09\xbf\xdc\xe4\xa8\x97\x41\xbf\xd3\xeb\x9c\x76\x04\x97\x9d\x2f\x86\x96\x84\x15\x43\xc6\x27\xb7\xb7\x1e\x73\xb5\xfa\x6f\x00\x00\x00\xff\xff\xde\xc7\x54\x5f\x30\x29\x00\x00")

func tmplBloomsky_bodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomsky_bodyHtml,
		"tmpl/bloomsky_body.html",
	)
}

func tmplBloomsky_bodyHtml() (*asset, error) {
	bytes, err := tmplBloomsky_bodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky_body.html", size: 10544, mode: os.FileMode(420), modTime: time.Unix(1498256157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomsky_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\x5b\x73\xdb\x36\x13\x7d\xcf\xaf\xd8\xf2\xc5\x8e\x53\x92\xd6\xc5\xd3\xd6\xb1\x3c\x4d\x63\x37\x71\x26\xb1\x33\x56\x2e\x5f\x27\xcd\x03\x44\xac\x44\xc4\x04\xc0\x02\xa0\x14\x8d\x47\xff\xfd\x1b\x90\x92\x45\x49\x24\x75\x33\x33\xd1\x53\x60\xee\x9e\x3d\x67\x2f\x00\x29\x2a\xf7\xf7\x14\xfb\x4c\x20\x38\x21\x12\x8a\xca\x99\x4c\x9e\x00\x00\x9c\x71\x34\x04\x82\x90\x28\x8d\xa6\xe3\x24\xa6\xef\xfe\xee\x9c\xe7\x2e\x85\xc6\xc4\x2e\xfe\x97\xb0\x61\xc7\xf9\x9f\xfb\xf1\x85\xfb\x52\xf2\x98\x18\xd6\x8b\xd0\x81\x40\x0a\x83\xc2\x74\x9c\xab\xcb\x0e\xd2\x01\x2e\x78\x0a\xc2\xb1\xe3\x0c\x19\x8e\x62\xa9\x4c\xce\x78\xc4\xa8\x09\x3b\x14\x87\x2c\x40\x37\x5d\xfc\x0a\x4c\x30\xc3\x48\xe4\xea\x80\x44\xd8\x69\xcc\x80\x7e\x71\x5d\xf8\x10\x22\x90\x9e\x1c\x22\xb4\x20\x05\x36\x64\xa0\xe1\x88\x27\xda\x1c\x41\x20\x39\x42\x9f\x29\x6d\x80\x09\x30\x21\x82\xd5\xf7\x1c\x88\x18\x83\x34\x21\xaa\x74\x3d\x8b\x0d\xd6\x29\xf3\x39\x22\x7d\x83\xea\xc8\xba\x68\xcc\x20\x5d\x77\x95\x3e\x45\x1d\x28\x16\x1b\x26\x45\x4e\xc1\x5f\x91\x94\x5c\xdf\x8d\x21\x88\x98\x85\x1d\xc8\x02\xe5\x24\x31\xa1\x54\x39\xaf\x98\x18\xc5\x82\x3b\x12\x31\xf1\xe7\x80\x13\x16\x79\x81\xe4\xce\xf9\x93\xcc\xd3\x30\x13\xe1\xf9\x32\xf2\x2b\x79\xe6\x67\x57\x9e\xcc\x33\xf2\x96\x18\xcc\x74\xc4\x2c\x42\x0a\x44\x50\xe0\x4c\xb0\x3e\x43\x0a\x2f\xbb\xdd\xb9\x92\x88\x89\x3b\x50\x18\x75\x1c\x6d\xc6\x11\xea\x10\xd1\x38\x10\x2a\xec\x77\x1c\x5f\x1b\x62\x58\xe0\x07\x5a\xfb\x3d\x29\x8d\x36\x8a\xc4\x1e\x67\xc2\x0b\xb4\x76\x20\x50\x52\x6b\xa9\xd8\x80\x89\x8e\x43\x84\x14\x63\x2e\x13\xed\x54\x00\x43\x25\xb2\x6b\x42\xe4\xf8\xe8\xf8\x23\x24\xb6\xcc\x2e\x0b\xa4\xd0\x0f\xe8\x7b\xa1\xb8\x23\x26\x68\x0e\xea\xc9\x34\xf5\x59\x27\x80\x56\xc1\xdc\xf9\x9b\xf6\xbf\xfd\x97\xa0\x1a\xbb\x2d\xaf\xe9\x35\x52\xaf\x6f\xa5\xea\xc0\x39\x3f\xf3\x33\x98\x8d\xeb\xf9\x86\x0c\x49\x37\x8b\xfc\x50\xd6\x12\x26\x8b\x55\xfc\xa6\x61\x0b\x1e\x69\x82\x32\x78\xfb\xe9\x49\x3a\x86\xfb\x87\xa5\xfd\xc4\x84\x52\x26\x06\xae\x91\xf1\x29\x9c\x1c\xc7\xdf\x9f\x3f\x5c\x9e\x3c\xfc\xeb\xe1\x1f\x9e\x36\x44\x19\x54\xae\x41\x1e\x47\xc4\x60\x31\xda\x29\xb4\x8f\xe3\xef\xd0\x38\xc9\xc3\xd9\x8f\xc1\xef\xc6\x25\x11\x1b\x88\x53\x08\x50\x18\x54\x95\xe1\x58\x5f\x11\xbe\x1c\xa3\x27\x15\x45\x75\x0a\x42\x0a\x5c\xf6\x3e\xf3\xa7\x8a\x73\x75\x78\xfd\xe1\xdd\xdb\x13\xd0\x21\xe3\x69\x09\x6e\x51\xc7\x52\x50\x9b\xc8\xbe\x54\x70\x75\xf9\x3b\xe8\x24\xb6\x9b\x19\xc8\xfe\xd4\x18\x23\xe4\x28\x8c\xce\x6a\x86\x94\x11\xb0\xed\xc0\x30\xb7\x9d\x58\xe8\xcf\x2f\x6e\xaf\xaf\xae\x5f\x9d\xe6\x41\xa9\x44\x2d\x0e\x0c\x8c\xa4\xba\x03\xd6\x87\xb1\x4c\xc0\x6e\x97\xe9\x36\x16\x93\x01\xc2\x90\x11\xe8\xb3\x08\x4f\x7d\x7f\x01\xee\x0b\xeb\x43\x64\xe0\xea\x12\xfe\xf8\x3a\xab\xd9\x42\x53\xd8\x5d\x5b\x9f\xfa\xbe\xd4\xda\xe3\xe4\x7b\x40\x85\xdd\x6b\xfc\xd0\xf0\xe8\x44\x87\x6c\xe8\xb7\xbc\xdf\xbc\xd6\x7c\xfd\xd0\x30\xb9\xbe\xd8\x1c\x56\x65\x9a\xfc\x86\xd7\xf6\x9a\xb3\x55\x19\xe4\xd9\x2f\x5f\x50\x50\xd6\xff\x6a\x05\xe5\xdb\x79\xde\x7c\x76\xfe\xe4\xc8\x23\x94\x5e\x0e\x51\x98\xb7\x4c\x1b\x14\xa8\x0e\x9d\x48\x12\xea\xfc\x0a\xfd\x44\x04\x76\x47\x3e\xc4\xa1\x79\xba\x54\xf3\x21\x51\x20\x13\x13\x27\x06\x3a\x40\x65\x90\xd8\xf2\x78\x03\x34\x97\x59\xa5\xfe\x1a\x5f\xd1\x43\x27\xb3\x70\x9e\x3e\x5f\xf1\x1d\xe9\xd5\xbf\xc5\x8a\x09\x0b\xf7\x10\x97\xa3\xd6\x64\x80\xcb\xb1\x67\xf6\x34\x1f\x3a\x50\x48\x0c\x4e\xa3\x1f\x3a\x94\x0d\x97\xc3\xda\x0f\xf5\x98\x10\xa8\x6c\x53\x41\x07\xa6\xf8\xab\x66\x19\x6f\x8f\xc4\x31\x0a\xfa\x32\x64\x11\x3d\xa4\x4b\x68\x93\xc5\xa5\x96\xc1\x1d\x5a\xf2\x02\x47\xf0\x19\x7b\xdd\x74\x7d\xe8\xdc\xdf\x7b\x9f\xb1\x97\x5e\x55\x89\x8a\x26\x93\x65\x56\xbe\x7f\x73\x0d\x37\xef\x2f\xaf\x0b\xe0\x3c\x29\x64\x8c\x22\x9f\x92\x82\x52\xcc\x91\xb2\x0c\x1e\x3a\x16\xae\x48\x7d\x66\x95\x19\x4d\x23\xc4\x4a\x1a\x19\xc8\xe8\xe9\x26\xc6\x0a\x09\x1d\x77\x0d\x31\xb8\x91\x79\xa2\x4a\x60\xa7\xd7\x35\x0a\xdb\x23\x31\x0a\x67\xd5\x6e\xb2\xf2\x17\xdf\x87\x9b\x6b\xb8\xbc\xbd\xbd\xb9\x2d\xce\x15\x2a\x25\xd5\x42\xb2\xec\x1f\x8a\xd2\x65\x8f\x1f\x19\xa1\x97\x1a\x4c\xcd\x56\xd3\x95\x89\x29\xba\x5a\x58\x7c\x4f\x8a\x20\x92\x1a\x37\x28\xd7\xb4\x4e\x67\xbd\xf3\x97\x52\x08\x4c\x6d\x21\x75\xa6\xde\x99\xdf\x3b\x5f\x2e\xde\x64\xb9\x67\x6c\x26\xde\x5d\x76\xbb\x2f\x5e\x5d\x16\x33\x99\xb6\xf6\x06\x5c\xec\x24\x05\x89\x52\x28\x0c\xb5\xe7\x47\xd6\xc2\x17\xc4\xe0\x61\x41\x4e\xd2\xb9\x23\x06\x0d\xe3\xd6\xd4\xb9\xbf\xff\x00\xce\x5b\xa2\x0d\x74\xc7\x22\x70\x26\x93\x53\x70\xe0\x59\x1e\xd0\x6e\x0a\x19\x1a\x3c\x03\xc7\x77\xe0\x59\x61\x4f\x1c\x2e\xb9\xbc\x93\xc2\x84\xa9\x4f\xa3\xda\x71\xc9\xef\xef\x24\x8a\xfe\x41\xa2\xb2\x70\xf0\x27\x6c\xe8\xf7\x5a\x26\x4a\x67\x4e\xa7\x1b\xba\xbc\x63\x22\x31\xb8\xa5\x53\x17\x03\x29\xa8\x2e\xca\x6d\xe9\x36\xaa\xb0\xaf\x50\x87\x36\xe7\xce\xd3\x85\x1d\x6c\x56\x8a\x55\xb0\xd9\x2c\x3a\xd3\x36\x29\xda\x0f\x7c\x7f\x36\x08\x91\x1c\xd8\xfe\xf0\x28\x31\xe4\xe9\xf4\xac\x5e\xb4\x84\x5e\xc2\x22\x9a\x06\x2c\x6c\x8a\x6f\x5a\xda\x8d\xea\x4d\xf7\xe6\xda\x8b\xed\x63\xce\x1c\xaf\xb8\x8b\x48\xbe\xd3\xac\xb7\x77\x41\x0c\xf1\x3e\x74\xe1\x08\x1a\xc7\xc7\xc7\x25\x6e\xdc\xf6\x85\x86\x0e\x7c\x39\x48\x7b\xef\x0d\x11\xce\x64\x72\xf0\x2b\x64\xcb\xbf\xb1\x97\x5f\xbe\x23\x2a\xbf\x7c\x11\xab\xc5\xab\xe3\xfc\xf2\x4d\x22\x16\x97\xd1\x82\x6f\x32\xc8\x2f\xbb\x18\xe7\x97\x37\x81\xc9\x2f\xaf\xe5\x30\xbf\xbc\x40\x3b\x1a\x07\x5f\x8b\x25\x8d\x91\xd8\x6d\x8b\x2c\xb6\x6f\x85\x7c\x7b\x74\xa5\x69\xf8\x42\x72\xa3\x52\x82\x3e\x1d\x6a\x32\x9f\xc3\x62\xbb\x50\x26\x0f\x2c\xa6\xc3\x50\x42\x81\x89\x99\xdd\xc3\x04\x14\x5b\x6a\x0c\x66\x96\x15\x6d\x6f\x2d\xfb\x52\x71\x62\x0c\xd2\x0f\x8c\xe3\xf1\xb4\xb1\xe1\x19\x1c\xc0\x01\x3c\x9b\x8a\x9e\xad\xd2\x74\xcd\x16\x29\xeb\x67\x70\x70\x9a\xda\x31\xf1\xf0\x6f\x8d\xc1\x06\xa1\x1a\xb3\x50\x2e\x34\x2a\xc2\x6d\x31\xab\x8b\xf0\x4b\xe3\xba\x78\x71\x03\x7e\xcd\x39\xbf\x66\x0d\xfc\x9a\x55\xfc\x9a\x1b\xf0\x6b\xcd\xf9\xb5\x6a\xe0\xd7\xaa\xe2\xd7\xda\x80\x5f\x7b\xce\xaf\x5d\x03\xbf\x76\x15\xbf\xf6\x06\xfc\x4e\xe6\xfc\x4e\x6a\xe0\x77\x52\xc5\xef\xe4\xf9\xea\x3e\x5f\x0a\x6b\x0f\x19\x6d\x08\x8f\xab\x10\x8f\xb7\xe0\x19\x30\x33\x5e\xc2\x4a\x0f\x81\x97\xcc\x8c\xaf\x49\xd1\x89\x56\x0a\x95\x7d\xc5\x55\x04\x76\x91\x5e\xb9\xba\xd8\x2a\x7f\x51\x24\x47\xa8\x74\x11\xde\x75\xc2\x6f\xfa\x7f\xcf\x2c\xd2\x1b\x8c\x74\x7f\x9f\x3b\x4d\x26\x4e\x41\x5a\x59\x1f\x72\x47\xdc\x35\x1b\x84\xa5\x77\xf1\xa5\xc4\x84\xf5\x5a\x22\xe5\x9c\x31\x08\x22\xa2\x75\xe7\x5f\x67\xc4\x60\xc4\x5c\x2e\xa5\x70\x47\x44\x30\x31\x70\x03\x85\xda\x3e\xd3\xbb\xad\x7f\xed\xd3\x21\x3b\xcf\xc8\xa6\xe1\x2d\xd1\xd5\x7b\x6e\xc0\x48\x2f\x3f\xdd\x3f\x12\x31\x4a\xc6\xae\x4e\x84\x18\x2f\x70\xb9\x48\x4f\xe0\x02\x26\xab\x15\x7b\xc8\x61\xd7\x48\xc5\xbd\x8f\x9f\xae\x04\xc5\xef\x70\xd6\x81\xe6\xd6\xb9\x4c\x86\x45\xd5\x5d\x04\xb6\xf7\x9c\x8d\x46\x46\x33\x92\x23\x4b\x33\x2d\xf8\x8a\xb2\x20\x92\x09\x9d\xc9\x2a\x4b\xea\x16\x72\xda\xb5\xcb\xe1\x48\x59\xc2\xcb\x15\xd9\x5a\x6d\xa4\xaa\x6e\xa2\x21\x1b\x84\xd5\x34\xf3\x2d\x55\xd8\x46\xeb\x12\xff\x99\x09\x7a\xc1\xd4\xf4\x19\xac\xd3\x01\xe7\xda\xd9\xba\x00\x23\x26\x28\x65\x6a\x79\x08\xa6\xb7\x82\xca\x58\x11\xb0\x2a\xc0\xba\x81\x91\x23\xa2\xa8\x76\x8f\x5d\x8a\x83\x3d\xbb\xa8\x40\xcc\x65\x4d\x6a\xd2\xd5\xa5\xb6\x1b\xc9\x1a\x61\xed\x93\x5a\x94\x3d\xb2\xb0\x8d\xa4\xfc\x51\x4f\x91\xba\x8f\xac\xa5\x2b\x93\x95\x22\x55\x0b\x6b\xb4\xea\x29\x52\xb7\x26\x61\x6b\xd4\xfc\x5e\x53\x9d\x3e\xd7\x59\xa7\xcf\xb8\x49\x0b\x36\x9b\xf5\x54\xea\x91\xa5\x6d\x28\xe6\xb7\x9a\x76\xbd\x47\x56\xb3\xb8\xeb\x6d\xa6\xad\xd5\x58\x53\xa8\xf5\x67\x53\x37\xd1\x86\x30\x81\xd4\x2a\xec\xc6\x88\xd4\xde\x1f\x34\xb6\x96\xa6\x13\x6d\x2c\xb7\xf2\xc3\xb7\x20\x92\x3d\x72\x79\xec\x87\x25\x87\xaf\xc5\x73\x7b\x48\x92\xbe\x54\xc6\x3d\x2e\x95\xb9\x36\xe7\x83\x44\x2f\xdf\x3d\x2e\xd5\xf6\x55\xa2\xcd\x8e\x74\x8a\xbf\x03\xaf\xe2\x63\xe9\xf0\xc2\x9b\xff\x45\x42\x3c\xbb\xfd\xe7\xbe\xfe\x11\x8c\xee\x78\xb8\x9e\xd2\x1d\x0f\x53\x2a\x77\xbc\xe6\x34\xcd\xfa\xa9\x2a\x4f\xab\x1d\xf5\x83\x32\x36\x23\x57\x99\xb2\x55\x76\x8f\x99\xbc\xcd\xb6\xad\xe2\xe9\x6e\xfd\x84\xd3\xdd\xd8\xbd\x79\x6b\x19\xef\x3d\xf8\xd4\x34\xde\x7b\x32\xaa\x67\xbc\x77\x25\xf5\x43\xc6\x7b\x5f\x72\x75\x8f\x77\x05\xbf\x7d\xc6\xfb\xb7\x9f\x70\xbc\x9b\x3f\xd7\xe1\xdd\xfc\xe9\xa6\x7b\x4f\x46\xf5\x4c\xf7\xae\xa4\x7e\xc8\x74\xef\x4b\xae\xee\xe9\xae\xe0\x67\xef\xcb\xd7\xcd\xf6\x2d\x61\xe9\x83\xc6\xf1\xd6\xd3\xac\x08\x13\x25\x8f\x18\x85\x8f\x14\x1b\x7c\xc7\xb5\xd3\x37\x71\xa5\x3c\xfe\x41\x5d\x48\x24\xe1\x3d\x85\x51\x44\xbe\x57\x3d\xd0\x6c\x90\xb6\x0b\xc2\xa2\xf1\xee\xb9\xa3\xd6\x7d\x99\xb8\xfb\x98\x59\x29\x8a\x50\xa8\xc1\xb6\x19\x13\x7b\xe5\x81\xf3\x3d\x33\xc1\x79\xfd\xb9\x58\x89\x51\xa2\x24\xdd\x1f\x38\x9c\xf5\xd4\xb9\x9d\xc1\x0a\xab\xc8\xe7\xcd\x5d\xf3\x76\x9b\xbe\xce\xde\x35\x69\x8a\x98\xe5\x17\x45\x8f\x9b\xb1\x82\x00\x45\x02\xf6\xeb\x1d\x0b\xb1\x4f\xeb\xa8\xd4\xbf\xf6\x3c\xac\x6b\x9c\xa9\x8c\xea\xbe\xc9\x19\x95\xb6\xcd\x16\xaf\x31\x91\xc7\xfd\xc2\x37\x85\xe9\x6f\x4f\x90\xc7\xa8\x88\x49\x14\x16\x1f\x22\x7d\x12\x2a\x14\x21\x32\x53\x7e\x7e\x54\xc6\x0e\x36\x89\xfd\xb2\xe4\x3d\x13\x46\x9a\x25\x7a\x1e\x79\xf3\xd0\x61\xc2\x19\x2d\x79\xe1\x9a\x46\x7f\x3d\x35\x28\x8e\x3c\x73\xdf\x25\x74\xac\x50\xeb\x44\x21\x13\xe1\xa0\x34\xfc\xfb\xa9\xd1\x74\x2e\x5e\x0f\xb6\xc9\xeb\x2c\x42\x18\x93\xb5\x01\xc2\x98\xa4\x31\xc2\xf7\x64\x2b\x15\x43\x19\x19\x32\x28\x7e\xc7\x6c\xf1\x3f\x65\xd7\xb3\x5e\xfe\xb4\x15\x74\x2f\x92\x92\x33\x3e\x38\x76\x9e\x7a\x5a\x05\x0b\xb0\x57\x9c\x0c\xf0\xe3\xed\xdb\x02\x3c\xff\x68\x3d\x64\x63\x11\xf2\xbd\xc2\x21\xc3\x51\x0a\xfa\x96\x69\xf3\xe5\xb8\xe0\x27\x43\xeb\x51\x9b\x6b\x50\x1b\x3b\xa1\xb6\xd6\xa0\x36\x77\x42\x6d\xaf\x41\x6d\xed\x84\x7a\xb2\x06\xb5\xfd\xf5\xf9\x91\xbf\x6d\x0b\x0c\x19\x5d\x6a\x81\x4f\x8c\xa2\x2c\x2d\x54\x79\xaf\x66\x40\x91\x24\x74\xab\x5f\x19\xce\x58\x34\xca\x58\x14\x15\xb6\x8a\x45\x63\x1f\x16\xcd\x32\x16\x45\x8d\x50\xc5\xa2\xb9\x0f\x8b\x56\x19\x8b\xa2\xc6\xa9\x62\xd1\xda\x87\x45\xbb\x8c\x45\x7b\x4b\x16\xed\x12\x16\xf3\x1f\x5b\x4f\xa6\x57\xe6\xff\x99\xe0\xfe\x1e\x50\x50\x98\x4c\x9e\xfc\x3f\x00\x00\xff\xff\xb5\x68\x08\x32\xdd\x36\x00\x00")

func tmplBloomsky_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomsky_headerHtml,
		"tmpl/bloomsky_header.html",
	)
}

func tmplBloomsky_headerHtml() (*asset, error) {
	bytes, err := tmplBloomsky_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky_header.html", size: 14045, mode: os.FileMode(420), modTime: time.Unix(1498256957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langEnUsAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x82\xf0\x1c\xe4\x00\x59\xb3\xb4\x5b\x87\x2e\x9d\x04\xa2\x62\x2d\x01\xfa\x09\x28\xba\x85\x60\xe8\xee\x85\x1c\xa7\x71\x2b\xa3\x31\xb2\x19\xf6\xf7\x3e\x92\x7e\xe3\x0e\xa0\x3b\x59\xc9\xdd\x11\xea\x33\x40\x17\xc5\x10\x77\xc7\xf9\xf5\x0e\xa0\xec\xa1\x52\x5a\x69\xcc\x69\xc1\x05\xaa\xd4\x38\x1e\x4e\x71\x08\x52\x0a\x68\xcc\xdd\xfe\x8f\xe4\xf7\xe7\x74\xf1\x55\x9d\xcf\xca\x90\xed\x8d\x28\x1b\x94\x27\x21\x6e\xdd\xcf\x80\x1e\x16\x86\x09\x03\x41\xe7\x0e\xcd\xa0\x55\x36\xcd\xf0\xcf\xd4\x33\x71\x8a\x41\xf5\x4c\x24\x36\xf4\x2b\x57\x3f\x91\x73\xb1\x8a\x5e\x26\xb4\x94\x26\x3c\x04\x26\xd4\x8a\x3c\x5a\xa7\xde\xeb\xb8\xb5\x9f\x72\x8d\x83\xc1\xb4\xdc\xeb\x92\x86\x29\xdd\x5e\xb1\x31\x98\xda\x93\xda\xad\x94\x58\x4f\x1f\x8c\x9e\x1e\xdd\x0f\x6c\x00\x31\x04\x67\x4c\x52\x99\xd7\xab\xb0\x94\xc7\x57\xff\x57\x7a\xbb\x8a\x63\xcf\xe8\xef\x37\xf5\x15\xd9\xe9\x5b\x2e\xc7\x81\xb7\x34\xf4\x16\x07\x30\xf8\x49\xdb\xab\xb9\x97\x98\x3b\xd9\x95\xef\x00\x00\x00\xff\xff\xa2\x16\x10\xd2\x54\x03\x00\x00")

func langEnUsAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langEnUsAllJson,
		"lang/en-us.all.json",
	)
}

func langEnUsAllJson() (*asset, error) {
	bytes, err := langEnUsAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/en-us.all.json", size: 852, mode: os.FileMode(420), modTime: time.Unix(1497470514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langFrAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\xcd\x72\xdb\x36\x10\xc7\xef\x7e\x8a\x1d\x5d\x72\xc9\xf8\x01\x7a\x4b\xac\x3a\xb6\xa7\x91\x3c\x96\xeb\x4c\x4e\x1c\x98\x5c\x89\xdb\xe2\x83\x05\xb0\x74\x38\x1a\xbe\x4f\xf5\x1c\x7a\xb1\x0e\x68\x9b\x84\xa4\x6d\xe2\xe4\x26\x71\x7f\xff\xc5\x7e\x61\xc9\xed\x19\xc0\xec\x43\xe3\x67\xbf\x41\xfa\x09\x30\x73\xb1\xc6\xf4\x77\xf6\xa1\xf5\xa4\x67\x67\x00\xfd\xfb\x01\xe2\x8d\x04\x39\x8e\x13\xf3\x51\x3b\x67\xc2\xdf\x1d\x94\x9a\xd0\x46\x20\x0b\x9f\x9c\xa0\xba\x78\x36\x8f\x38\x0e\xdc\xe8\xe6\x82\x62\x27\xa8\x1e\x48\x6b\x9c\xa8\xb9\x92\xa0\x1b\xc7\x3e\x63\xb0\x14\x98\xf9\x7e\x57\xa2\x79\xf4\xb9\x33\x6c\xa9\x44\xb8\xae\x24\x9c\x42\xe3\x02\x45\x5a\xc3\xf5\x7c\x92\xfc\x1e\xa2\x00\xa7\xa7\x23\x72\x89\x8f\x02\x72\xb9\xdf\xb5\x9e\x30\x0b\xf3\xca\x19\x94\x8a\x5b\x96\x8c\x79\x0f\xae\xd8\x50\x25\x17\xe7\xc5\xb4\xdf\x4d\xf4\xb5\xad\xf0\x1b\xfc\xf9\x20\xd0\xa3\x69\x84\x6f\x94\x95\xaa\xa9\x6c\x7b\x10\xe9\x0d\x6b\x09\xe3\xd4\x9a\x98\x63\xa2\x37\x26\x3b\x31\x7f\xa8\x10\x61\xd5\x59\xb1\x43\xe8\x2d\xed\xff\xf5\x08\xa1\xb3\x65\xed\x9d\xa5\xa0\x22\xb9\x4c\xfe\x59\x49\x43\xfb\x59\xf9\x90\x33\x52\xa9\x8c\xa2\x09\x59\xd0\xa6\x96\xfa\xb8\x60\xca\xf2\x59\x48\x53\xbc\xc8\xc3\x59\x38\x1f\x6b\x11\xf2\x55\x4e\xb5\x22\xd3\x1e\x8d\xe3\x82\xcd\x23\x7a\x58\xae\xe1\xd2\x69\xed\x9e\xd0\x07\x51\x97\x54\x50\x21\xac\x47\x6a\x74\xb1\x2c\xa5\xb4\x96\x65\x74\x07\x27\xdd\x7a\x0c\x81\xbd\x34\x7e\x83\x89\x9c\x05\x15\x8d\x0b\x4d\xbd\xdf\x79\xfa\x87\x33\xed\x9d\x22\xa9\xcd\xb7\x9a\xe9\x88\x82\xb9\x22\x2d\xf5\x62\x60\x41\x95\x25\x1b\xd6\xfb\x1d\x54\xef\x14\xff\xe5\xd8\x57\xef\x6a\xa6\x23\x1f\x77\x2a\x4a\x61\xde\x2b\xfe\x96\x6a\xd0\x08\xc7\x26\x09\x0c\x83\x56\xa7\xbd\xf0\x7f\xe7\x97\x18\x63\xaa\xe3\xeb\xd0\xd5\xc8\x79\x8d\x56\xd8\x08\xd2\x15\x36\xf1\xa8\x6d\x2b\xc7\xe2\x10\xac\x38\x9b\x81\x15\x87\xa8\xc8\x62\x05\x5f\xc8\x4a\xfb\xe6\x81\x22\x86\x80\x50\x31\xb4\x69\x4d\x06\xc7\x11\x2d\x4f\x1e\xee\xd1\x34\xe8\x55\x94\xdb\x96\xac\xfb\xdd\x8b\x79\xd2\x90\xc1\x10\x95\x91\x32\x99\x6c\x23\xfe\x65\x4e\x1e\xcb\xe1\xc6\x9d\xf2\x29\x6e\x98\x80\x49\x84\xe2\x4a\x5c\x32\xe6\x4b\xf1\x48\x2d\xed\xdb\x17\xdb\x6b\x05\x8e\xb4\x9f\x58\x3c\xe6\x4e\xad\x95\x1e\x6e\xc3\xa1\xe6\x2b\x4a\x77\x67\x99\x8f\x57\x55\x54\xaa\xcb\x29\x9b\x0a\x3b\xdb\x6e\xcf\x2f\x1c\xdb\xd8\xf7\x50\xa9\x6e\xf6\xfe\xc8\xc5\xa1\x39\xbb\x7a\x35\x6d\xa4\x29\xb8\x52\xf9\xbb\x52\xbb\x27\x81\xf9\xa8\x32\x3f\x06\x2b\x62\x23\x6d\x39\xd7\x61\x56\x77\xd3\x15\x35\xa6\x3d\x56\x90\x2d\x0c\xc6\xc3\x6d\xf1\x9c\xcb\x35\x28\x03\x59\xc4\xcf\x18\x44\xa5\xf5\xf9\x49\x66\xdf\x85\xc7\x63\x1b\xf4\xc1\xd9\x62\xe3\x11\x23\x59\xe9\xeb\xe0\x0a\xb5\x76\xc9\xd1\xed\x80\xf6\xfd\x89\x98\xad\x47\x55\x15\x68\x14\xe9\xa2\x4c\xc7\x49\x5d\x78\x95\x43\xad\x42\x1e\xd7\xb3\x1a\x06\x75\x38\x4d\xe3\xed\xca\x1f\x87\x55\x44\x32\xb8\xf6\xea\xe0\x45\xfd\x73\x01\xa6\xcf\xa1\x58\x23\x34\x69\x1f\x6d\xb7\xe7\xf7\xaf\x1e\xfb\xfe\xd7\x63\xff\xae\xd3\x29\x2d\xef\x36\x5e\x99\x1f\xf7\xea\xc9\x79\x9d\xed\xaa\xce\xb1\x7f\x4b\x8f\xbe\x3a\x86\x5a\xb5\xf8\x13\xcd\x79\x83\x24\x85\x71\xd6\xff\x17\x00\x00\xff\xff\x12\x5d\x85\xe5\xa3\x0a\x00\x00")

func langFrAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langFrAllJson,
		"lang/fr.all.json",
	)
}

func langFrAllJson() (*asset, error) {
	bytes, err := langFrAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/fr.all.json", size: 2723, mode: os.FileMode(420), modTime: time.Unix(1497470514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testMockConfigfortestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x3c\x9c\x43\xfb\x41\xd2\x34\x50\x4a\xf1\xe1\x83\x2e\xdd\xc3\x42\x59\x42\x37\xfd\x01\x63\x69\x1c\x8b\xc8\x1a\x23\x8d\xd3\xfa\xdf\x2f\x4a\xea\x34\x25\xbd\xac\x4e\xd2\x3c\xbd\x37\x33\x6f\x66\xb1\x58\x14\x33\x78\x0a\xdb\x81\xb6\x8c\x6b\x0e\x8b\x21\xcd\xd1\xc4\xff\x0a\x7c\x86\x2b\x1c\xe2\xc5\xec\xe3\x60\x4d\x91\xba\x84\x46\x22\x6a\x2f\xd2\xa5\xdd\x58\xcc\xf0\x5b\x62\x47\xde\x8f\xb0\x12\xae\x14\xa6\xa5\xb0\xe5\x02\xa7\x2f\xaf\x2f\xcf\x15\xca\x56\xb5\x4f\xd5\x72\x49\xbd\xbb\x99\x90\x1b\x23\x5d\x0e\x2c\xd3\x6e\xb4\xa4\xb4\x2c\x8b\x19\xb4\x65\xec\x78\x9c\xc3\xe9\x55\x42\x13\x39\x17\x32\xb1\x2d\xa5\xb6\x16\x8a\xf6\xab\xc6\x59\xb6\x47\x63\x38\xa5\x8d\xec\x38\x54\x28\x47\x19\xa2\xe6\x7b\xf9\xd9\xc5\x0b\x37\x91\x53\x0b\x75\x1d\xcf\x51\x33\x82\x28\x54\x90\x72\x17\xa8\xd9\xd0\x90\x18\xa3\x0c\xa0\xc8\x59\xd7\xec\xd8\xa2\x1e\x21\x3d\x87\x37\x26\x6d\x39\x82\x82\x3d\xa5\xc4\xb5\x0b\x48\x6c\x24\xd8\xec\x5f\x3c\xea\x6f\x5c\xc7\xb1\x42\x79\x7f\x7b\x96\xfb\x57\x03\x8d\x03\xc3\xba\xd4\x7b\x1a\xe1\x42\x93\xdd\x53\x27\x21\x41\x02\x8c\x84\x24\x3e\xbb\xf7\x71\x7b\x34\xea\xf6\xa4\x6c\x2b\x94\x99\xf9\x0f\x5a\x6f\x5c\xf7\x74\x98\x44\xbb\xd9\xac\x2f\x85\x8e\xf1\xb5\x44\x45\x85\xb2\x5a\xad\x56\xab\xf2\x62\xd6\x2e\x34\x7e\x78\x7f\xfa\x81\xc0\xd9\x57\x8a\x23\xdc\x31\x6f\x81\x13\xf8\x9d\xf6\x84\xfd\xe1\xb8\x3f\xf8\xe0\xc5\x90\x6f\x25\xe9\x25\x9a\x6b\xa8\x50\x3e\xdc\x3e\xdc\x9f\x83\xaf\x89\x63\xa0\x8e\x2b\x94\x51\xe4\x0b\x6f\x4d\x29\xbd\x49\xb4\xdf\x40\x4f\xa4\x54\x53\xca\xac\x69\x40\x67\x6d\xfd\x7c\xef\x39\x6a\x31\xc3\xea\xe0\x17\xb0\xf8\x1f\x77\xd0\x48\x26\x37\xe4\x65\xfb\xcc\x7b\xf6\x15\xee\xf2\x26\x0a\xf2\x26\xe4\x85\x34\x62\x19\x2e\x40\x9a\xc6\xbb\xc0\xe8\xf2\xbb\x1f\x14\x9d\x98\x5d\x35\xf9\x71\x7c\x34\xe4\x13\x17\xb3\x23\x97\xbb\xde\x93\xf2\x1c\x49\x49\x9d\x41\xe3\xfc\x41\xa8\x11\x6f\x39\x1e\x56\xcf\x05\xd4\x43\xb0\x9e\x6d\x01\x58\xde\x9f\x14\xa6\x53\xfc\x0d\x00\x00\xff\xff\x60\xb0\x85\x3d\xaf\x03\x00\x00")

func testMockConfigfortestYamlBytes() ([]byte, error) {
	return bindataRead(
		_testMockConfigfortestYaml,
		"test-mock/configForTest.yaml",
	)
}

func testMockConfigfortestYaml() (*asset, error) {
	bytes, err := testMockConfigfortestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-mock/configForTest.yaml", size: 943, mode: os.FileMode(420), modTime: time.Unix(1497983184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testMockMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xdf\x52\xe2\x4a\x10\xc6\xef\x7d\x8a\xa9\xb9\x0e\x21\x09\x09\x18\xaa\xce\x05\x82\x9e\xa3\x52\x68\x01\x6a\x9d\x58\x16\x35\x92\x16\x66\x99\x99\x84\xf9\x23\xcb\x5a\xbe\xcf\xee\x73\xf8\x62\x5b\x13\x88\x22\xee\xd5\x56\xb8\xcc\xd7\xdd\xbf\x4c\x77\xd7\x7c\x73\xff\x72\x84\x10\x42\xf8\x66\xdc\xc5\x6d\x14\x38\x9b\xaf\x2e\xd5\xeb\x01\xe1\x80\xdb\x08\x8f\xe7\x86\x0a\xbc\x0d\x8c\x74\x26\x39\x6e\xa3\x4d\xd5\xa6\xf2\xf6\x5c\xa4\xf0\xdd\xa6\xfa\xdb\xb4\x42\xbf\xa3\x22\xed\x51\x09\x53\x4d\x33\x61\xa3\xa7\xbb\xd1\x21\xa1\xa2\x47\x28\x5b\xe3\x36\xf2\xf6\xaa\xfe\x35\x4a\xef\xc9\x23\xa3\x34\xa1\x02\x52\x1b\x1f\xe5\x00\xe9\x5e\x82\xe5\x0d\x89\x86\x3d\x39\x08\xe7\x36\x62\xd5\x42\x7c\x2d\xfb\x00\x22\xa7\x73\xf2\xc8\x6c\x81\x96\x06\xb6\x7a\x0f\x9e\xe9\x14\xca\xd6\xd5\x62\xfd\xa9\xfb\x21\xcc\xa8\xd2\x20\xc7\xb4\x88\xfb\xe1\x71\x33\xf6\xa2\x20\x8e\xca\xea\xd1\xd8\xca\xdb\xaf\x93\xcc\x88\x14\xd2\xeb\x8c\x0a\xdb\x0e\x2e\x29\xfd\xab\x01\x6e\xa3\xd0\x6d\xf8\x5e\x99\x5a\xe6\xbc\x94\xe7\xbb\xa5\x29\x64\x7d\x5a\xcc\xe1\x1e\xcf\xb5\xce\xdb\xf5\xba\x6a\xb8\x84\x93\x1f\x99\x20\x2b\xe5\x4e\x33\x5e\x7f\x54\x8b\xb5\xa6\x1c\x18\xc9\x15\xa8\xfa\x13\x39\xa1\x26\xb9\x53\x22\x27\xd9\x32\x59\xca\x49\x30\x09\x3c\xbf\x55\xf3\xa2\x5a\xd0\x72\x79\x1e\xee\x2e\xa0\x02\xe6\xf1\x01\x98\x71\xf5\xcc\x86\x77\x00\xa6\x5f\x30\x0b\xe4\xc3\xfe\xce\x26\xdd\xca\xb6\x36\xe9\x1e\x62\x6f\x07\xa1\xc6\x87\xa0\x36\xbc\x92\x5a\xcd\xd6\xb6\xb4\x4f\x7b\xdb\xdc\xf9\xf3\x9e\xbd\xa3\x61\x18\x74\xbd\x28\x8e\xc2\x4e\x14\x97\xf7\x75\x60\xf8\xd5\xd3\x59\xc6\x58\xb6\x02\xa9\x76\x5c\xb2\xdf\xb1\xd7\x3d\xf2\xdc\x46\x23\x0e\xb7\x5a\xa7\x5f\x58\xc0\x87\x25\x10\x4d\xec\xc5\x46\xb8\x6f\x38\x15\x44\x4c\xad\x73\xc4\x71\x1c\x3b\x08\x8f\x81\xe7\x20\x89\x36\xd2\x8a\x2d\xcf\x6d\x59\xf5\x9c\x93\x19\xdc\x0c\xfb\xf6\x3c\xef\x3d\xd7\x8c\xaa\xad\x40\xe9\x9a\xff\x87\xee\x29\x9f\x7d\xed\x7b\x79\xe1\x2f\x64\x64\x96\x3c\x21\x9c\x5f\xac\xfe\x71\xbf\xe5\x33\x3b\xc6\xf1\xa8\xb0\xae\xb8\xd9\x08\xa3\xc0\x6b\x39\x1b\xef\xc4\x6d\xf4\x44\x98\x02\x07\xe1\xff\x0c\xa7\x29\xd5\xd6\x99\x9b\xa1\x83\xf0\xb5\x04\xa5\x36\x47\x0c\x62\x37\xf4\x9d\x72\x64\xe3\x75\x5e\xd8\xe4\xe8\xf2\xff\xc0\x92\x6f\x33\xa6\xc9\xac\xc8\x6b\xfa\x36\x6d\x40\x67\x73\xbd\x43\xfe\x78\x2a\xb6\x03\x28\x5a\xdd\x3b\xd0\xbb\x47\x9f\x19\xc6\x3a\x69\x6a\xff\x6e\xff\xd2\x93\x6f\x3f\x9f\x01\xa5\xa0\x50\x87\x31\xfa\xf6\x4b\x39\xa8\x70\x67\x07\xdd\x11\xc6\x32\x41\xc1\x41\x27\xa7\x1f\x2f\x95\x04\xd0\xa5\x93\x7f\x2d\x2e\xf3\xae\x25\x3c\x53\x58\x15\x27\xf9\x6a\xb8\x7f\x3b\xf6\xe5\x8a\x25\x57\x5c\x44\xd3\xf7\xb1\x57\x80\x14\x09\x5f\xf2\x64\x55\x1d\xd2\x08\x71\x41\x16\x3c\x99\x55\x88\xcc\x78\x74\xb9\xe0\x91\x57\x21\x32\xe7\x09\x5d\x8a\x5c\x6d\x90\x0f\x47\xaf\x0f\xbf\x03\x00\x00\xff\xff\xf8\x8c\x30\x81\xb6\x08\x00\x00")

func testMockMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_testMockMockJson,
		"test-mock/mock.json",
	)
}

func testMockMockJson() (*asset, error) {
	bytes, err := testMockMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-mock/mock.json", size: 2230, mode: os.FileMode(420), modTime: time.Unix(1497983459, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/bloomsky.html": tmplBloomskyHtml,
	"tmpl/bloomsky.txt": tmplBloomskyTxt,
	"tmpl/bloomsky_body.html": tmplBloomsky_bodyHtml,
	"tmpl/bloomsky_header.html": tmplBloomsky_headerHtml,
	"lang/en-us.all.json": langEnUsAllJson,
	"lang/fr.all.json": langFrAllJson,
	"test-mock/configForTest.yaml": testMockConfigfortestYaml,
	"test-mock/mock.json": testMockMockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lang": &bintree{nil, map[string]*bintree{
		"en-us.all.json": &bintree{langEnUsAllJson, map[string]*bintree{}},
		"fr.all.json": &bintree{langFrAllJson, map[string]*bintree{}},
	}},
	"test-mock": &bintree{nil, map[string]*bintree{
		"configForTest.yaml": &bintree{testMockConfigfortestYaml, map[string]*bintree{}},
		"mock.json": &bintree{testMockMockJson, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"bloomsky.html": &bintree{tmplBloomskyHtml, map[string]*bintree{}},
		"bloomsky.txt": &bintree{tmplBloomskyTxt, map[string]*bintree{}},
		"bloomsky_body.html": &bintree{tmplBloomsky_bodyHtml, map[string]*bintree{}},
		"bloomsky_header.html": &bintree{tmplBloomsky_headerHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

