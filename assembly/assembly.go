// Code generated by go-bindata.
// sources:
// tmpl/bloomsky.html
// tmpl/bloomsky.txt
// tmpl/bloomsky_body.html
// tmpl/bloomsky_header.html
// lang/en-us.all.json
// lang/fr.all.json
// test-mock/configForTest.yaml
// test-mock/mock.json
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplBloomskyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x5d\x0a\xc2\x40\x0c\x04\xe0\xf7\x9e\x62\xc8\x01\xec\x05\x16\xef\xd2\xba\x23\x15\xf7\x47\x34\x2f\x4b\xc8\xdd\x25\xac\x3e\x34\x4f\x81\xf9\x86\x31\x43\xe6\xfd\xd1\x08\xd9\x4b\xef\xf5\xf3\x1c\x02\xf7\x25\x1d\x5a\xcb\x75\x01\xd2\xc1\x2d\xc7\x13\x67\x06\x65\x7d\x95\x4d\x09\x89\x80\x6f\xb9\xb8\x07\x5b\xff\x2e\xed\x3d\x8f\x59\x38\xf1\x5b\x6f\xca\xa6\x02\xfc\x0a\xd3\xa5\x75\x2e\x99\x81\x2d\x47\xf6\x0d\x00\x00\xff\xff\x69\x4f\x24\xd4\x93\x00\x00\x00")

func tmplBloomskyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyHtml,
		"tmpl/bloomsky.html",
	)
}

func tmplBloomskyHtml() (*asset, error) {
	bytes, err := tmplBloomskyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky.html", size: 147, mode: os.FileMode(420), modTime: time.Unix(1498565002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomskyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x4b\x8e\xa3\x30\x14\x45\xe7\x59\xc5\x53\xa4\x1e\x76\x2f\xa0\x87\x0d\x22\x20\x75\x3e\xca\xaf\xc7\x4e\x78\x09\x56\x63\x40\xd8\x54\x55\x84\xde\x9e\x6a\x0d\xb5\xb2\x92\x31\x9f\x10\x3b\x89\xaa\x98\xde\x73\xee\x7d\x10\x29\x3f\x5d\xcf\xe4\x4f\x9a\xe7\x42\xfe\xbf\x40\x5d\xff\x9a\xa1\xfa\xcb\xa4\xf2\x58\x9a\x12\x4d\xdc\x7c\x5d\x6f\x61\xba\xe5\x02\xa5\x62\xa2\x80\x43\xab\x4f\x89\xe0\x37\xb8\x1e\xd3\xab\x8d\x8d\x36\x88\x4c\x85\xc7\xd5\x03\x69\x10\x35\xd7\x39\x3e\xbe\xf0\x23\x42\x14\xbb\x45\x23\x18\x28\xf2\x3b\x69\x51\x89\x03\x96\xb0\x3c\x41\x90\xa7\x69\xfe\x8a\xa5\xbc\xd5\x8d\xb8\xa8\xc4\xf2\xd4\x33\x9d\x1e\x65\x31\xbe\xc1\x6e\xff\xe0\x56\xa3\x37\xe0\x6e\xdf\xcf\xf2\x73\xa2\x1e\xbf\xa0\x16\x23\xd9\x80\x9d\xf5\x8f\x67\x31\xf8\xbc\xc4\xa3\xe2\x79\x66\xeb\x66\x4a\x53\x3d\x34\x52\x67\x95\x74\x8f\x0e\xa2\x46\xe6\x45\x42\x04\xf3\x22\x31\xea\xa6\x92\x8a\xf1\x0c\x63\xd0\xc0\xb5\x6f\xb4\x3e\xd7\xf1\xa6\x40\x8c\x6f\x0a\xbe\xb4\x2d\xb5\x29\xbf\xbd\x7c\xad\xaf\x19\x77\x7c\x24\xfb\x1b\x6b\x8e\x08\x06\x09\x7c\xc6\xd3\x8b\xbd\xa7\xb3\x26\x8a\x34\xcf\xb3\xbb\x33\x03\x6e\x91\xb0\x66\x0a\xc7\xf8\x40\xeb\xcc\x36\xac\x6b\x6e\xcf\x99\x0b\x22\x10\xe2\xc9\x5b\x0f\x92\xc5\x3b\x8e\xb2\x0f\x1b\x59\x5b\x14\x05\x96\x4c\x55\x65\xe3\x05\xd3\x7b\x7b\x57\x60\xc0\x92\x12\xb3\x04\xb9\x22\x82\x8f\xf7\xc0\xd9\xe4\xb9\x7e\x2e\xab\xca\xc3\x54\xf2\x4a\x36\x3d\x9e\xe9\x09\x2b\xc1\xe3\x27\x7f\x1b\xa6\xa7\x23\x89\xe0\x87\x71\x57\x25\x4a\xd9\x1e\x10\x65\xe1\xb9\x2d\x30\x78\x17\xea\xa0\xcd\x6d\x2b\x5c\xb1\x6e\x75\x6c\x85\x2b\x66\xe2\xc9\x67\x00\x00\x00\xff\xff\x01\x56\xa6\x84\x62\x05\x00\x00")

func tmplBloomskyTxtBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyTxt,
		"tmpl/bloomsky.txt",
	)
}

func tmplBloomskyTxt() (*asset, error) {
	bytes, err := tmplBloomskyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky.txt", size: 1378, mode: os.FileMode(420), modTime: time.Unix(1498565002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomsky_bodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x72\xdb\x36\x16\xbe\xf7\x53\xa0\xe8\xec\xde\x51\x94\x25\xa5\x3b\xd3\x95\x74\x91\x78\x62\x7b\x67\x9b\x66\x6a\x37\x9d\xed\x4d\xe6\x88\x38\x22\x11\x11\x00\x0d\x80\x52\x54\x8f\xde\x69\x9f\x61\x9f\x6c\x07\xa0\x48\x51\x12\xe5\x9f\x9a\x56\x5d\xef\x66\x26\x09\x09\x02\xe7\x3b\xf8\xbe\x83\x03\xea\x80\xb7\xb7\x0c\xa7\x5c\x22\xa1\x91\x92\x16\xa5\xa5\xab\xd5\xc9\x09\x21\x84\x0c\x25\xcc\x49\x94\x82\x31\x23\x2a\x61\x3e\x01\x4d\x8a\xff\x02\x2e\xe7\xa8\x0d\x96\xb7\x53\xfe\x15\x59\x60\x55\x46\xc7\x7e\xa0\x1f\xcc\x78\x35\xd8\x19\x06\x2e\x51\xd7\x9e\xef\xf6\x59\x9b\x4a\x10\xd8\x5e\x3f\xdf\x77\x92\x5b\xab\x24\xb1\xcb\x0c\x47\xb4\xb8\xa1\x3b\x83\xad\x8a\xe3\x14\x49\xa4\xd2\x14\x32\x83\x8c\x12\x06\x16\xd6\xcd\xce\x8d\xa2\xbd\x6c\x06\x1d\xa3\x1d\xd1\x6f\x8b\xd1\x94\x80\xe6\x10\xe0\xd7\x0c\x24\x43\x36\xa2\x53\x48\x5d\x5f\xdf\xea\x66\xa0\x55\x5a\x41\xed\x4e\xc4\x64\x20\x4b\x67\x8c\x0e\x94\x4c\x97\x74\x7c\x5d\xb8\x23\x61\xce\x63\xb0\x5c\xc9\x61\xe8\xfa\xdd\x31\x94\x47\x4a\x06\xde\xfc\xb1\xba\x0e\xc3\x82\xca\x06\xc2\x61\x87\xdd\x89\x06\xc9\x28\x49\x34\x4e\x47\xf4\x5b\x3a\x7e\x9b\x2a\x25\xcc\x6c\x39\x0c\x61\x07\x3c\x64\x7c\xde\xa0\x34\x67\x15\x7d\x9b\xc8\x28\x24\x29\x23\xa9\x92\xa8\xc1\x9f\x3c\xad\x39\x54\x0e\x90\x30\x6f\xe8\xeb\xfb\xa7\xbc\xec\x0f\x91\xe5\x73\xa4\xe3\x21\x6c\xbc\xbf\xbd\xbd\x26\xf4\x42\x09\xa4\xab\x95\x9b\xc1\x30\x4c\xf9\x41\x43\x9b\x91\x89\xb5\x99\xf9\x3e\x0c\x63\x6e\x93\x7c\xd2\x89\x94\x08\x33\xb0\x9a\x47\x33\x48\xb9\x0c\x27\x6b\x4e\x82\x28\xe5\x28\x6d\x10\x2b\x4a\xca\x38\xfb\x3c\x49\x41\xce\xe8\xf8\xdc\x0f\xfd\x1d\x98\x0c\x4c\x32\x51\xa0\x59\xa7\x84\xf1\xf8\xfb\x08\xa5\x32\xe4\xac\x1c\xb1\x41\xdb\xe7\x35\xcc\xd3\x3b\xf5\xab\xdd\x0e\x43\x09\xe5\xe5\x37\x41\x10\x76\x24\xcc\x2b\xcd\x48\x10\xac\xcd\xdf\xb7\xf6\xeb\xcf\xb5\x5a\xdc\x91\x15\x22\x95\x06\x82\x05\xfd\xa6\x78\xe0\x22\x26\x46\x47\x23\x1a\x1a\x0b\x96\x47\x15\xf9\x9d\x4c\xc6\x94\x2c\x38\xb3\xc9\xe8\xbb\xee\x5f\x1a\x86\x66\xa5\xfd\x14\x81\xad\x63\xa1\x22\xad\x90\x8e\x70\x49\xce\x95\x0f\x8e\xac\xc1\x42\x19\xcf\x96\x0b\x34\x16\x44\xe6\xac\x74\xce\xd1\x5e\x73\x81\x57\xae\xc1\x8d\xdc\x5b\x07\xdb\x8e\x53\x02\xa9\x1d\x6d\x90\xb9\x88\xa9\xb7\xea\x67\xc2\x45\xdc\xa5\x24\x41\x1e\x27\x76\x44\x7b\xdd\x6e\x39\x27\x7f\x7d\xff\x92\xf3\x02\x39\x3f\x05\xeb\x6f\xb4\xb9\x83\xe5\x37\xb4\x29\x3c\x26\xba\xa9\xb5\x9c\xbf\xca\x6d\x96\x5b\x3a\x2e\x3d\xd8\xef\x69\x61\xe2\x72\x72\x81\x54\xdc\xf8\x7f\x03\x63\x35\xcf\x90\x1d\x5a\xbe\x56\x37\x3f\x28\x1e\xb2\xf1\x56\x8a\x8b\xd3\x65\x96\xb8\x3c\x47\xaa\xab\x40\x40\x16\x08\xd0\x33\xdc\x24\x3e\xe2\x95\x7e\xc7\xed\xd2\x0b\x6b\xd9\xdd\x10\x07\x1f\x6e\x51\x10\x39\x73\x6b\xf5\x9d\xe9\x83\xc2\x57\x23\x9f\x06\xfc\x57\x39\x31\xd9\xdf\x7f\x87\xf5\x61\x78\x88\xd3\x7b\xc9\x7e\x18\x13\xd2\x85\xaa\xa7\xe2\xd2\x7c\x70\xd7\x2f\x96\x8a\xe7\xb5\xfe\x04\xa2\x87\xd5\xa6\xb5\xe0\x64\xc1\x03\x93\x4b\x83\xd6\x05\x30\x5f\x47\xef\xa5\x64\xf8\x95\xfc\xfc\x89\xae\x56\x4f\x9d\x60\x25\x5c\x3e\xa7\xce\xba\x8b\x60\x6f\xfe\xe7\x4f\x2f\x56\xb9\x36\xb9\x15\x90\xa6\x41\xa4\x61\x6a\x03\x60\x73\x6e\x94\x5e\xd6\x99\xfe\x85\x4b\x46\xce\xb8\xc6\xc8\xbd\xbc\xb5\x98\x31\x16\x5c\x32\xc6\x75\x99\x34\x1c\x4e\x05\xf3\x7f\xe2\xd7\xc4\x9f\xe7\xc6\xb6\xcc\x79\xec\x4c\xd6\x48\x77\x10\x3f\x64\xc9\x73\x53\x5e\xf7\xc1\xb9\x20\xcc\x9e\x13\xe6\x5e\x1f\x9a\x0c\xcd\x44\xb2\x6b\x69\x26\x9e\x32\x9d\x23\x6a\x7c\x95\x1b\xff\x5e\xc8\x88\x73\xbd\x45\xa1\x4d\x6e\xac\x13\xbb\x64\xa6\x02\x72\x38\x57\x19\x22\x3b\xa6\xe4\xa5\x37\x1b\xcd\x1b\xfc\x79\xa4\xfa\xa5\xcd\x9a\xfc\xfb\x46\x5f\x4c\x20\x68\xe0\x92\x69\x95\xd5\xc5\xff\x09\x78\x9b\xf9\xd4\x41\xac\x5f\x3b\x9c\x65\xbf\x31\xbe\xf6\x1c\x7a\x88\x56\x72\x06\x3c\x6d\xf3\xf5\xd6\x03\x79\x9b\xeb\x58\x73\x28\x1e\xe4\xf2\xd9\x37\xab\x7d\x27\x84\xa8\xde\x54\x2a\x3f\x7e\x10\x2f\x3b\xd2\xc9\x4f\x60\x91\xfc\x13\x8c\x25\x89\xca\x75\xcb\xda\x68\xb0\x58\x97\xc6\x81\x1d\x59\x19\xe7\x82\x13\x66\xdb\x89\x97\x22\x8b\x4d\x50\x0b\x25\xd0\x16\x3f\x04\x4b\x65\xae\x51\x64\xa8\xc1\xe6\x1a\x5b\x54\xc4\xa2\xc8\xa6\x55\x2d\x60\x03\xf1\x1e\x12\x8d\x32\x41\x6e\x57\x2b\xf2\x9f\x7f\xbf\x3f\x92\x3a\xce\x9d\xa8\xc1\x9d\x77\x98\x1a\x9e\x1b\xef\xcb\xbb\x97\x20\x52\x92\x0b\xce\xfc\x0f\xe9\x8d\x42\x17\x65\xdb\x6a\x45\x7c\x91\x6d\x16\xb5\xc5\xcb\x06\xae\xa0\xa6\x84\xfa\x5f\x78\xfb\x9e\x80\xde\x5f\x0d\x1f\x35\x1a\xd3\xee\x52\xc8\xd6\x26\xb9\x4c\xe2\x92\xe7\x12\xe6\x52\x5e\xc4\x47\x4b\x51\xa5\x23\x49\x06\xbb\x7e\x5c\x7c\x84\x3f\x28\x49\xdd\x57\xbd\xc2\x9b\x1c\x52\xfe\x5b\xbd\x78\xf5\x49\xa5\x16\x62\x6c\x8b\x96\x79\x61\xae\x5d\x4a\x1e\xe4\xc2\x73\xac\x82\x6f\x82\xa0\x60\x7d\xab\x6c\xfe\x7d\x18\x9a\x7e\x07\x04\xfc\xa6\x24\x2c\x8c\xaf\x97\x4f\xcc\x6c\x69\xb9\x40\x5f\xb4\x36\xe1\x14\xde\xf2\xfc\xd7\x5f\x8c\xcc\x40\xdd\xfc\x7a\xa3\x3f\xf7\x3e\xf7\xba\xa7\x7f\x0b\xba\xdf\x05\xdd\x41\x47\x64\x03\x3a\xae\x95\x6c\xad\xc8\x3a\x31\x9f\xde\x5b\xb9\x3d\xbd\xa3\x72\x4b\xf6\x4e\x4c\x6a\x7f\xf6\x2b\xa8\xd5\x14\x1f\xed\x44\xef\xae\xf2\x71\x8b\x38\xfd\x23\xe1\x0c\x8e\x84\xf3\xe6\xa1\x65\xf7\x0a\xc2\xc5\x65\x10\x3c\x57\x2e\x88\x53\x35\xc1\x9d\x22\xf6\x87\x5c\x4c\x50\x93\x1f\xa7\xe4\xbd\x4a\x53\xb5\x40\x6d\x5a\xcc\xdd\xd3\xca\xe6\x3a\x3b\x7c\xc8\xc5\x8f\xd3\x0a\xe9\xcf\x98\x20\x9e\xaa\x42\x4d\x8f\x48\xc5\x3b\x6a\x9c\xe1\x9c\x47\x48\x2e\xdb\x2c\x64\x30\x6f\xb3\x14\xa0\x40\xb8\x3c\xfb\x93\x51\x3f\x0c\xfd\x61\xcf\xa1\x83\xa5\xbd\xc6\xea\x67\x05\x4e\x35\x9a\xc4\xe5\x69\x47\x75\x71\xb6\x74\xb2\x6d\xb9\x85\x23\xaf\x41\xd3\xc1\xe2\xb3\x9c\x58\x35\xcd\x76\x6f\xd6\x53\xa5\x05\x58\x8b\xec\x9a\x0b\x7c\x53\x4d\xfc\xe0\xb8\x39\x67\xa8\x8a\xcd\x9c\xb3\x4d\xa2\xea\xf7\xea\x07\x87\x83\x2e\x25\xe5\xf7\x0b\x24\x55\xca\x1f\x67\x0e\x8d\xca\x75\x84\xe5\x39\x64\x95\xfd\x0a\x3b\xc5\x47\x16\xde\x7a\xe8\x77\xc0\x7f\xa9\x5c\x93\x89\x56\x0b\x83\x9a\x30\x85\x86\x48\x65\x89\xc9\xb3\x4c\x69\x4b\x6c\x82\xa4\x70\xc5\x42\xdc\x39\x19\x86\xfe\xa6\xdd\x15\xfa\x78\xfe\x06\x8f\xe4\xef\xb4\x25\xfe\x4e\x5f\x09\x7f\xfd\x47\xf2\xd7\x6b\x89\xbf\xde\x2b\xe1\xaf\xf7\x48\xfe\xfa\x2d\xf1\xd7\x7f\x25\xfc\x9d\x3e\x92\xbf\x41\x4b\xfc\x0d\xfe\x00\xfe\x36\xdb\xe4\x43\xf6\x38\xb2\xbd\xc9\x1d\xe8\xbd\xee\xa9\xd5\xa2\xea\x55\xff\x94\xa7\x78\x5a\x7d\x9e\x53\xfb\x7a\xc7\x3d\x79\xab\x94\x35\x56\x43\x46\x22\xa5\x91\xfc\x03\xe6\x70\x15\x69\x9e\xd9\xc6\x49\x8d\x46\xa3\x43\xed\x4f\xf8\xbb\x71\xdb\x79\xf4\x31\x85\x08\x19\x81\x82\x6e\x94\x8c\xa8\xa9\xbf\x64\x2a\xca\x05\x4a\x4b\x8c\xf2\xf7\x19\xc4\xe8\x84\x06\x46\xa6\x60\xec\x7a\x6a\xde\x8e\xf1\x53\xd8\xfe\x6a\xe8\x8b\x09\xbf\xdc\xe4\xa8\x97\x41\xbf\xd3\xeb\x9c\x76\x04\x97\x9d\x2f\x86\x96\x84\x15\x43\xc6\x27\xb7\xb7\x1e\x73\xb5\xfa\x6f\x00\x00\x00\xff\xff\xde\xc7\x54\x5f\x30\x29\x00\x00")

func tmplBloomsky_bodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomsky_bodyHtml,
		"tmpl/bloomsky_body.html",
	)
}

func tmplBloomsky_bodyHtml() (*asset, error) {
	bytes, err := tmplBloomsky_bodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky_body.html", size: 10544, mode: os.FileMode(420), modTime: time.Unix(1498565002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomsky_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\x5d\x53\xdb\x38\x17\xbe\xef\xaf\x38\xeb\x1b\x28\x5d\xdb\xe4\x83\xd9\x5d\x4a\x98\xed\x16\xb6\xa5\xd3\x42\x87\xd0\xf6\xdd\xe9\xf6\x42\xb1\x4e\x62\x15\x4b\xf2\x4a\x72\x42\x86\xc9\x7f\x7f\x47\x76\x42\x9c\xc4\x76\x1c\x42\x3a\xcd\x15\x8a\xce\x79\xce\x73\x3e\xe5\x8f\x70\x7f\x4f\xb1\xcf\x04\x82\x13\x22\xa1\xa8\x9c\xc9\xe4\x19\x00\xc0\x09\x47\x43\x20\x08\x89\xd2\x68\x3a\x4e\x62\xfa\xee\xef\xce\x69\x6e\x2b\x34\x26\x76\xf1\xbf\x84\x0d\x3b\xce\xff\xdc\x4f\xaf\xdc\xd7\x92\xc7\xc4\xb0\x5e\x84\x0e\x04\x52\x18\x14\xa6\xe3\x5c\x9c\x77\x90\x0e\x70\x41\x53\x10\x8e\x1d\x67\xc8\x70\x14\x4b\x65\x72\xc2\x23\x46\x4d\xd8\xa1\x38\x64\x01\xba\xe9\xe2\x57\x60\x82\x19\x46\x22\x57\x07\x24\xc2\x4e\x63\x06\xf4\x8b\xeb\xc2\x4d\x88\x40\x7a\x72\x88\xd0\x82\x14\xd8\x90\x81\x86\x03\x9e\x68\x73\x00\x81\xe4\x08\x7d\xa6\xb4\x01\x26\xc0\x84\x08\xd6\xbf\x97\x40\xc4\x18\xa4\x09\x51\xa5\xeb\x99\x6d\xb0\x4a\x99\xce\x01\xe9\x1b\x54\x07\x56\x45\x63\x06\xe9\xba\xab\xf4\x29\xea\x40\xb1\xd8\x30\x29\x72\x1e\xfc\x15\x49\xc9\xf5\xed\x18\x82\x88\x59\xd8\x81\x2c\xf0\x9c\x24\x26\x94\x2a\xa7\x15\x13\xa3\x58\x70\x4b\x22\x26\xfe\x1c\x70\xc2\x22\x2f\x90\xdc\x39\x7d\x96\x69\x1a\x66\x22\x3c\x5d\x46\x7e\x23\x4f\xfc\x6c\xe7\xd9\x3c\x22\xef\x89\xc1\xcc\x8f\x98\x45\x48\x81\x08\x0a\x9c\x09\xd6\x67\x48\xe1\x75\xb7\x3b\xf7\x24\x62\xe2\x16\x14\x46\x1d\x47\x9b\x71\x84\x3a\x44\x34\x0e\x84\x0a\xfb\x1d\xc7\xd7\x86\x18\x16\xf8\x81\xd6\x7e\x4f\x4a\xa3\x8d\x22\xb1\xc7\x99\xf0\x02\xad\x1d\x08\x94\xd4\x5a\x2a\x36\x60\xa2\xe3\x10\x21\xc5\x98\xcb\x44\x3b\x15\xc0\x50\x89\xec\x9a\x10\x39\x3e\x39\xfe\x08\x89\x4d\xb3\xcb\x02\x29\xf4\x03\xfa\x56\x28\xee\x88\x09\x9a\x83\x7a\x36\x0d\x7d\x56\x09\xa0\x55\x30\x57\xfe\xae\xfd\xef\xff\x25\xa8\xc6\x6e\xcb\x6b\x7a\x8d\x54\xeb\x7b\xa9\x77\xe0\x9c\x9e\xf8\x19\x4c\xed\x7c\xbe\x23\x43\xd2\xcd\x2c\x3f\xa4\xb5\x84\xc9\x62\x16\xbf\x6b\xd8\x80\x47\x1a\xa0\x0c\xde\x7e\x7a\x92\x8e\xe1\xfe\x61\x69\x3f\x31\xa1\x94\x89\x81\x6b\x64\x7c\x0c\x47\x87\xf1\xdd\xcb\x87\xed\xc9\xc3\x5f\x0f\x7f\x78\xda\x10\x65\x50\xb9\x06\x79\x1c\x11\x83\xc5\x68\xc7\xd0\x3e\x8c\xef\xa0\x71\x94\x87\xb3\x1f\x83\x77\xc6\x25\x11\x1b\x88\x63\x08\x50\x18\x54\x95\xe6\x58\x5f\x11\xbe\x6c\xa3\x27\x15\x45\x75\x0c\x42\x0a\x5c\xd6\x3e\xf1\xa7\x1e\xe7\xf2\xf0\xf6\xe6\xc3\xfb\x23\xd0\x21\xe3\x69\x0a\xae\x51\xc7\x52\x50\x1b\xc8\xbe\x54\x70\x71\xfe\x3b\xe8\x24\xb6\xc3\x0c\x64\x7f\x2a\x8c\x11\x72\x14\x46\x67\x39\x43\xca\x08\xd8\x72\x60\x98\x1b\x27\x16\xfa\xcb\xab\xeb\xcb\x8b\xcb\x37\xc7\x79\x50\x2a\x51\x8b\x3d\x03\x23\xa9\x6e\x81\xf5\x61\x2c\x13\xb0\xe3\x32\x1d\x63\x31\x19\x20\x0c\x19\x81\x3e\x8b\xf0\xd8\xf7\x17\xe0\xbe\xb2\x3e\x44\x06\x2e\xce\xe1\x8f\x6f\xb3\x9c\x2d\x14\x85\x9d\xda\xfa\xd8\xf7\xa5\xd6\x1e\x27\x77\x01\x15\x76\xd6\xf8\xa1\xe1\xd1\x91\x0e\xd9\xd0\x6f\x79\xbf\x79\xad\xf9\xfa\xa1\x60\x72\x75\x51\x1f\x56\x65\x3e\xf9\x0d\xaf\xed\x35\x67\xab\x32\xc8\x93\x5f\xbe\xa2\xa0\xac\xff\xcd\x3a\x94\x2f\xe7\x79\xf1\xd9\xfe\x93\x23\x8f\x50\x7a\x3e\x44\x61\xde\x33\x6d\x50\xa0\xda\x77\x22\x49\xa8\xf3\x2b\xf4\x13\x11\xd8\x89\xbc\x8f\x43\xf3\x7c\x29\xe7\x43\xa2\x40\x26\x26\x4e\x0c\x74\x80\xca\x20\xb1\xe9\xf1\x06\x68\xce\xb3\x4c\xfd\x35\xbe\xa0\xfb\x4e\x26\xe1\x3c\x7f\xb9\xa2\x3b\xd2\xab\xdf\xc5\x8a\x09\x0b\xf7\x60\x97\xa3\xd6\x64\x80\xcb\xb6\x67\xf2\x34\x6f\x3a\x50\x48\x0c\x4e\xad\xef\x3b\x94\x0d\x97\xcd\xda\x0f\xf5\x98\x10\xa8\x6c\x51\x41\x07\xa6\xf8\xab\x62\x19\x6f\x8f\xc4\x31\x0a\xfa\x3a\x64\x11\xdd\xa7\x4b\x68\x93\xc5\xa5\x96\xc1\x2d\x5a\xf2\x02\x47\xf0\x05\x7b\xdd\x74\xbd\xef\xdc\xdf\x7b\x5f\xb0\x97\xee\xaa\x44\x45\x93\xc9\x32\x2b\xdf\xbf\xba\x84\xab\x8f\xe7\x97\x05\x70\x9e\x14\x32\x46\x91\x0f\x49\x41\x2a\xe6\x48\x59\x04\xf7\x1d\x0b\x57\xe4\x7d\x26\x95\x09\x4d\x2d\xc4\x4a\x1a\x19\xc8\xe8\x79\x1d\x61\x85\x84\x8e\xbb\x86\x18\xac\x25\x9e\xa8\x12\xd8\xe9\xbe\x46\x61\x6b\x24\x46\xe1\xac\xca\x4d\x56\xbe\xf1\x7d\xb8\xba\x84\xf3\xeb\xeb\xab\xeb\xe2\x58\xa1\x52\x52\x2d\x04\xcb\x7e\x51\x14\x2e\x7b\xfc\xc8\x08\xbd\x54\x60\x2a\xb6\x1a\xae\xcc\x99\xa2\xdd\xc2\xe4\x7b\x52\x04\x91\xd4\x58\x23\x5d\xd3\x3c\x9d\xf4\x4e\x5f\x4b\x21\x30\x95\x85\x54\x99\x7a\x27\x7e\xef\x74\x39\x79\x93\xe5\x9a\xb1\x91\xf8\x70\xde\xed\xbe\x7a\x73\x5e\xcc\x64\x5a\xda\x35\xb8\xd8\x4e\x0a\x12\xa5\x50\x18\x6a\xcf\x8f\xac\x84\xcf\x88\xc1\xfd\x82\x98\xa4\x7d\x47\x0c\x1a\xc6\xad\xa8\x73\x7f\x7f\x03\xce\x7b\xa2\x0d\x74\xc7\x22\x70\x26\x93\x63\x70\xe0\x45\x1e\xd0\x0e\x85\x0c\x0d\x5e\x80\xe3\x3b\xf0\xa2\xb0\x26\xf6\x97\x54\x3e\x48\x61\xc2\x54\xa7\x51\xad\xb8\xa4\xf7\x77\x12\x45\xff\x20\x51\x99\x39\xf8\x13\x6a\xea\xbd\x95\x89\xd2\x99\xd2\x71\x4d\x95\x0f\x4c\x24\x06\x37\x54\xea\x62\x20\x05\xd5\x45\xb1\x2d\x1d\xa3\x0a\xfb\x0a\x75\x68\x63\xee\x3c\x5f\x98\x60\xb3\x54\xac\x82\x15\xb4\xcf\x8d\x04\x1d\xca\xec\xdc\xa3\xc4\x90\x22\x99\x69\x65\x4e\x6b\xab\x68\x88\xf8\xfe\xac\x7b\x22\x39\xb0\x45\xe5\x59\xac\xd5\x06\x2e\x2c\x9d\xef\x5a\xda\x71\xf6\xae\x7b\x75\xe9\xc5\xf6\x66\x68\x0e\xb0\xce\x92\x55\x5d\xb5\xe2\xfb\xd0\x4b\x58\x44\xd3\x48\xac\xee\x1e\x58\xa3\x24\x57\xd3\xf0\x06\xcd\x4d\x17\x0e\xa0\x71\x78\x78\x58\x52\xdf\xdc\x96\x9e\x86\x0e\x7c\xdd\x4b\xcb\xfb\x1d\x11\xce\x64\xb2\xf7\x2b\x64\xcb\xbf\xb1\x97\x5f\x7e\x20\x2a\xbf\x7c\x15\xab\xc5\xdd\x71\x7e\xf9\x2e\x11\x8b\xcb\x68\x41\x37\x19\xe4\x97\x5d\x8c\xf3\xcb\xab\xc0\xe4\x97\x97\x72\x98\x5f\x9e\xa1\xed\xbe\xbd\x6f\xc5\x2e\x8d\x91\xd8\xc9\x48\x16\x3b\xa4\xc2\x7d\x7b\x3a\xa6\x61\xf8\x4a\x72\xdd\x58\x82\x3e\x9d\x1b\x64\xde\xea\xc5\x72\xa1\x4c\x1e\x58\x4c\xfb\xad\x84\x02\x13\x33\xb9\x87\x26\x2b\x96\xd4\x18\xcc\x24\x2b\x3a\xcb\x4a\xf6\xa5\xe2\xc4\x18\xa4\x37\x8c\xe3\xe1\xb4\x77\xe0\x05\xec\xc1\x1e\xbc\x98\x3a\x3d\x5b\xa5\xe1\x9a\x2d\x52\xd6\x2f\x60\xef\x38\x95\x63\xe2\xe1\x6f\x8d\x41\x0d\x53\x8d\x99\x29\x17\x1a\x15\xe6\x36\x18\x07\x8b\xf0\x4b\x13\x61\x71\xb3\x06\xbf\xe6\x9c\x5f\x73\x07\xfc\x9a\x55\xfc\x9a\x35\xf8\xb5\xe6\xfc\x5a\x3b\xe0\xd7\xaa\xe2\xd7\xaa\xc1\xaf\x3d\xe7\xd7\xde\x01\xbf\x76\x15\xbf\x76\x0d\x7e\x47\x73\x7e\x47\x3b\xe0\x77\x54\xc5\xef\xe8\xe5\xb3\xfa\xb0\xf6\x1c\xd3\x86\xf0\xb8\x0a\xf1\x70\x95\xe7\x81\x5f\xdf\x46\xc0\xcc\x78\x09\xde\x9e\x2b\xde\x6b\x66\xc6\x97\xa4\xe8\x1c\x2d\x85\xca\x1e\xac\x15\x81\x9d\xa5\x3b\x17\x67\x1b\x85\x34\x8a\xe4\x08\x95\x2e\xc2\xbb\x4c\xf8\x55\xff\xef\x99\x44\x7a\x59\x93\x8e\xfc\xb9\xd2\x64\xe2\x14\x44\x9a\xf5\x61\x3f\x23\x44\x0c\xf1\x2e\xd9\x20\x2c\xbd\x77\x28\x25\x26\xac\xd6\x12\x29\xe7\x84\x41\x10\x11\xad\x3b\xff\x3a\x23\x06\x23\xe6\x72\x29\x85\x3b\x22\x82\x89\x81\x1b\x28\xd4\x01\x0a\xe3\xb6\xfe\xb5\xf7\xa4\xec\x34\x23\x9b\x9a\xb7\x44\x57\xaf\xf4\x01\x23\xbd\xfc\x4c\xe1\x89\x88\x51\x32\x76\x75\x22\xc4\x78\x81\xcb\x59\x7a\x28\x17\x30\x59\xcd\xd8\x43\x0c\xbb\x46\x2a\xee\x7d\xfa\x7c\x21\x28\xde\xc1\x49\x07\x9a\x1b\xc7\x32\x19\x16\x65\x77\x11\xd8\x5e\xe9\x36\x1a\x19\xcd\x48\x8e\x2c\xcd\x34\xe1\x2b\x9e\x05\x91\x4c\xe8\xcc\xad\xb2\xa0\x6e\xe0\x4e\x7b\xe7\xee\x70\xa4\x2c\xe1\xe5\x1e\xd9\x5c\xd5\xf2\x6a\xd7\x44\x43\x36\x08\xab\x69\xe6\x4b\xaa\xb0\x8c\xd6\x05\xfe\x0b\x13\xf4\x8c\xa9\xe9\x9d\x5f\xa7\x03\xce\xa5\xb3\x71\x02\x46\x4c\x50\xca\xd4\x72\x13\x4c\xaf\x0e\x95\xb1\x4e\xc0\xaa\x03\x56\x0d\x8c\x1c\x11\x45\xb5\x7b\xe8\x52\x1c\x6c\x59\x45\x05\xce\x9c\xef\xc8\x9b\x74\x75\xae\xed\x20\x59\xe3\x58\xfb\x68\x27\x9e\x3d\xb1\x63\xb5\x5c\xf9\x63\x37\x49\xea\x3e\xb1\x2f\x5d\x99\xac\x24\xa9\xda\xb1\x46\x6b\x37\x49\xea\xee\xc8\xb1\x35\xde\xfc\xbe\xa3\x3c\x7d\xd9\x65\x9e\xbe\x60\x9d\x12\x6c\x36\x77\x93\xa9\x27\x76\xad\xa6\x33\xbf\xed\x68\xea\x3d\xb1\x37\x8b\x53\xaf\x9e\x6f\xad\xc6\x9a\x44\xad\x3f\x9b\xba\x89\x36\x84\x09\xa4\xd6\xc3\x6e\x8c\x48\xed\xf5\x41\x63\x63\xd7\x74\xa2\x8d\xe5\x56\x7e\xf8\x16\x58\xb2\x47\x2e\x8f\xfd\xb0\xe4\xf0\xb5\x78\x6e\x0f\x49\xd2\x97\xca\xb8\x87\xa5\x6e\xae\x8d\xf9\x20\xd1\xcb\x57\x8f\x4b\xb9\x7d\x93\x68\xf3\x48\x3a\xc5\x4f\xde\xab\xf8\x58\x3a\xbc\xf0\xe2\x7f\x91\x10\xcf\x2e\xff\xb9\xaf\x7f\x04\xa3\x5b\x1e\xae\xa7\x74\xcb\xc3\x94\xca\x2d\xdf\x71\x98\x66\xf5\x54\x15\xa7\xd5\x8a\xfa\x41\x11\x9b\x91\xab\x0c\xd9\x2a\xbb\xa7\x0c\x5e\xbd\xb1\x55\xdc\xdd\xad\x9f\xb0\xbb\x1b\x8f\x2f\xde\x9d\xb4\xf7\x16\x7c\x76\xd4\xde\x5b\x32\xda\x4d\x7b\x3f\x96\xd4\x0f\x69\xef\x6d\xc9\xed\xba\xbd\x2b\xf8\x6d\xd3\xde\xbf\xfd\x84\xed\xdd\xfc\xb9\x0e\xef\xe6\x4f\xd7\xdd\x5b\x32\xda\x4d\x77\x3f\x96\xd4\x0f\xe9\xee\x6d\xc9\xed\xba\xbb\x2b\xf8\xd9\xeb\xf2\x75\xbd\x7d\x4d\x58\x7a\xa3\x71\xb8\x71\x37\x2b\xc2\x44\xc9\x2d\x46\xe1\x2d\x45\x8d\x67\x5c\x8f\x7a\x12\x57\xca\xe3\x1f\xd4\x85\x44\x12\xde\x53\x18\x45\xe4\xae\xea\x86\xa6\x46\xd8\xce\x08\x8b\xc6\x8f\x8f\x1d\xb5\xea\xcb\xc4\xdd\xa7\x8c\x4a\x91\x85\x42\x1f\x6c\x99\x31\xb1\x55\x1c\x38\xdf\x32\x12\x9c\xef\x3e\x16\x2b\x36\x4a\x3c\x49\xe7\x03\x87\x93\x9e\x3a\xb5\x3d\x58\x21\x15\xf9\xbc\xf9\xd8\xb8\x5d\xa7\x6f\xb8\x1f\x1b\x34\x45\xcc\xf2\x8b\xa2\xa7\x8d\x58\x81\x81\x22\x07\xb6\xab\x1d\x0b\xb1\x4d\xe9\xa8\x54\x7f\xe7\x71\x58\x57\x38\x53\x37\xaa\xeb\x26\x27\x54\x5a\x36\x1b\xbc\xd9\x44\x1e\xf7\x0b\xdf\x14\x12\x43\xbc\x1b\xe4\x31\x2a\x62\x12\x85\xc5\x87\x48\x9f\x84\x0a\x45\x88\xcc\x94\x9f\x1f\x95\xb6\x83\x3a\xb6\x5f\x97\xbc\x67\xc2\x48\xb3\x44\xcf\x2d\xd7\x37\x1d\x26\x9c\xd1\x92\x17\xae\xa9\xf5\xb7\x53\x81\x62\xcb\x33\xf5\xc7\x98\x8e\x15\x6a\x9d\x28\x64\x22\x1c\x94\x9a\xff\x38\x15\x9a\xf6\xc5\xdb\xc1\x26\x71\x9d\x59\x08\x63\xb2\xd6\x40\x18\x93\xd4\x46\xf8\x91\x6c\xe4\xc5\x50\x46\x86\x0c\x8a\xdf\x31\x5b\xfc\xcf\xd9\x7e\x56\xcb\x9f\x37\x82\xee\x45\x52\x72\xc6\x07\x87\xce\x73\x4f\xab\x60\x01\xf6\x82\x93\x01\x7e\xba\x7e\x5f\x80\xe7\x1f\xac\x87\x6c\x2c\x42\x7e\x54\x38\x64\x38\x4a\x41\xdf\x33\x6d\xbe\x1e\x16\xfc\x8a\x68\x3d\x6a\x73\x0d\x6a\xe3\x51\xa8\xad\x35\xa8\xcd\x47\xa1\xb6\xd7\xa0\xb6\x1e\x85\x7a\xb4\x06\xb5\xfd\xed\xe5\x81\xbf\x69\x09\x0c\x19\x5d\x2a\x81\xcf\x8c\xa2\x2c\x4d\x54\x79\xad\x66\x40\x91\x24\x74\xa3\xdf\x36\xce\x58\x34\xca\x58\x14\x25\xb6\x8a\x45\x63\x1b\x16\xcd\x32\x16\x45\x85\x50\xc5\xa2\xb9\x0d\x8b\x56\x19\x8b\xa2\xc2\xa9\x62\xd1\xda\x86\x45\xbb\x8c\x45\x7b\x43\x16\xed\x12\x16\xf3\x9f\x78\x4f\xa6\x3b\xf3\x7f\x61\xb8\xbf\x07\x14\x14\x26\x93\x67\xff\x0f\x00\x00\xff\xff\xbf\xd6\xa5\xd8\x53\x37\x00\x00")

func tmplBloomsky_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomsky_headerHtml,
		"tmpl/bloomsky_header.html",
	)
}

func tmplBloomsky_headerHtml() (*asset, error) {
	bytes, err := tmplBloomsky_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky_header.html", size: 14163, mode: os.FileMode(420), modTime: time.Unix(1498565002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langEnUsAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x82\xf0\x1c\xe4\x00\x59\xb3\xb4\x5b\x87\x2e\x9d\x04\xa2\x62\x2d\x01\xfa\x09\x28\xba\x85\x60\xe8\xee\x85\x1c\xa7\x71\x2b\xa3\x31\xb2\x19\xf6\xf7\x3e\x92\x7e\xe3\x0e\xa0\x3b\x59\xc9\xdd\x11\xea\x33\x40\x17\xc5\x10\x77\xc7\xf9\xf5\x0e\xa0\xec\xa1\x52\x5a\x69\xcc\x69\xc1\x05\xaa\xd4\x38\x1e\x4e\x71\x08\x52\x0a\x68\xcc\xdd\xfe\x8f\xe4\xf7\xe7\x74\xf1\x55\x9d\xcf\xca\x90\xed\x8d\x28\x1b\x94\x27\x21\x6e\xdd\xcf\x80\x1e\x16\x86\x09\x03\x41\xe7\x0e\xcd\xa0\x55\x36\xcd\xf0\xcf\xd4\x33\x71\x8a\x41\xf5\x4c\x24\x36\xf4\x2b\x57\x3f\x91\x73\xb1\x8a\x5e\x26\xb4\x94\x26\x3c\x04\x26\xd4\x8a\x3c\x5a\xa7\xde\xeb\xb8\xb5\x9f\x72\x8d\x83\xc1\xb4\xdc\xeb\x92\x86\x29\xdd\x5e\xb1\x31\x98\xda\x93\xda\xad\x94\x58\x4f\x1f\x8c\x9e\x1e\xdd\x0f\x6c\x00\x31\x04\x67\x4c\x52\x99\xd7\xab\xb0\x94\xc7\x57\xff\x57\x7a\xbb\x8a\x63\xcf\xe8\xef\x37\xf5\x15\xd9\xe9\x5b\x2e\xc7\x81\xb7\x34\xf4\x16\x07\x30\xf8\x49\xdb\xab\xb9\x97\x98\x3b\xd9\x95\xef\x00\x00\x00\xff\xff\xa2\x16\x10\xd2\x54\x03\x00\x00")

func langEnUsAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langEnUsAllJson,
		"lang/en-us.all.json",
	)
}

func langEnUsAllJson() (*asset, error) {
	bytes, err := langEnUsAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/en-us.all.json", size: 852, mode: os.FileMode(420), modTime: time.Unix(1498565002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langFrAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\xcd\x72\xdb\x36\x10\xc7\xef\x7e\x8a\x1d\x5d\x72\xc9\xf8\x01\x7a\x4b\xac\x3a\xb6\xa7\x91\x3c\x96\xeb\x4c\x4e\x1c\x98\x5c\x89\xdb\xe2\x83\x05\xb0\x74\x38\x1a\xbe\x4f\xf5\x1c\x7a\xb1\x0e\x68\x9b\x84\xa4\x6d\xe2\xe4\x26\x71\x7f\xff\xc5\x7e\x61\xc9\xed\x19\xc0\xec\x43\xe3\x67\xbf\x41\xfa\x09\x30\x73\xb1\xc6\xf4\x77\xf6\xa1\xf5\xa4\x67\x67\x00\xfd\xfb\x01\xe2\x8d\x04\x39\x8e\x13\xf3\x51\x3b\x67\xc2\xdf\x1d\x94\x9a\xd0\x46\x20\x0b\x9f\x9c\xa0\xba\x78\x36\x8f\x38\x0e\xdc\xe8\xe6\x82\x62\x27\xa8\x1e\x48\x6b\x9c\xa8\xb9\x92\xa0\x1b\xc7\x3e\x63\xb0\x14\x98\xf9\x7e\x57\xa2\x79\xf4\xb9\x33\x6c\xa9\x44\xb8\xae\x24\x9c\x42\xe3\x02\x45\x5a\xc3\xf5\x7c\x92\xfc\x1e\xa2\x00\xa7\xa7\x23\x72\x89\x8f\x02\x72\xb9\xdf\xb5\x9e\x30\x0b\xf3\xca\x19\x94\x8a\x5b\x96\x8c\x79\x0f\xae\xd8\x50\x25\x17\xe7\xc5\xb4\xdf\x4d\xf4\xb5\xad\xf0\x1b\xfc\xf9\x20\xd0\xa3\x69\x84\x6f\x94\x95\xaa\xa9\x6c\x7b\x10\xe9\x0d\x6b\x09\xe3\xd4\x9a\x98\x63\xa2\x37\x26\x3b\x31\x7f\xa8\x10\x61\xd5\x59\xb1\x43\xe8\x2d\xed\xff\xf5\x08\xa1\xb3\x65\xed\x9d\xa5\xa0\x22\xb9\x4c\xfe\x59\x49\x43\xfb\x59\xf9\x90\x33\x52\xa9\x8c\xa2\x09\x59\xd0\xa6\x96\xfa\xb8\x60\xca\xf2\x59\x48\x53\xbc\xc8\xc3\x59\x38\x1f\x6b\x11\xf2\x55\x4e\xb5\x22\xd3\x1e\x8d\xe3\x82\xcd\x23\x7a\x58\xae\xe1\xd2\x69\xed\x9e\xd0\x07\x51\x97\x54\x50\x21\xac\x47\x6a\x74\xb1\x2c\xa5\xb4\x96\x65\x74\x07\x27\xdd\x7a\x0c\x81\xbd\x34\x7e\x83\x89\x9c\x05\x15\x8d\x0b\x4d\xbd\xdf\x79\xfa\x87\x33\xed\x9d\x22\xa9\xcd\xb7\x9a\xe9\x88\x82\xb9\x22\x2d\xf5\x62\x60\x41\x95\x25\x1b\xd6\xfb\x1d\x54\xef\x14\xff\xe5\xd8\x57\xef\x6a\xa6\x23\x1f\x77\x2a\x4a\x61\xde\x2b\xfe\x96\x6a\xd0\x08\xc7\x26\x09\x0c\x83\x56\xa7\xbd\xf0\x7f\xe7\x97\x18\x63\xaa\xe3\xeb\xd0\xd5\xc8\x79\x8d\x56\xd8\x08\xd2\x15\x36\xf1\xa8\x6d\x2b\xc7\xe2\x10\xac\x38\x9b\x81\x15\x87\xa8\xc8\x62\x05\x5f\xc8\x4a\xfb\xe6\x81\x22\x86\x80\x50\x31\xb4\x69\x4d\x06\xc7\x11\x2d\x4f\x1e\xee\xd1\x34\xe8\x55\x94\xdb\x96\xac\xfb\xdd\x8b\x79\xd2\x90\xc1\x10\x95\x91\x32\x99\x6c\x23\xfe\x65\x4e\x1e\xcb\xe1\xc6\x9d\xf2\x29\x6e\x98\x80\x49\x84\xe2\x4a\x5c\x32\xe6\x4b\xf1\x48\x2d\xed\xdb\x17\xdb\x6b\x05\x8e\xb4\x9f\x58\x3c\xe6\x4e\xad\x95\x1e\x6e\xc3\xa1\xe6\x2b\x4a\x77\x67\x99\x8f\x57\x55\x54\xaa\xcb\x29\x9b\x0a\x3b\xdb\x6e\xcf\x2f\x1c\xdb\xd8\xf7\x50\xa9\x6e\xf6\xfe\xc8\xc5\xa1\x39\xbb\x7a\x35\x6d\xa4\x29\xb8\x52\xf9\xbb\x52\xbb\x27\x81\xf9\xa8\x32\x3f\x06\x2b\x62\x23\x6d\x39\xd7\x61\x56\x77\xd3\x15\x35\xa6\x3d\x56\x90\x2d\x0c\xc6\xc3\x6d\xf1\x9c\xcb\x35\x28\x03\x59\xc4\xcf\x18\x44\xa5\xf5\xf9\x49\x66\xdf\x85\xc7\x63\x1b\xf4\xc1\xd9\x62\xe3\x11\x23\x59\xe9\xeb\xe0\x0a\xb5\x76\xc9\xd1\xed\x80\xf6\xfd\x89\x98\xad\x47\x55\x15\x68\x14\xe9\xa2\x4c\xc7\x49\x5d\x78\x95\x43\xad\x42\x1e\xd7\xb3\x1a\x06\x75\x38\x4d\xe3\xed\xca\x1f\x87\x55\x44\x32\xb8\xf6\xea\xe0\x45\xfd\x73\x01\xa6\xcf\xa1\x58\x23\x34\x69\x1f\x6d\xb7\xe7\xf7\xaf\x1e\xfb\xfe\xd7\x63\xff\xae\xd3\x29\x2d\xef\x36\x5e\x99\x1f\xf7\xea\xc9\x79\x9d\xed\xaa\xce\xb1\x7f\x4b\x8f\xbe\x3a\x86\x5a\xb5\xf8\x13\xcd\x79\x83\x24\x85\x71\xd6\xff\x17\x00\x00\xff\xff\x12\x5d\x85\xe5\xa3\x0a\x00\x00")

func langFrAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langFrAllJson,
		"lang/fr.all.json",
	)
}

func langFrAllJson() (*asset, error) {
	bytes, err := langFrAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/fr.all.json", size: 2723, mode: os.FileMode(420), modTime: time.Unix(1498565002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testMockConfigfortestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x3c\x9c\x43\xfb\x41\xd2\x34\x50\x4a\xf1\xe1\x83\x2e\xdd\xc3\x42\x59\x42\x37\xfd\x01\x63\x69\x1c\x8b\xc8\x1a\x23\x8d\xd3\xfa\xdf\x2f\x4a\xea\x34\x25\xbd\xac\x4e\xd2\x3c\xbd\x37\x33\x6f\x66\xb1\x58\x14\x33\x78\x0a\xdb\x81\xb6\x8c\x6b\x0e\x8b\x21\xcd\xd1\xc4\xff\x0a\x7c\x86\x2b\x1c\xe2\xc5\xec\xe3\x60\x4d\x91\xba\x84\x46\x22\x6a\x2f\xd2\xa5\xdd\x58\xcc\xf0\x5b\x62\x47\xde\x8f\xb0\x12\xae\x14\xa6\xa5\xb0\xe5\x02\xa7\x2f\xaf\x2f\xcf\x15\xca\x56\xb5\x4f\xd5\x72\x49\xbd\xbb\x99\x90\x1b\x23\x5d\x0e\x2c\xd3\x6e\xb4\xa4\xb4\x2c\x8b\x19\xb4\x65\xec\x78\x9c\xc3\xe9\x55\x42\x13\x39\x17\x32\xb1\x2d\xa5\xb6\x16\x8a\xf6\xab\xc6\x59\xb6\x47\x63\x38\xa5\x8d\xec\x38\x54\x28\x47\x19\xa2\xe6\x7b\xf9\xd9\xc5\x0b\x37\x91\x53\x0b\x75\x1d\xcf\x51\x33\x82\x28\x54\x90\x72\x17\xa8\xd9\xd0\x90\x18\xa3\x0c\xa0\xc8\x59\xd7\xec\xd8\xa2\x1e\x21\x3d\x87\x37\x26\x6d\x39\x82\x82\x3d\xa5\xc4\xb5\x0b\x48\x6c\x24\xd8\xec\x5f\x3c\xea\x6f\x5c\xc7\xb1\x42\x79\x7f\x7b\x96\xfb\x57\x03\x8d\x03\xc3\xba\xd4\x7b\x1a\xe1\x42\x93\xdd\x53\x27\x21\x41\x02\x8c\x84\x24\x3e\xbb\xf7\x71\x7b\x34\xea\xf6\xa4\x6c\x2b\x94\x99\xf9\x0f\x5a\x6f\x5c\xf7\x74\x98\x44\xbb\xd9\xac\x2f\x85\x8e\xf1\xb5\x44\x45\x85\xb2\x5a\xad\x56\xab\xf2\x62\xd6\x2e\x34\x7e\x78\x7f\xfa\x81\xc0\xd9\x57\x8a\x23\xdc\x31\x6f\x81\x13\xf8\x9d\xf6\x84\xfd\xe1\xb8\x3f\xf8\xe0\xc5\x90\x6f\x25\xe9\x25\x9a\x6b\xa8\x50\x3e\xdc\x3e\xdc\x9f\x83\xaf\x89\x63\xa0\x8e\x2b\x94\x51\xe4\x0b\x6f\x4d\x29\xbd\x49\xb4\xdf\x40\x4f\xa4\x54\x53\xca\xac\x69\x40\x67\x6d\xfd\x7c\xef\x39\x6a\x31\xc3\xea\xe0\x17\xb0\xf8\x1f\x77\xd0\x48\x26\x37\xe4\x65\xfb\xcc\x7b\xf6\x15\xee\xf2\x26\x0a\xf2\x26\xe4\x85\x34\x62\x19\x2e\x40\x9a\xc6\xbb\xc0\xe8\xf2\xbb\x1f\x14\x9d\x98\x5d\x35\xf9\x71\x7c\x34\xe4\x13\x17\xb3\x23\x97\xbb\xde\x93\xf2\x1c\x49\x49\x9d\x41\xe3\xfc\x41\xa8\x11\x6f\x39\x1e\x56\xcf\x05\xd4\x43\xb0\x9e\x6d\x01\x58\xde\x9f\x14\xa6\x53\xfc\x0d\x00\x00\xff\xff\x60\xb0\x85\x3d\xaf\x03\x00\x00")

func testMockConfigfortestYamlBytes() ([]byte, error) {
	return bindataRead(
		_testMockConfigfortestYaml,
		"test-mock/configForTest.yaml",
	)
}

func testMockConfigfortestYaml() (*asset, error) {
	bytes, err := testMockConfigfortestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-mock/configForTest.yaml", size: 943, mode: os.FileMode(420), modTime: time.Unix(1498565002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testMockMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xdf\x52\xe2\x4a\x10\xc6\xef\x7d\x8a\xa9\xb9\x0e\x21\x09\x09\x18\xaa\xce\x05\x82\x9e\xa3\x52\x68\x01\x6a\x9d\x58\x16\x35\x92\x16\x66\x99\x99\x84\xf9\x23\xcb\x5a\xbe\xcf\xee\x73\xf8\x62\x5b\x13\x88\x22\xee\xd5\x56\xb8\xcc\xd7\xdd\xbf\x4c\x77\xd7\x7c\x73\xff\x72\x84\x10\x42\xf8\x66\xdc\xc5\x6d\x14\x38\x9b\xaf\x2e\xd5\xeb\x01\xe1\x80\xdb\x08\x8f\xe7\x86\x0a\xbc\x0d\x8c\x74\x26\x39\x6e\xa3\x4d\xd5\xa6\xf2\xf6\x5c\xa4\xf0\xdd\xa6\xfa\xdb\xb4\x42\xbf\xa3\x22\xed\x51\x09\x53\x4d\x33\x61\xa3\xa7\xbb\xd1\x21\xa1\xa2\x47\x28\x5b\xe3\x36\xf2\xf6\xaa\xfe\x35\x4a\xef\xc9\x23\xa3\x34\xa1\x02\x52\x1b\x1f\xe5\x00\xe9\x5e\x82\xe5\x0d\x89\x86\x3d\x39\x08\xe7\x36\x62\xd5\x42\x7c\x2d\xfb\x00\x22\xa7\x73\xf2\xc8\x6c\x81\x96\x06\xb6\x7a\x0f\x9e\xe9\x14\xca\xd6\xd5\x62\xfd\xa9\xfb\x21\xcc\xa8\xd2\x20\xc7\xb4\x88\xfb\xe1\x71\x33\xf6\xa2\x20\x8e\xca\xea\xd1\xd8\xca\xdb\xaf\x93\xcc\x88\x14\xd2\xeb\x8c\x0a\xdb\x0e\x2e\x29\xfd\xab\x01\x6e\xa3\xd0\x6d\xf8\x5e\x99\x5a\xe6\xbc\x94\xe7\xbb\xa5\x29\x64\x7d\x5a\xcc\xe1\x1e\xcf\xb5\xce\xdb\xf5\xba\x6a\xb8\x84\x93\x1f\x99\x20\x2b\xe5\x4e\x33\x5e\x7f\x54\x8b\xb5\xa6\x1c\x18\xc9\x15\xa8\xfa\x13\x39\xa1\x26\xb9\x53\x22\x27\xd9\x32\x59\xca\x49\x30\x09\x3c\xbf\x55\xf3\xa2\x5a\xd0\x72\x79\x1e\xee\x2e\xa0\x02\xe6\xf1\x01\x98\x71\xf5\xcc\x86\x77\x00\xa6\x5f\x30\x0b\xe4\xc3\xfe\xce\x26\xdd\xca\xb6\x36\xe9\x1e\x62\x6f\x07\xa1\xc6\x87\xa0\x36\xbc\x92\x5a\xcd\xd6\xb6\xb4\x4f\x7b\xdb\xdc\xf9\xf3\x9e\xbd\xa3\x61\x18\x74\xbd\x28\x8e\xc2\x4e\x14\x97\xf7\x75\x60\xf8\xd5\xd3\x59\xc6\x58\xb6\x02\xa9\x76\x5c\xb2\xdf\xb1\xd7\x3d\xf2\xdc\x46\x23\x0e\xb7\x5a\xa7\x5f\x58\xc0\x87\x25\x10\x4d\xec\xc5\x46\xb8\x6f\x38\x15\x44\x4c\xad\x73\xc4\x71\x1c\x3b\x08\x8f\x81\xe7\x20\x89\x36\xd2\x8a\x2d\xcf\x6d\x59\xf5\x9c\x93\x19\xdc\x0c\xfb\xf6\x3c\xef\x3d\xd7\x8c\xaa\xad\x40\xe9\x9a\xff\x87\xee\x29\x9f\x7d\xed\x7b\x79\xe1\x2f\x64\x64\x96\x3c\x21\x9c\x5f\xac\xfe\x71\xbf\xe5\x33\x3b\xc6\xf1\xa8\xb0\xae\xb8\xd9\x08\xa3\xc0\x6b\x39\x1b\xef\xc4\x6d\xf4\x44\x98\x02\x07\xe1\xff\x0c\xa7\x29\xd5\xd6\x99\x9b\xa1\x83\xf0\xb5\x04\xa5\x36\x47\x0c\x62\x37\xf4\x9d\x72\x64\xe3\x75\x5e\xd8\xe4\xe8\xf2\xff\xc0\x92\x6f\x33\xa6\xc9\xac\xc8\x6b\xfa\x36\x6d\x40\x67\x73\xbd\x43\xfe\x78\x2a\xb6\x03\x28\x5a\xdd\x3b\xd0\xbb\x47\x9f\x19\xc6\x3a\x69\x6a\xff\x6e\xff\xd2\x93\x6f\x3f\x9f\x01\xa5\xa0\x50\x87\x31\xfa\xf6\x4b\x39\xa8\x70\x67\x07\xdd\x11\xc6\x32\x41\xc1\x41\x27\xa7\x1f\x2f\x95\x04\xd0\xa5\x93\x7f\x2d\x2e\xf3\xae\x25\x3c\x53\x58\x15\x27\xf9\x6a\xb8\x7f\x3b\xf6\xe5\x8a\x25\x57\x5c\x44\xd3\xf7\xb1\x57\x80\x14\x09\x5f\xf2\x64\x55\x1d\xd2\x08\x71\x41\x16\x3c\x99\x55\x88\xcc\x78\x74\xb9\xe0\x91\x57\x21\x32\xe7\x09\x5d\x8a\x5c\x6d\x90\x0f\x47\xaf\x0f\xbf\x03\x00\x00\xff\xff\xf8\x8c\x30\x81\xb6\x08\x00\x00")

func testMockMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_testMockMockJson,
		"test-mock/mock.json",
	)
}

func testMockMockJson() (*asset, error) {
	bytes, err := testMockMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-mock/mock.json", size: 2230, mode: os.FileMode(420), modTime: time.Unix(1498565002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/bloomsky.html": tmplBloomskyHtml,
	"tmpl/bloomsky.txt": tmplBloomskyTxt,
	"tmpl/bloomsky_body.html": tmplBloomsky_bodyHtml,
	"tmpl/bloomsky_header.html": tmplBloomsky_headerHtml,
	"lang/en-us.all.json": langEnUsAllJson,
	"lang/fr.all.json": langFrAllJson,
	"test-mock/configForTest.yaml": testMockConfigfortestYaml,
	"test-mock/mock.json": testMockMockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lang": &bintree{nil, map[string]*bintree{
		"en-us.all.json": &bintree{langEnUsAllJson, map[string]*bintree{}},
		"fr.all.json": &bintree{langFrAllJson, map[string]*bintree{}},
	}},
	"test-mock": &bintree{nil, map[string]*bintree{
		"configForTest.yaml": &bintree{testMockConfigfortestYaml, map[string]*bintree{}},
		"mock.json": &bintree{testMockMockJson, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"bloomsky.html": &bintree{tmplBloomskyHtml, map[string]*bintree{}},
		"bloomsky.txt": &bintree{tmplBloomskyTxt, map[string]*bintree{}},
		"bloomsky_body.html": &bintree{tmplBloomsky_bodyHtml, map[string]*bintree{}},
		"bloomsky_header.html": &bintree{tmplBloomsky_headerHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

