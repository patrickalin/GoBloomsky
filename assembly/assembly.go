// Code generated by go-bindata.
// sources:
// tmpl/bloomsky.html
// tmpl/bloomsky.txt
// tmpl/bloomsky_body.html
// tmpl/bloomsky_header.html
// tmpl/log_body.html
// tmpl/log_header.html
// lang/en-us.all.json
// lang/fr.all.json
// test-mock/configForTest.yaml
// test-mock/mock.json
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplBloomskyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\xc1\x0d\xc2\x30\x10\x44\xd1\xfb\x56\x31\x72\x01\xd0\x80\x95\x5e\x12\x3c\x28\x08\xdb\x8b\x60\x2f\xd1\x6a\x7b\x47\xc6\x1c\x73\x1d\xbd\xd1\x77\x47\xe1\xfd\xd1\x89\xb4\x55\xd5\xf6\x79\x1e\x09\x11\x92\x77\x6b\x75\x11\xc9\x3b\xd7\xb2\x08\x00\xb8\xc3\xd8\x5e\x75\x35\x22\x8d\x99\xef\x74\x19\xf4\x3a\x8d\xe4\x4d\xcb\x71\x62\x6f\xda\x8d\xdd\xfe\x78\xa2\xf1\xfa\x15\xdc\xc1\x5e\x10\xf1\x0d\x00\x00\xff\xff\x76\x78\x3f\x4b\x8a\x00\x00\x00")

func tmplBloomskyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyHtml,
		"tmpl/bloomsky.html",
	)
}

func tmplBloomskyHtml() (*asset, error) {
	bytes, err := tmplBloomskyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky.html", size: 138, mode: os.FileMode(420), modTime: time.Unix(1498743877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomskyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x4b\x8e\xa3\x30\x14\x45\xe7\x59\xc5\x53\xa4\x1e\x76\x2f\xa0\x87\x0d\x22\x20\x75\x3e\xca\xaf\xc7\x4e\x78\x09\x56\x63\x40\xd8\x54\x55\x84\xde\x9e\x6a\x0d\xb5\xb2\x92\x31\x9f\x10\x3b\x89\xaa\x98\xde\x73\xee\x7d\x10\x29\x3f\x5d\xcf\xe4\x4f\x9a\xe7\x42\xfe\xbf\x40\x5d\xff\x9a\xa1\xfa\xcb\xa4\xf2\x58\x9a\x12\x4d\xdc\x7c\x5d\x6f\x61\xba\xe5\x02\xa5\x62\xa2\x80\x43\xab\x4f\x89\xe0\x37\xb8\x1e\xd3\xab\x8d\x8d\x36\x88\x4c\x85\xc7\xd5\x03\x69\x10\x35\xd7\x39\x3e\xbe\xf0\x23\x42\x14\xbb\x45\x23\x18\x28\xf2\x3b\x69\x51\x89\x03\x96\xb0\x3c\x41\x90\xa7\x69\xfe\x8a\xa5\xbc\xd5\x8d\xb8\xa8\xc4\xf2\xd4\x33\x9d\x1e\x65\x31\xbe\xc1\x6e\xff\xe0\x56\xa3\x37\xe0\x6e\xdf\xcf\xf2\x73\xa2\x1e\xbf\xa0\x16\x23\xd9\x80\x9d\xf5\x8f\x67\x31\xf8\xbc\xc4\xa3\xe2\x79\x66\xeb\x66\x4a\x53\x3d\x34\x52\x67\x95\x74\x8f\x0e\xa2\x46\xe6\x45\x42\x04\xf3\x22\x31\xea\xa6\x92\x8a\xf1\x0c\x63\xd0\xc0\xb5\x6f\xb4\x3e\xd7\xf1\xa6\x40\x8c\x6f\x0a\xbe\xb4\x2d\xb5\x29\xbf\xbd\x7c\xad\xaf\x19\x77\x7c\x24\xfb\x1b\x6b\x8e\x08\x06\x09\x7c\xc6\xd3\x8b\xbd\xa7\xb3\x26\x8a\x34\xcf\xb3\xbb\x33\x03\x6e\x91\xb0\x66\x0a\xc7\xf8\x40\xeb\xcc\x36\xac\x6b\x6e\xcf\x99\x0b\x22\x10\xe2\xc9\x5b\x0f\x92\xc5\x3b\x8e\xb2\x0f\x1b\x59\x5b\x14\x05\x96\x4c\x55\x65\xe3\x05\xd3\x7b\x7b\x57\x60\xc0\x92\x12\xb3\x04\xb9\x22\x82\x8f\xf7\xc0\xd9\xe4\xb9\x7e\x2e\xab\xca\xc3\x54\xf2\x4a\x36\x3d\x9e\xe9\x09\x2b\xc1\xe3\x27\x7f\x1b\xa6\xa7\x23\x89\xe0\x87\x71\x57\x25\x4a\xd9\x1e\x10\x65\xe1\xb9\x2d\x30\x78\x17\xea\xa0\xcd\x6d\x2b\x5c\xb1\x6e\x75\x6c\x85\x2b\x66\xe2\xc9\x67\x00\x00\x00\xff\xff\x01\x56\xa6\x84\x62\x05\x00\x00")

func tmplBloomskyTxtBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyTxt,
		"tmpl/bloomsky.txt",
	)
}

func tmplBloomskyTxt() (*asset, error) {
	bytes, err := tmplBloomskyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky.txt", size: 1378, mode: os.FileMode(420), modTime: time.Unix(1498741853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomsky_bodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x99\x4d\x73\xdb\x36\x13\x80\xef\xfe\x15\x78\x91\x79\x7b\xa3\x68\x5b\x4e\x0f\x2d\xa5\x43\xea\x69\x92\x4e\xa6\xcd\x24\x6e\x3a\x3d\x75\x96\xc4\x8a\x44\x8c\xaf\x00\x20\x15\xd5\xa3\xff\xde\x21\x28\x52\x12\x2d\x2b\x95\x4d\x3b\x76\x7a\xb0\x45\x82\x8b\xfd\x78\x76\x09\x92\x8b\xab\x2b\x86\x33\xae\x90\xd0\x4c\x2b\x8f\xca\xd3\xe5\xf2\xe8\x28\x51\x50\x91\x4c\x80\x73\x13\xaa\xa0\x4a\xc1\x92\xe6\x27\xe2\xaa\x42\xeb\xb0\x3d\x9d\xf1\xcf\xc8\x22\xaf\x0d\x9d\x1e\x11\x42\x48\xc2\x78\x37\xb1\x56\x08\x5c\xa1\x5d\x5d\xeb\x5f\x5f\xa9\x28\x10\xd8\x96\x4c\x90\x4b\x4b\xef\xb5\x22\x7e\x61\x70\x42\x9b\x13\xda\x9b\xe8\x75\x9e\x0b\x24\x99\x16\x02\x8c\x43\x46\x09\x03\x0f\xab\xe1\xda\x7c\x33\xde\x0e\x83\xcd\xd1\x4f\xe8\xb3\x66\x36\x25\x60\x39\x44\xf8\xd9\x80\x62\xc8\x26\x74\x06\xa2\x96\x0d\xa3\xb5\xe7\x56\x8b\xce\x54\xdf\x39\x67\x40\xb5\xce\x38\x1b\x69\x25\x16\x74\x7a\xd1\xb8\xa3\xa0\xe2\x39\x78\xae\x55\x12\xd7\x72\x7b\xa6\xf2\x4c\xab\x28\xa8\x7f\x28\xd1\x24\x6e\x50\xf6\xa6\x43\x8f\x6c\x6a\x41\x31\x4a\x0a\x8b\xb3\x09\x7d\x46\xa7\x2f\x84\xd6\xd2\x5d\x2e\x92\x18\x36\x52\x19\x33\x5e\xf5\x32\xcb\x59\x87\x6c\x5d\x05\x4d\x1a\xda\x8a\xe9\xd2\xd2\xf3\xa1\x14\x1b\x4e\xb4\xc2\x0a\xaa\x9e\x5c\x90\x15\xbc\x95\x85\xcc\xf3\x0a\xe9\x34\x81\x95\xb7\x31\x9d\x5e\x5d\x5d\x10\xfa\x4a\x4b\xa4\xcb\x65\xed\x71\x12\x0b\xbe\x53\xc9\xc6\x2c\xa1\x73\x3a\x7d\xa3\xf3\x7f\x29\x5f\x78\x6f\xdc\x0f\x71\x9c\x73\x5f\x94\xe9\x28\xd3\x32\x36\xe0\x2d\xcf\x2e\x41\x70\x15\xa7\x2b\x5e\x51\x26\x38\x2a\x1f\xe5\x9a\x92\xb6\xfe\xfe\x4a\x05\xa8\x4b\x3a\x7d\x19\xa6\x1e\x68\x8f\x81\x2b\x52\x0d\x96\x8d\x5a\x13\xc1\xf6\x75\xed\x6d\xc6\xc8\x79\x3b\x63\x6d\x69\x9b\x7b\x5c\x8a\x9d\x39\x5d\x1d\x26\xb1\x82\xfa\xe7\x7f\x51\x14\x8f\x14\x54\x5d\xfe\x48\x14\x4d\x8f\x8e\xf6\xdd\xef\x9b\xd7\xac\x9e\xdf\xb0\x0a\x64\x5a\x44\x92\x45\xe3\x7e\x3d\x70\x99\x13\x67\xb3\x09\x8d\x9d\x07\xcf\xb3\x0e\xea\xc8\xa8\x9c\x92\x39\x67\xbe\x98\x7c\x7f\xfc\xff\xde\x34\xd3\xea\x15\x08\x6c\x55\x0b\x1d\x8c\x26\x1d\x84\x2b\xf2\x52\x87\xe2\x30\xbd\xd9\x6d\x0d\x7b\x2e\xd1\x79\x90\xa6\xbe\x89\xb6\xca\x7c\xdb\x37\x4a\x40\xf8\xc9\xda\x00\x97\x39\x0d\x0a\x82\xb3\x5c\xe6\xc7\x94\x14\xc8\xf3\xc2\x4f\xe8\xe9\xf1\x71\xeb\x76\x38\xbe\xf9\x4e\x0a\xac\x6b\x57\x24\x1b\x37\x98\xf7\x80\x7b\x4e\xfb\x19\x4d\x6d\x7f\xa4\x0d\x4b\x97\xde\x94\x9e\x4e\x5b\x8b\xdb\x52\x1e\xd2\x7a\x39\x6d\xb4\x37\x27\xe1\x7f\xe4\xbc\xe5\x06\xd9\xae\x3b\xd1\xdb\xeb\x83\xcd\x05\x36\xdd\x5a\x95\x72\xb1\x30\x45\xbd\x34\x91\xee\x28\x92\x60\x22\x09\xf6\x12\xd7\x6b\x15\x09\x09\xfb\x89\xfb\x45\xc8\x8f\x67\x37\xab\xdf\x79\x61\x2b\xdc\xac\x56\xb3\x2b\x81\x6b\xf0\xb7\x32\xf0\x9d\x4a\x9d\xf9\xf1\x00\x8d\x49\xbc\x8b\xd3\x5e\x78\x5f\x8e\x4e\xd5\x65\xf5\x28\xc2\x1b\x5e\xe3\x2d\x80\x25\xdd\x33\x61\xce\xc9\x9c\x47\xae\x54\x0e\x03\x1f\xbe\xaa\xaa\xd7\x8a\xe1\x67\xf2\xfb\x07\xba\x5c\xde\x36\x90\x0e\x7e\x59\x3d\x0a\xf2\x43\x70\x92\x20\x44\x94\x59\x98\xf9\x08\x58\xc5\x9d\xb6\x8b\x4d\x6a\x7f\x70\xc5\xc8\x39\xb7\x98\xd5\xef\x34\x03\xdc\x95\x73\xae\x18\xe3\xf6\x3f\xc5\xef\x65\xe9\xfc\x40\xe8\xf2\x5a\xd5\x3d\xb0\xdb\x34\x52\xdb\x90\x6e\xaf\x95\x5d\x53\x2e\x65\x71\x0b\xcf\x1e\x20\x07\xef\x4b\x17\xde\x4c\x18\xa9\xb3\x31\x40\x22\x5c\xe9\x7c\x9d\x8c\x7b\x4d\x44\x6b\xe4\x90\x4c\xb4\x73\xbe\x5a\x2a\x2c\x70\xc5\xac\x36\x9b\xf8\xdf\x01\x1f\x62\xe1\xa8\x55\x7f\x2b\xab\xc6\x4d\x98\xc8\x39\x70\x31\xc4\xbb\x4f\x30\x10\x74\xdd\x67\x89\x76\x56\xa4\x7c\x5c\xe5\x46\xde\x81\x47\xf2\x06\x9c\x27\x85\x2e\xed\x40\x40\x2d\x78\xbc\x77\x9e\xb5\x91\xaf\x85\xd3\x17\x68\xa5\x96\xe8\x9b\x57\xf2\x96\xe8\x05\x4a\x83\x16\x7c\x69\x71\x00\x92\x1e\xa5\x99\xdd\x2b\xc6\xda\x42\xf6\x75\x08\x16\xa5\xe4\x6c\xf5\xdd\xd1\xe2\x7b\xd5\x8e\x2d\x97\x24\xb4\x09\x2e\xb3\xbb\x46\xb8\x69\xe6\x5b\x58\x0f\x53\xb0\xd7\xcb\xee\xad\x45\xe7\x86\xa9\x39\xb3\x52\xc5\x55\x91\xdf\x6b\xe9\xb5\x86\x0a\x03\x0f\x54\x80\x5f\xfa\xca\xc6\x4f\x25\x08\xfe\xf7\xe6\x47\xf6\x07\x2d\x3c\xe4\x78\xd7\x58\xab\x46\xcd\x93\xad\xc1\x2f\x91\xcb\x85\x4e\xb1\xd7\x9a\xf8\xb5\x94\x29\x5a\xf2\xdb\x8c\xfc\xac\x85\xd0\x73\xb4\x6e\x80\xf2\x9c\x75\xba\xbe\x51\x96\x1b\x54\x33\x9d\xf7\x98\x9e\x63\xc5\x33\x24\xaf\x87\x78\x33\x67\x41\xd7\x23\xc5\x98\xc4\xa1\xa1\xb6\xab\x61\xb7\x33\x18\x8b\x33\x8b\xae\xf0\x5c\xae\x23\xda\x68\x06\xde\xa5\x6d\x78\xd6\xef\xb7\x0e\xda\xfd\xeb\x47\x74\x2d\xb2\x99\xb6\x12\xbc\x47\x76\xc1\x25\x3e\xdf\x9f\xae\x8a\x33\xd4\xcd\x82\xc3\xd9\xba\x87\x3a\x3e\xdd\x6c\xae\x9e\x1d\x53\xd2\x6e\xdb\x10\xa1\x75\xe8\xec\x26\x4e\x97\x36\xc3\xb6\x57\xdb\x35\x66\x1b\x3d\xcd\xde\x52\xd0\x1e\x4b\x73\x46\xa7\x7f\xea\xd2\x92\xd4\xea\xb9\x43\x4b\x98\x46\x47\x94\xf6\xc4\x95\xc6\x68\xeb\x89\x2f\x90\x34\xae\x78\xc8\x47\x47\x49\x1c\x4e\xee\x7e\xf7\x1c\xc6\xea\xec\x00\x56\x27\x03\xb1\x3a\x79\xa2\xac\xc6\x07\xb0\x3a\x1d\x88\xd5\xe9\x13\x65\x75\x7a\x00\xab\xf1\x40\xac\xc6\x4f\x94\xd5\xc9\x01\xac\xce\x06\x62\x75\xf6\x80\xac\xd6\x8f\xa9\x7d\xcf\x1a\xb2\xfd\xb0\xe9\x49\xad\x24\xac\x9e\x87\xab\xed\x6e\x62\x33\xda\xed\x14\xae\x36\x11\xeb\xd1\x17\x5a\x7b\xe7\x2d\x18\x92\x69\x8b\xe4\x17\xa8\xe0\x7d\x66\xb9\xf1\x3b\x21\x4f\x26\x93\x9b\xc6\xef\xf0\xd7\xb8\x5a\x7b\xf3\x56\x40\x86\x8c\x40\x83\x11\x15\x23\x7a\x16\x0e\x99\xce\x4a\x89\xca\x13\xa7\xc3\xb9\x81\x1c\xeb\x04\x02\x23\x33\x70\x7e\x15\x52\xe2\x82\xeb\xdb\x1b\x98\x1f\x5d\xfc\xf1\x53\x89\x76\x11\x8d\x47\xa7\xa3\x93\x91\xe4\x6a\xf4\xd1\xd1\x1a\x4e\x23\x3e\x3d\xba\xba\x0a\xb6\x96\xcb\x7f\x02\x00\x00\xff\xff\x40\x03\x83\xfd\x97\x21\x00\x00")

func tmplBloomsky_bodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomsky_bodyHtml,
		"tmpl/bloomsky_body.html",
	)
}

func tmplBloomsky_bodyHtml() (*asset, error) {
	bytes, err := tmplBloomsky_bodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky_body.html", size: 8599, mode: os.FileMode(420), modTime: time.Unix(1498743877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomsky_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\x5d\x73\xda\x38\x17\xbe\xef\xaf\x38\xeb\x9b\xa4\xe9\xda\x0e\x1f\x99\xdd\x4d\x43\x66\xbb\x4d\xb6\x4d\xa7\x4d\x3a\xa1\x1f\xef\x4e\xb7\x17\xc2\x3a\x60\x35\xb6\xe4\x95\x64\x28\x93\xe1\xbf\xbf\x23\x1b\x82\x01\xd9\x18\x08\x9d\x72\x55\xc5\xe7\x3c\xe7\x79\xce\x87\x64\x63\x7a\x7f\x4f\xb1\xcf\x38\x82\x13\x22\xa1\x28\x9d\xc9\xe4\x09\x00\xc0\x59\x8c\x9a\x40\x10\x12\xa9\x50\x77\x9c\x54\xf7\xdd\xdf\x9d\xf3\xc2\xa5\x50\xeb\xc4\xc5\xff\x52\x36\xec\x38\xff\x73\x3f\xbe\x70\x5f\x8a\x38\x21\x9a\xf5\x22\x74\x20\x10\x5c\x23\xd7\x1d\xe7\xea\xb2\x83\x74\x80\x0b\x9e\x9c\xc4\xd8\x71\x86\x0c\x47\x89\x90\xba\x60\x3c\x62\x54\x87\x1d\x8a\x43\x16\xa0\x9b\x2d\x7e\x05\xc6\x99\x66\x24\x72\x55\x40\x22\xec\x34\x66\x40\xbf\xb8\x2e\x7c\x08\x11\x48\x4f\x0c\x11\x5a\x90\x01\x6b\x32\x50\x70\x14\xa7\x4a\x1f\x41\x20\x62\x84\x3e\x93\x4a\x03\xe3\xa0\x43\x04\xa3\xef\x39\x10\x3e\x06\xa1\x43\x94\xd9\x7a\x16\x1b\x8c\x53\xee\x73\x44\xfa\x1a\xe5\x91\x71\x51\x98\x43\xba\xee\x2a\x7d\x8a\x2a\x90\x2c\xd1\x4c\xf0\x82\x82\xbf\x22\x21\x62\x75\x37\x86\x20\x62\x06\x76\x20\x2c\xca\x49\xaa\x43\x21\x0b\x5e\x09\xd1\x92\x05\x77\x24\x62\xfc\xcf\x41\x4c\x58\xe4\x05\x22\x76\xce\x9f\xe4\x9e\x9a\xe9\x08\xcf\x97\x91\x5f\x89\x33\x3f\xbf\xf2\x64\x9e\x91\xb7\x44\x63\xae\x23\x61\x11\x52\x20\x9c\x42\xcc\x38\xeb\x33\xa4\xf0\xb2\xdb\x9d\x2b\x89\x18\xbf\x03\x89\x51\xc7\x51\x7a\x1c\xa1\x0a\x11\xb5\x03\xa1\xc4\x7e\xc7\xf1\x95\x26\x9a\x05\x7e\xa0\x94\xdf\x13\x42\x2b\x2d\x49\xe2\xc5\x8c\x7b\x81\x52\x0e\x04\x52\x28\x25\x24\x1b\x30\xde\x71\x08\x17\x7c\x1c\x8b\x54\x39\x15\xc0\x50\x89\xec\xea\x10\x63\x7c\x74\xfc\x11\x12\x53\x66\x97\x05\x82\xab\x07\xf4\x9d\x50\xdc\x11\xe3\xb4\x00\xf5\x64\x9a\xfa\xbc\x13\x40\xc9\x60\xee\xfc\x4d\xf9\xdf\xfe\x4b\x51\x8e\xdd\x96\xd7\xf4\x1a\x99\xd7\xb7\x52\x75\xe0\x9c\x9f\xf9\x39\x4c\xed\x7a\xbe\x21\x43\xd2\xcd\x23\x3f\x94\xb5\x84\xc9\x62\x15\xbf\x29\xd8\x80\x47\x96\xa0\x1c\xde\x7c\x7a\x82\x8e\xe1\xfe\x61\x69\x3e\x09\xa1\x94\xf1\x81\xab\x45\x72\x0a\x27\xc7\xc9\xf7\xe7\x0f\x97\x27\x0f\xff\x7a\xf8\x87\xa7\x34\x91\x1a\xa5\xab\x31\x4e\x22\xa2\xd1\x8e\x76\x0a\xed\xe3\xe4\x3b\x34\x4e\x8a\x70\xe6\xa3\xf1\xbb\x76\x49\xc4\x06\xfc\x14\x02\xe4\x1a\x65\x65\x38\xd6\x97\x24\x5e\x8e\xd1\x13\x92\xa2\x3c\x05\x2e\x38\x2e\x7b\x9f\xf9\x53\xc5\x85\x3a\xbc\xfe\xf0\xee\xed\x09\xa8\x90\xc5\x59\x09\x6e\x51\x25\x82\x53\x93\xc8\xbe\x90\x70\x75\xf9\x3b\xa8\x34\x31\x9b\x19\x88\xfe\xd4\x18\x23\x8c\x91\x6b\x95\xd7\x0c\x29\x23\x60\xda\x81\x61\x61\x3b\x31\xd0\x9f\x5f\xdc\x5e\x5f\x5d\xbf\x3a\x2d\x82\x52\x81\x8a\x1f\x68\x18\x09\x79\x07\xac\x0f\x63\x91\x82\xd9\x2e\xb3\x6d\x2c\x21\x03\x84\x21\x23\xd0\x67\x11\x9e\xfa\xfe\x02\xdc\x17\xd6\x87\x48\xc3\xd5\x25\xfc\xf1\x75\x56\xb3\x85\xa6\x30\xbb\xb6\x3a\xf5\x7d\xa1\x94\x17\x93\xef\x01\xe5\x66\xaf\xf1\x43\x1d\x47\x27\x2a\x64\x43\xbf\xe5\xfd\xe6\xb5\xe6\xeb\x87\x86\x29\xf4\x45\x7d\x58\x99\x6b\xf2\x1b\x5e\xdb\x6b\xce\x56\x65\x90\x67\xbf\x7c\x41\x4e\x59\xff\xab\x11\x54\x6c\xe7\x79\xf3\x99\xf9\x13\x23\x8f\x50\x7a\x39\x44\xae\xdf\x32\xa5\x91\xa3\x3c\x74\x22\x41\xa8\xf3\x2b\xf4\x53\x1e\x98\x1d\xf9\x10\x87\xfa\xe9\x52\xcd\x87\x44\x82\x48\x75\x92\x6a\xe8\x00\x15\x41\x6a\xca\xe3\x0d\x50\x5f\xe6\x95\xfa\x6b\x7c\x45\x0f\x9d\xdc\xc2\x79\xfa\x7c\xc5\x77\xa4\x56\xff\x96\x48\xc6\x0d\xdc\x43\xdc\x18\x95\x22\x03\x5c\x8e\x3d\xb3\xa7\xc5\xd0\x81\x44\xa2\x71\x1a\xfd\xd0\xa1\x6c\xb8\x1c\xd6\x7c\xa8\xc7\x38\x47\x69\x9a\x0a\x3a\x30\xc5\x5f\x35\xcb\x79\x7b\x24\x49\x90\xd3\x97\x21\x8b\xe8\x21\x5d\x42\x9b\x2c\x2e\x95\x08\xee\xd0\x90\xe7\x38\x82\xcf\xd8\xeb\x66\xeb\x43\xe7\xfe\xde\xfb\x8c\xbd\xec\xaa\x4c\x65\x34\x99\x2c\xb3\xf2\xfd\x9b\x6b\xb8\x79\x7f\x79\x6d\x81\xf3\x04\x17\x09\xf2\x62\x4a\x2c\xa5\x98\x23\xe5\x19\x3c\x74\x0c\x9c\x4d\x7d\x6e\x95\x1b\x4d\x23\x24\x52\x68\x11\x88\xe8\x69\x1d\x63\x89\x84\x8e\xbb\x9a\x68\xac\x65\x9e\xca\x12\xd8\xe9\x75\x85\xdc\xf4\x48\x82\xdc\x59\xb5\x9b\xac\xfc\xc5\xf7\xe1\xe6\x1a\x2e\x6f\x6f\x6f\x6e\xed\xb9\x42\x29\x85\x5c\x48\x96\xf9\x83\x2d\x5d\xe6\xf8\x11\x11\x7a\x99\xc1\xd4\x6c\x35\x5d\xb9\x18\xdb\x55\x6b\xf1\x3d\xc1\x83\x48\x28\xac\x51\xae\x69\x9d\xce\x7a\xe7\x2f\x05\xe7\x98\xd9\x42\xe6\x4c\xbd\x33\xbf\x77\xbe\x5c\xbc\xc9\x72\xcf\x98\x4c\xbc\xbb\xec\x76\x5f\xbc\xba\xb4\x33\x99\xb6\x76\x0d\x2e\x66\x92\x82\x54\x4a\xe4\x9a\x9a\xf3\x23\x6f\xe1\x0b\xa2\xf1\xd0\x92\x93\x6c\xee\x88\x46\xcd\x62\x63\xea\xdc\xdf\x7f\x00\xe7\x2d\x51\x1a\xba\x63\x1e\x38\x93\xc9\x29\x38\xf0\xac\x08\x68\x36\x85\x1c\x0d\x9e\x81\xe3\x3b\xf0\xcc\xda\x13\x87\x4b\x2e\xef\x04\xd7\x61\xe6\xd3\xa8\x76\x5c\xf2\xfb\x3b\x8d\xa2\x7f\x90\xc8\x3c\x1c\xfc\x09\x35\xfd\x5e\x8b\x54\xaa\xdc\xe9\xb4\xa6\xcb\x3b\xc6\x53\x8d\x1b\x3a\x75\x31\x10\x9c\x2a\x5b\x6e\x4b\xb7\x51\x89\x7d\x89\x2a\x34\x39\x77\x9e\x2e\xec\x60\xb3\x52\xac\x82\x59\xc6\xe7\x83\x00\x15\x8a\xfc\xdc\xa3\x44\x13\x9b\xcd\xb4\x33\xa7\xbd\x65\xdb\x44\x7c\x7f\x36\x3d\x91\x18\x98\xa6\xf2\x0c\xd6\xea\x00\x5b\x5b\xe7\x9b\x12\x66\x3b\x7b\xd3\xbd\xb9\xf6\x12\xf3\x30\x34\x07\xb0\x45\x82\x5e\xca\x22\x9a\xa9\xb4\xc2\x91\x62\xb7\x1a\x6c\xef\x82\x68\xe2\x7d\xe8\xc2\x11\x34\x8e\x8f\x8f\x4b\x1a\x38\x36\xbd\xa5\xa0\x03\x5f\x0e\xb2\xfe\x7d\x43\xb8\x33\x99\x1c\xfc\x0a\xf9\xf2\x6f\xec\x15\x97\xef\x88\x2c\x2e\x5f\x24\x72\xf1\xea\xb8\xb8\x7c\x93\xf2\xc5\x65\xb4\xe0\x9b\x0e\x8a\xcb\x2e\x26\xc5\xe5\x4d\xa0\x8b\xcb\x6b\x31\x2c\x2e\x2f\xd0\x8c\xd7\xc1\x57\xbb\xa4\x31\x12\xb3\xf5\x91\xc5\x11\xa8\x90\x6f\x8e\xbf\x2c\x0d\x5f\x48\x61\xdc\x4a\xd0\xa7\x1b\x03\x99\xcf\xb2\xdd\x2e\x14\xe9\x03\x8b\xe9\x40\x95\x50\x60\x7c\x66\xf7\x30\x45\x76\x4b\x85\xc1\xcc\xb2\x62\x74\x8c\x65\x5f\xc8\x98\x68\x8d\xf4\x03\x8b\xf1\x78\x3a\x1c\xf0\x0c\x0e\xe0\x00\x9e\x4d\x45\xcf\x56\x59\xba\x66\x8b\x8c\xf5\x33\x38\x38\xcd\xec\x18\x7f\xf8\xb7\xc2\xa0\x46\xa8\xc6\x2c\x94\x0b\x8d\x8a\x70\x1b\xcc\xfb\x22\xfc\xd2\xc8\x2f\x5e\xac\xc1\xaf\x39\xe7\xd7\xdc\x03\xbf\x66\x15\xbf\x66\x0d\x7e\xad\x39\xbf\xd6\x1e\xf8\xb5\xaa\xf8\xb5\x6a\xf0\x6b\xcf\xf9\xb5\xf7\xc0\xaf\x5d\xc5\xaf\x5d\x83\xdf\xc9\x9c\xdf\xc9\x1e\xf8\x9d\x54\xf1\x3b\x79\xfe\xa4\x3e\xac\x39\xa8\x94\x26\x71\x52\x85\x78\x5c\xe3\x28\x2b\x8d\x10\x30\x3d\x5e\x02\xcf\x4e\x85\x97\x4c\x8f\xaf\x89\xed\x98\x2c\x85\xca\xbf\x37\xb3\x81\x5d\x64\x57\xae\x2e\x36\x4a\x68\x14\x89\x11\x4a\x65\xc3\xbb\x4e\xe3\x9b\xfe\xdf\x33\x8b\xec\xae\x25\xdb\xf0\xe7\x4e\x93\x89\x63\xc9\x33\xeb\x43\xe1\xcc\xbb\x66\x83\xb0\xf4\xd1\xa0\x94\x18\x37\x5e\x4b\xa4\x9c\x33\x06\x41\x44\x94\xea\xfc\xeb\x8c\x18\x8c\x98\x1b\x0b\xc1\xdd\x11\xe1\x8c\x0f\xdc\x40\xa2\x0a\x90\x6b\xb7\xf5\xaf\x79\xe4\x64\xe7\x39\xd9\x2c\xbc\x21\xba\x7a\x23\x0f\x18\xa9\xe5\xaf\x0c\x1e\x89\x18\x25\x63\x57\xa5\x9c\x8f\x17\xb8\x5c\x64\x47\xb2\x85\xc9\x6a\xc5\x1e\x72\xd8\xd5\x42\xc6\xde\xc7\x4f\x57\x9c\xe2\x77\x38\xeb\x40\x73\xe3\x5c\xa6\x43\x5b\x75\x17\x81\xcd\x8d\x6c\xa3\x91\xd3\x8c\xc4\xc8\xd0\xcc\x0a\xbe\xa2\x2c\x88\x44\x4a\x67\xb2\xca\x92\xba\x81\x9c\xf6\xde\xe5\xc4\x48\x59\x1a\x97\x2b\x32\xb5\xaa\xa5\x6a\xdf\x44\x43\x36\x08\xab\x69\x16\x5b\xca\xda\x46\xeb\x12\xff\x99\x71\x7a\xc1\xe4\xf4\xc1\xae\xd3\x01\xe7\xda\xd9\xb8\x00\x23\xc6\x29\x65\x72\x79\x08\xa6\xf7\x86\x52\x1b\x11\xb0\x2a\xc0\xb8\x81\x16\x23\x22\xa9\x72\x8f\x5d\x8a\x83\x1d\xbb\xc8\x22\xe6\x72\x4f\x6a\xb2\xd5\xa5\x32\x1b\xc9\x1a\x61\xed\x93\xbd\x28\x7b\x64\x61\xb5\xa4\xfc\xb1\x9f\x22\x75\x1f\x59\x4b\x57\xa4\x2b\x45\xaa\x16\xd6\x68\xed\xa7\x48\xdd\x3d\x09\x5b\xa3\xe6\xf7\x3d\xd5\xe9\xf3\x3e\xeb\xf4\x19\xeb\xb4\x60\xb3\xb9\x9f\x4a\x3d\xb2\xb4\x9a\x62\x7e\xdb\xd3\xae\xf7\xc8\x6a\x16\x77\xbd\x7a\xda\x5a\x8d\x35\x85\x5a\x7f\x36\x75\x53\xa5\x09\xe3\x48\x8d\xc2\x6e\x82\x48\xcd\xfd\x41\x63\x63\x69\x2a\x55\xda\x70\x2b\x3f\x7c\x2d\x91\xcc\x91\x1b\x27\x7e\x58\x72\xf8\x1a\x3c\xb7\x87\x24\xed\x0b\xa9\xdd\xe3\x52\x99\x6b\x73\x3e\x48\xd5\xf2\xdd\xe3\x52\x6d\x5f\xa5\x4a\x6f\x49\xc7\xfe\xc5\x7a\x15\x1f\x43\x27\xb6\xde\xfc\x2f\x12\x8a\xf3\xdb\xff\xd8\x57\x3f\x82\xd1\x5d\x1c\xae\xa7\x74\x17\x87\x19\x95\xbb\x78\xcf\x69\x9a\xf5\x53\x55\x9e\x56\x3b\xea\x07\x65\x6c\x46\xae\x32\x65\xab\xec\x1e\x33\x79\xf5\xb6\x2d\xfb\x74\xb7\x7e\xc2\xe9\x6e\x6c\xdf\xbc\x7b\x19\xef\x1d\xf8\xec\x69\xbc\x77\x64\xb4\x9f\xf1\xde\x96\xd4\x0f\x19\xef\x5d\xc9\xed\x7b\xbc\x2b\xf8\xed\x32\xde\xbf\xfd\x84\xe3\xdd\xfc\xb9\x0e\xef\xe6\x4f\x37\xdd\x3b\x32\xda\xcf\x74\x6f\x4b\xea\x87\x4c\xf7\xae\xe4\xf6\x3d\xdd\x15\xfc\xcc\x7d\xf9\xba\xd9\xbe\x25\x2c\x7b\xd0\x38\xde\x78\x9a\x25\x61\xbc\xe4\x11\xc3\xfa\x48\x51\xe3\x3b\xae\xad\xbe\x89\x2b\xe5\xf1\x0f\x2a\x2b\x91\x34\xee\x49\x8c\x22\xf2\xbd\xea\x81\xa6\x46\xda\x2e\x08\x8b\xc6\xdb\xe7\x8e\x1a\xf7\x65\xe2\xee\x63\x66\xc5\x16\xc1\xaa\xc1\xb4\x19\xe3\x3b\xe5\x21\x8e\x77\xcc\x44\x1c\xef\x3f\x17\x2b\x31\x4a\x94\x64\xfb\x43\x0c\x67\x3d\x79\x6e\x66\xb0\xc2\x2a\xf2\xe3\xe6\xb6\x79\xbb\xcd\xde\x6f\x6f\x9b\x34\x49\xf4\xf2\x8b\xa2\xc7\xcd\x98\x25\x80\x4d\xc0\x6e\xbd\x63\x20\x76\x69\x1d\x99\xf9\xef\x3d\x0f\xeb\x1a\x67\x2a\xa3\xba\x6f\x0a\x46\xa5\x6d\xb3\xc1\x7b\x4d\x8c\x93\xbe\xf5\x4d\x61\xf6\x63\x14\x8c\x13\x94\x44\xa7\x12\xed\x87\x48\x9f\x84\x12\x79\x88\x4c\x97\x9f\x1f\x95\xb1\x83\x3a\xb1\x5f\x96\xbc\x67\xc2\x48\xb1\x54\xcd\x23\xd7\x0f\x1d\xa6\x31\xa3\x25\x2f\x5c\xb3\xe8\xaf\xa7\x06\xf6\xc8\x33\xf7\x6d\x42\x27\x12\x95\x4a\x25\x32\x1e\x0e\x4a\xc3\xbf\x9f\x1a\x4d\xe7\xe2\xf5\x60\x93\xbc\xce\x22\x84\x09\x59\x1b\x20\x4c\x48\x16\x23\x7c\x4f\x36\x52\x31\x14\x91\x26\x03\xfb\x3b\x66\x83\xff\x29\xbf\x9e\xf7\xf2\xa7\x8d\xa0\x7b\x91\x10\x31\x8b\x07\xc7\xce\x53\x4f\xc9\x60\x01\xf6\x2a\x26\x03\xfc\x78\xfb\xd6\x82\xe7\x1f\xad\x87\x6c\x2c\x42\xbe\x97\x38\x64\x38\xca\x40\xdf\x32\xa5\xbf\x1c\x5b\x7e\x43\xb4\x1e\xb5\xb9\x06\xb5\xb1\x15\x6a\x6b\x0d\x6a\x73\x2b\xd4\xf6\x1a\xd4\xd6\x56\xa8\x27\x6b\x50\xdb\x5f\x9f\x1f\xf9\x9b\xb6\xc0\x90\xd1\xa5\x16\xf8\xc4\x28\x8a\xd2\x42\x95\xf7\x6a\x0e\x14\x09\x42\x37\xfa\xe9\xe2\x8c\x45\xa3\x8c\x85\xad\xb0\x55\x2c\x1a\xbb\xb0\x68\x96\xb1\xb0\x35\x42\x15\x8b\xe6\x2e\x2c\x5a\x65\x2c\x6c\x8d\x53\xc5\xa2\xb5\x0b\x8b\x76\x19\x8b\xf6\x86\x2c\xda\x25\x2c\xe6\xbf\xe0\x9e\x4c\xaf\xcc\xff\x87\xc2\xfd\x3d\x20\xa7\x30\x99\x3c\xf9\x7f\x00\x00\x00\xff\xff\x5c\xdd\x05\x88\x32\x37\x00\x00")

func tmplBloomsky_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomsky_headerHtml,
		"tmpl/bloomsky_header.html",
	)
}

func tmplBloomsky_headerHtml() (*asset, error) {
	bytes, err := tmplBloomsky_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky_header.html", size: 14130, mode: os.FileMode(420), modTime: time.Unix(1498743877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLog_bodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4f\x6b\xdc\x3e\x10\xbd\xef\xa7\x98\x28\x67\x59\xfc\x7e\xbd\x15\xdb\x87\x50\x68\x29\x39\x14\x9a\x7b\x19\x4b\x5a\xaf\x12\xad\xc6\x95\x66\x4d\x16\xb3\xdf\xbd\x58\xfe\x93\xc4\x4d\x02\xa5\xd0\xc3\x62\x69\xf4\xe6\xbd\xb7\xf3\x84\x86\xc1\xd8\xbd\x0b\x16\x84\xa6\xc0\x36\xb0\xb8\x5c\x76\xbb\x32\x60\x0f\xda\x63\x4a\x95\x08\xd8\x37\x18\x61\xfa\x48\x17\x7a\x1b\x93\x5d\xb6\x7b\xf7\x68\x8d\x64\xea\x44\xbd\x03\x00\x28\x8d\x5b\x1b\x47\x42\x74\xc1\xc6\xf9\x6c\x7b\x3e\x53\x1c\x2c\x9a\x17\x98\x8c\x6b\x4e\xcc\x14\x80\xcf\x9d\xad\xc4\xb4\x11\x9b\x46\xa6\xb6\xf5\x16\x34\x79\x8f\x5d\xb2\x46\x80\x41\xc6\xb9\x3c\xca\x4f\xf5\xa5\x8c\xb1\xb5\x5c\x89\xeb\xa9\x5b\x00\x46\x87\xd2\x3e\x76\x18\x8c\x35\x95\xd8\xa3\x1f\xb1\xb9\x3a\x3a\x8f\xe4\x57\xa9\xad\xb9\xd4\x61\x58\xcc\xa4\x28\x29\xf8\xb3\xa8\xef\x26\x3b\x01\x7b\xd7\x22\x3b\x0a\xa5\x1a\x71\xef\xb4\x3a\x4d\x41\x66\xfa\x7f\x05\x2d\xd5\x34\xca\x4d\x3b\x6e\x26\xdb\x44\x0c\x46\xc0\x21\xda\x7d\x25\xae\x45\x7d\xe3\x89\x8e\xe9\xe1\x5c\x2a\x7c\x16\xa5\x32\xae\xdf\x24\xeb\xcc\x3a\xb2\xa7\x5b\x30\xc5\xb0\xdc\x98\x35\x96\x8d\x87\x93\x7f\x66\x62\x01\x07\xec\x37\xb8\x8c\xf5\xae\x2e\x71\xb6\xa7\x44\x3d\x0c\x77\x20\xbe\xd0\xd1\x8a\xcb\x65\xb4\x58\x2a\xef\x5e\xed\x5a\x14\x50\xb3\xeb\xb7\x0e\x9e\x4d\x63\x66\xf6\xd4\x8a\xfa\x96\xda\x77\x39\x9f\x9c\x1c\x98\xbb\xf4\x51\xa9\xd6\xf1\xe1\xd4\x14\x9a\x8e\xaa\x43\x8e\x4e\x3f\xa0\x77\x41\x35\xf3\x10\xa5\xf6\xce\x06\x96\x2d\x09\x58\x2e\xe5\x8f\xc6\x63\x78\x10\xf5\xe7\xdc\xfa\x87\x7a\x06\xd3\xa1\x21\x8c\xa6\x58\x24\xb2\xf6\xef\xec\x4b\x8c\xf0\x69\xe9\x78\x52\x7a\x19\x86\x3a\xf9\x57\x83\x9e\x97\xa5\x0a\x38\x7e\xae\xa4\x54\x45\xc0\x7e\x0d\x15\xa4\xac\x77\xbb\xb7\x1e\x81\x4c\x31\x0c\xc5\x2d\xb5\x77\x8f\x9c\xdf\x99\x99\xef\x4a\x4a\x50\xc5\x8a\x9d\x69\xc6\xea\x0d\x11\x27\x8e\xd8\x81\xa6\x68\xe1\x2b\xf6\xf8\x5d\x47\xd7\xf1\xab\xd9\x55\x55\xf5\x56\xfd\x2f\x7e\xd9\x4e\x76\xf3\xcd\xa3\xb6\x06\x90\x81\x0f\x16\x6c\x30\x40\xfb\xbc\x34\xa4\x4f\x47\x1b\x18\x12\xe5\x7d\x87\xad\x4d\xe0\x09\x0d\xec\x31\xf1\xfc\x97\xca\x94\xad\x43\x8a\xba\x12\x2a\x31\xb2\xd3\xea\x3e\xa9\xfb\x9f\x27\x1b\xcf\xf2\x43\xf1\x7f\xf1\x5f\x71\x74\xa1\xb8\x4f\x62\x9c\xf2\x04\xaf\x77\xc3\x90\xb5\x2e\x97\x5f\x01\x00\x00\xff\xff\x2b\x10\x4f\xbf\xae\x05\x00\x00")

func tmplLog_bodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLog_bodyHtml,
		"tmpl/log_body.html",
	)
}

func tmplLog_bodyHtml() (*asset, error) {
	bytes, err := tmplLog_bodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log_body.html", size: 1454, mode: os.FileMode(420), modTime: time.Unix(1498743877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLog_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdf\x6f\xdb\x36\x10\xc7\xdf\xfd\x57\x5c\xf5\x32\x20\x18\xa5\xa6\x69\xb0\xce\xb5\x8c\x75\x45\xd0\x65\xe8\xfa\xd0\x74\xd8\x80\xa2\x0f\x34\x79\xb2\x2e\xe1\x0f\x95\x77\xb2\x63\x18\xfe\xdf\x07\x4a\x4e\xea\x34\xf0\x10\x0c\xe3\x03\xe1\x33\xf9\xfd\xf0\xee\xbe\xd0\x6d\xb7\x16\x1b\x0a\x08\x45\x8b\xda\x62\x2a\x76\xbb\xc9\xcc\xa3\x68\x30\xad\x4e\x8c\x52\x17\xbd\x34\xea\x55\x31\xdf\xff\xdd\x8a\x74\x0a\xbf\xf6\xb4\xaa\x8b\xbf\xd5\x9f\x6f\xd4\xdb\xe8\x3b\x2d\xb4\x70\x58\x80\x89\x41\x30\x48\x5d\x5c\x5e\xd4\x68\x97\x78\xaf\x0a\xda\x63\x5d\xac\x08\xd7\x5d\x4c\x72\x70\x71\x4d\x56\xda\xda\xe2\x8a\x0c\xaa\x21\xf8\x11\x28\x90\x90\x76\x8a\x8d\x76\x58\x9f\x66\xc8\x33\xa5\xe0\x53\x8b\xa0\x17\x71\x85\x70\x06\x03\x54\xf4\x92\xe1\xc4\xf7\x2c\x27\x60\xa2\x47\x68\x28\xb1\x00\x05\x90\x16\x21\xd7\xf3\x1a\x74\xd8\x40\x94\x16\xd3\x10\xdf\xbd\x0b\x59\x34\x6a\x4e\x74\x23\x98\x4e\xb2\x84\x71\x44\x2a\xf5\x30\x6d\x8b\x6c\x12\x75\x42\x31\x1c\x64\xfe\xab\x8b\xd1\xf3\xcd\x06\x8c\xa3\x8c\x5c\xc6\xef\xaa\xd5\xbd\xb4\x31\x1d\x28\x3a\x2d\x89\xcc\x8d\x76\x14\x7e\x59\x7a\x4d\xae\x34\xd1\x17\xf3\xc9\x64\x26\x24\x0e\xe7\xdf\x13\xdf\xc5\x59\x35\x9e\x4c\xc6\x0e\xbc\xd7\x82\x63\xde\x1d\x39\xb4\xa0\x83\x05\x4f\x81\x1a\x42\x0b\x6f\xaf\xae\xc6\xcc\x1d\x85\x1b\x48\xe8\xea\x82\x65\xe3\x90\x5b\x44\x29\xa0\x4d\xd8\xd4\x45\xc5\xa2\x85\x4c\x65\x98\xab\x45\x8c\xc2\x92\x74\x57\x7a\x0a\xa5\x61\x2e\xc0\xa4\xc8\x1c\x13\x2d\x29\xd4\x85\x0e\x31\x6c\x7c\xec\xb9\x38\x02\x85\x7f\xa5\x2a\x69\xd1\xe3\xff\xca\x5e\xa3\xce\x56\x2a\x32\x31\xf0\x3d\xf9\x3f\x13\xd4\x9a\x82\x3d\xc0\x4c\x26\x93\xd9\xe8\x34\x70\x32\xdf\x84\xd7\x5c\x5d\x7f\xed\x31\x6d\xd4\x59\xf9\xa2\x3c\x1d\x14\xd7\x47\x2b\x82\x62\x3e\xab\x46\xcc\x93\x7c\xfb\x5d\xaf\xf4\xd5\xf8\xea\x60\xdf\x91\x0c\x1e\xba\x75\xcd\xf0\xc4\xf7\x87\x86\xcc\x27\x00\x00\x8b\x68\x37\xb0\x1d\x7e\xe6\xd5\x69\x6b\x29\x2c\x95\xc4\x6e\x0a\xe7\xcf\xbb\xdb\xd7\xc3\xd1\x6e\xd8\x87\xad\x64\xd1\x49\x30\x29\x41\xdf\x39\x2d\xf8\x58\x3d\x85\x97\xcf\xbb\x5b\x38\x3d\xbf\x93\xe7\x25\x78\x2b\x4a\x3b\x5a\x86\x29\x18\x0c\x82\xe9\x11\x9a\x9a\xa4\xfd\x21\x6f\x11\x93\xc5\x34\x85\x10\x03\xde\xdd\x9e\x55\xfb\xec\xf7\x7d\xfc\xed\xd3\x1f\xef\xcf\x81\x5b\xf2\x43\x0b\x3f\x22\x77\x31\xd8\xdc\x8c\x26\x26\xb8\xbc\x78\x05\xdc\x77\x79\xc0\x40\x6c\xf6\x97\xd1\xa1\xc7\x20\x3c\xf6\x1c\x2d\x69\xc8\x56\x12\xee\x3f\xf3\x8c\xfd\xeb\xcd\xc7\x0f\x97\x1f\xde\x4d\x0f\x81\x36\x22\x87\x1f\x04\xd6\x31\xdd\x00\x35\xb0\x89\x3d\xe4\xf1\x35\x8c\x96\x4e\x2f\x11\x56\xa4\xa1\x21\x87\xd3\xaa\xba\x47\x7d\xa6\x06\x9c\xc0\xe5\x05\xfc\xfc\x65\xbe\x2f\xed\x81\xa1\x79\x7a\xf2\xb4\xaa\x22\x73\xe9\xf5\xad\xb1\x21\xcf\x80\xaa\x15\xef\xce\xb9\xa5\x55\x75\x56\xfe\x54\x9e\x7d\x8b\xef\xcd\x3e\xf0\xf4\xe9\xd8\x34\xd6\x53\x9d\x96\x2f\xcb\x17\x77\xd1\x31\xe4\xec\xd9\x67\x0c\x96\x9a\x2f\xb9\x98\xed\x16\x30\x58\xd8\xed\xfe\x09\x00\x00\xff\xff\xc5\x87\x89\x23\x20\x06\x00\x00")

func tmplLog_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLog_headerHtml,
		"tmpl/log_header.html",
	)
}

func tmplLog_headerHtml() (*asset, error) {
	bytes, err := tmplLog_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log_header.html", size: 1568, mode: os.FileMode(420), modTime: time.Unix(1498743877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langEnUsAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x82\xf0\x1c\xe4\x00\x59\xb3\xb4\x5b\x87\x2e\x9d\x04\xa2\x62\x2d\x01\xfa\x09\x28\xba\x85\x60\xe8\xee\x85\x1c\xa7\x71\x2b\xa3\x31\xb2\x19\xf6\xf7\x3e\x92\x7e\xe3\x0e\xa0\x3b\x59\xc9\xdd\x11\xea\x33\x40\x17\xc5\x10\x77\xc7\xf9\xf5\x0e\xa0\xec\xa1\x52\x5a\x69\xcc\x69\xc1\x05\xaa\xd4\x38\x1e\x4e\x71\x08\x52\x0a\x68\xcc\xdd\xfe\x8f\xe4\xf7\xe7\x74\xf1\x55\x9d\xcf\xca\x90\xed\x8d\x28\x1b\x94\x27\x21\x6e\xdd\xcf\x80\x1e\x16\x86\x09\x03\x41\xe7\x0e\xcd\xa0\x55\x36\xcd\xf0\xcf\xd4\x33\x71\x8a\x41\xf5\x4c\x24\x36\xf4\x2b\x57\x3f\x91\x73\xb1\x8a\x5e\x26\xb4\x94\x26\x3c\x04\x26\xd4\x8a\x3c\x5a\xa7\xde\xeb\xb8\xb5\x9f\x72\x8d\x83\xc1\xb4\xdc\xeb\x92\x86\x29\xdd\x5e\xb1\x31\x98\xda\x93\xda\xad\x94\x58\x4f\x1f\x8c\x9e\x1e\xdd\x0f\x6c\x00\x31\x04\x67\x4c\x52\x99\xd7\xab\xb0\x94\xc7\x57\xff\x57\x7a\xbb\x8a\x63\xcf\xe8\xef\x37\xf5\x15\xd9\xe9\x5b\x2e\xc7\x81\xb7\x34\xf4\x16\x07\x30\xf8\x49\xdb\xab\xb9\x97\x98\x3b\xd9\x95\xef\x00\x00\x00\xff\xff\xa2\x16\x10\xd2\x54\x03\x00\x00")

func langEnUsAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langEnUsAllJson,
		"lang/en-us.all.json",
	)
}

func langEnUsAllJson() (*asset, error) {
	bytes, err := langEnUsAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/en-us.all.json", size: 852, mode: os.FileMode(420), modTime: time.Unix(1498741549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langFrAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\xcd\x72\xdb\x36\x10\xc7\xef\x7e\x8a\x1d\x5d\x72\xc9\xf8\x01\x7a\x4b\xac\x3a\xb6\xa7\x91\x3c\x96\xeb\x4c\x4e\x1c\x98\x5c\x89\xdb\xe2\x83\x05\xb0\x74\x38\x1a\xbe\x4f\xf5\x1c\x7a\xb1\x0e\x68\x9b\x84\xa4\x6d\xe2\xe4\x26\x71\x7f\xff\xc5\x7e\x61\xc9\xed\x19\xc0\xec\x43\xe3\x67\xbf\x41\xfa\x09\x30\x73\xb1\xc6\xf4\x77\xf6\xa1\xf5\xa4\x67\x67\x00\xfd\xfb\x01\xe2\x8d\x04\x39\x8e\x13\xf3\x51\x3b\x67\xc2\xdf\x1d\x94\x9a\xd0\x46\x20\x0b\x9f\x9c\xa0\xba\x78\x36\x8f\x38\x0e\xdc\xe8\xe6\x82\x62\x27\xa8\x1e\x48\x6b\x9c\xa8\xb9\x92\xa0\x1b\xc7\x3e\x63\xb0\x14\x98\xf9\x7e\x57\xa2\x79\xf4\xb9\x33\x6c\xa9\x44\xb8\xae\x24\x9c\x42\xe3\x02\x45\x5a\xc3\xf5\x7c\x92\xfc\x1e\xa2\x00\xa7\xa7\x23\x72\x89\x8f\x02\x72\xb9\xdf\xb5\x9e\x30\x0b\xf3\xca\x19\x94\x8a\x5b\x96\x8c\x79\x0f\xae\xd8\x50\x25\x17\xe7\xc5\xb4\xdf\x4d\xf4\xb5\xad\xf0\x1b\xfc\xf9\x20\xd0\xa3\x69\x84\x6f\x94\x95\xaa\xa9\x6c\x7b\x10\xe9\x0d\x6b\x09\xe3\xd4\x9a\x98\x63\xa2\x37\x26\x3b\x31\x7f\xa8\x10\x61\xd5\x59\xb1\x43\xe8\x2d\xed\xff\xf5\x08\xa1\xb3\x65\xed\x9d\xa5\xa0\x22\xb9\x4c\xfe\x59\x49\x43\xfb\x59\xf9\x90\x33\x52\xa9\x8c\xa2\x09\x59\xd0\xa6\x96\xfa\xb8\x60\xca\xf2\x59\x48\x53\xbc\xc8\xc3\x59\x38\x1f\x6b\x11\xf2\x55\x4e\xb5\x22\xd3\x1e\x8d\xe3\x82\xcd\x23\x7a\x58\xae\xe1\xd2\x69\xed\x9e\xd0\x07\x51\x97\x54\x50\x21\xac\x47\x6a\x74\xb1\x2c\xa5\xb4\x96\x65\x74\x07\x27\xdd\x7a\x0c\x81\xbd\x34\x7e\x83\x89\x9c\x05\x15\x8d\x0b\x4d\xbd\xdf\x79\xfa\x87\x33\xed\x9d\x22\xa9\xcd\xb7\x9a\xe9\x88\x82\xb9\x22\x2d\xf5\x62\x60\x41\x95\x25\x1b\xd6\xfb\x1d\x54\xef\x14\xff\xe5\xd8\x57\xef\x6a\xa6\x23\x1f\x77\x2a\x4a\x61\xde\x2b\xfe\x96\x6a\xd0\x08\xc7\x26\x09\x0c\x83\x56\xa7\xbd\xf0\x7f\xe7\x97\x18\x63\xaa\xe3\xeb\xd0\xd5\xc8\x79\x8d\x56\xd8\x08\xd2\x15\x36\xf1\xa8\x6d\x2b\xc7\xe2\x10\xac\x38\x9b\x81\x15\x87\xa8\xc8\x62\x05\x5f\xc8\x4a\xfb\xe6\x81\x22\x86\x80\x50\x31\xb4\x69\x4d\x06\xc7\x11\x2d\x4f\x1e\xee\xd1\x34\xe8\x55\x94\xdb\x96\xac\xfb\xdd\x8b\x79\xd2\x90\xc1\x10\x95\x91\x32\x99\x6c\x23\xfe\x65\x4e\x1e\xcb\xe1\xc6\x9d\xf2\x29\x6e\x98\x80\x49\x84\xe2\x4a\x5c\x32\xe6\x4b\xf1\x48\x2d\xed\xdb\x17\xdb\x6b\x05\x8e\xb4\x9f\x58\x3c\xe6\x4e\xad\x95\x1e\x6e\xc3\xa1\xe6\x2b\x4a\x77\x67\x99\x8f\x57\x55\x54\xaa\xcb\x29\x9b\x0a\x3b\xdb\x6e\xcf\x2f\x1c\xdb\xd8\xf7\x50\xa9\x6e\xf6\xfe\xc8\xc5\xa1\x39\xbb\x7a\x35\x6d\xa4\x29\xb8\x52\xf9\xbb\x52\xbb\x27\x81\xf9\xa8\x32\x3f\x06\x2b\x62\x23\x6d\x39\xd7\x61\x56\x77\xd3\x15\x35\xa6\x3d\x56\x90\x2d\x0c\xc6\xc3\x6d\xf1\x9c\xcb\x35\x28\x03\x59\xc4\xcf\x18\x44\xa5\xf5\xf9\x49\x66\xdf\x85\xc7\x63\x1b\xf4\xc1\xd9\x62\xe3\x11\x23\x59\xe9\xeb\xe0\x0a\xb5\x76\xc9\xd1\xed\x80\xf6\xfd\x89\x98\xad\x47\x55\x15\x68\x14\xe9\xa2\x4c\xc7\x49\x5d\x78\x95\x43\xad\x42\x1e\xd7\xb3\x1a\x06\x75\x38\x4d\xe3\xed\xca\x1f\x87\x55\x44\x32\xb8\xf6\xea\xe0\x45\xfd\x73\x01\xa6\xcf\xa1\x58\x23\x34\x69\x1f\x6d\xb7\xe7\xf7\xaf\x1e\xfb\xfe\xd7\x63\xff\xae\xd3\x29\x2d\xef\x36\x5e\x99\x1f\xf7\xea\xc9\x79\x9d\xed\xaa\xce\xb1\x7f\x4b\x8f\xbe\x3a\x86\x5a\xb5\xf8\x13\xcd\x79\x83\x24\x85\x71\xd6\xff\x17\x00\x00\xff\xff\x12\x5d\x85\xe5\xa3\x0a\x00\x00")

func langFrAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langFrAllJson,
		"lang/fr.all.json",
	)
}

func langFrAllJson() (*asset, error) {
	bytes, err := langFrAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/fr.all.json", size: 2723, mode: os.FileMode(420), modTime: time.Unix(1498741549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testMockConfigfortestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x3c\x9c\x43\xfb\x41\xd2\x34\x50\x4a\xf1\xe1\x83\x2e\xdd\xc3\x42\x59\x42\x37\xfd\x01\x63\x69\x1c\x8b\xc8\x1a\x23\x8d\xd3\xfa\xdf\x2f\x4a\xea\x34\xa5\x39\xac\x4e\xd2\x3c\xbd\x37\x33\x6f\x66\xb1\x58\x14\x33\x78\x0a\xdb\x81\xb6\x8c\x6b\x0e\x8b\x21\xcd\xd1\xc4\xff\x0a\x7c\x86\x2b\x1c\xe2\xc5\xec\xe3\x60\x4d\x91\xba\x84\x46\x22\x6a\x2f\xd2\xa5\xdd\x58\xcc\xf0\x5b\x62\x47\xde\x8f\xb0\x12\xae\x14\xa6\xa5\xb0\xe5\x02\xa7\x2f\xaf\x2f\xcf\x15\xca\x56\xb5\x4f\xd5\x72\x49\xbd\xbb\x99\x90\x1b\x23\x5d\x0e\x2c\xd3\x6e\xb4\xa4\xb4\x2c\x8b\x19\xb4\x65\xec\x78\x9c\xc3\xe9\x55\x42\x13\x39\x17\x32\xb1\x2d\xa5\xb6\x16\x8a\xf6\xab\xc6\x59\xb6\x47\x63\x38\xa5\x8d\xec\x38\x54\x28\x47\x19\xa2\xe6\x7b\xf9\xd9\xc5\x0b\x37\x91\x53\x0b\x75\x1d\xcf\x51\x33\x82\x28\x54\x90\x72\x17\xa8\xd9\xd0\x90\x18\xa3\x0c\xa0\xc8\x59\xd7\xec\xd8\xa2\x1e\x21\x3d\x87\x37\x26\x6d\x39\x82\x82\x3d\xa5\xc4\xb5\x0b\x48\x6c\x24\xd8\xec\x5f\x3c\xea\x6f\x5c\xc7\xb1\x42\x79\x7f\x7b\x96\xfb\x57\x03\x8d\x03\xc3\xba\xd4\x7b\x1a\xe1\x42\x93\xdd\x53\x27\x21\x41\x02\x8c\x84\x24\x3e\xbb\xf7\x71\x7b\x34\xea\xf6\xa4\x6c\x2b\x94\x99\x59\x16\xc0\xbf\xcb\xbd\x71\xdd\xd3\x61\x18\xed\x66\xb3\xbe\xa4\x95\xe3\x6b\x89\x8a\x0a\x65\xb5\x5a\xad\x56\xe5\xb7\x71\xbb\xd0\xf8\xe1\xfd\xe9\x07\x02\x67\x6b\x29\x8e\x70\xc7\xbc\x05\x4e\xe0\x25\xed\x09\xfb\xc3\x71\x7f\xb0\xc2\x8b\x21\xdf\x4a\xd2\xef\x68\xae\xa1\x42\xf9\x70\xfb\x70\x7f\x0e\xbe\x26\x8e\x81\x3a\xae\x50\x46\x91\x2f\xbc\x35\xa5\xf4\x26\xd1\x5e\x80\x9e\x48\xa9\xa6\x94\x59\xd3\x8c\xce\xda\xfa\xf9\xde\x73\xd4\x62\x86\xd5\xc1\x2f\x60\xf1\x3f\xee\xa0\x91\x4c\x6e\xc8\xcb\xf6\x99\xf7\xec\x2b\xdc\xe5\x65\x14\xe4\x65\xc8\x3b\x69\xc4\x32\x5c\x80\x34\x8d\x77\x81\xd1\xe5\x77\x3f\x28\x3a\x31\xbb\x6a\xf2\xe3\xf8\x68\xc8\x27\x2e\x66\x47\x2e\x77\xbd\x27\xe5\x39\x92\x92\x3a\x83\xc6\xf9\x83\x50\x23\xde\x72\x3c\x6c\x9f\x0b\xa8\x87\x60\x3d\xdb\x02\xb0\xbc\x3f\x29\x4c\xa7\xf8\x1b\x00\x00\xff\xff\x1e\x93\x09\x2a\xb2\x03\x00\x00")

func testMockConfigfortestYamlBytes() ([]byte, error) {
	return bindataRead(
		_testMockConfigfortestYaml,
		"test-mock/configForTest.yaml",
	)
}

func testMockConfigfortestYaml() (*asset, error) {
	bytes, err := testMockConfigfortestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-mock/configForTest.yaml", size: 946, mode: os.FileMode(420), modTime: time.Unix(1498741549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testMockMockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xdf\x52\xe2\x4a\x10\xc6\xef\x7d\x8a\xa9\xb9\x0e\x21\x09\x09\x18\xaa\xce\x05\x82\x9e\xa3\x52\x68\x01\x6a\x9d\x58\x16\x35\x92\x16\x66\x99\x99\x84\xf9\x23\xcb\x5a\xbe\xcf\xee\x73\xf8\x62\x5b\x13\x88\x22\xee\xd5\x56\xb8\xcc\xd7\xdd\xbf\x4c\x77\xd7\x7c\x73\xff\x72\x84\x10\x42\xf8\x66\xdc\xc5\x6d\x14\x38\x9b\xaf\x2e\xd5\xeb\x01\xe1\x80\xdb\x08\x8f\xe7\x86\x0a\xbc\x0d\x8c\x74\x26\x39\x6e\xa3\x4d\xd5\xa6\xf2\xf6\x5c\xa4\xf0\xdd\xa6\xfa\xdb\xb4\x42\xbf\xa3\x22\xed\x51\x09\x53\x4d\x33\x61\xa3\xa7\xbb\xd1\x21\xa1\xa2\x47\x28\x5b\xe3\x36\xf2\xf6\xaa\xfe\x35\x4a\xef\xc9\x23\xa3\x34\xa1\x02\x52\x1b\x1f\xe5\x00\xe9\x5e\x82\xe5\x0d\x89\x86\x3d\x39\x08\xe7\x36\x62\xd5\x42\x7c\x2d\xfb\x00\x22\xa7\x73\xf2\xc8\x6c\x81\x96\x06\xb6\x7a\x0f\x9e\xe9\x14\xca\xd6\xd5\x62\xfd\xa9\xfb\x21\xcc\xa8\xd2\x20\xc7\xb4\x88\xfb\xe1\x71\x33\xf6\xa2\x20\x8e\xca\xea\xd1\xd8\xca\xdb\xaf\x93\xcc\x88\x14\xd2\xeb\x8c\x0a\xdb\x0e\x2e\x29\xfd\xab\x01\x6e\xa3\xd0\x6d\xf8\x5e\x99\x5a\xe6\xbc\x94\xe7\xbb\xa5\x29\x64\x7d\x5a\xcc\xe1\x1e\xcf\xb5\xce\xdb\xf5\xba\x6a\xb8\x84\x93\x1f\x99\x20\x2b\xe5\x4e\x33\x5e\x7f\x54\x8b\xb5\xa6\x1c\x18\xc9\x15\xa8\xfa\x13\x39\xa1\x26\xb9\x53\x22\x27\xd9\x32\x59\xca\x49\x30\x09\x3c\xbf\x55\xf3\xa2\x5a\xd0\x72\x79\x1e\xee\x2e\xa0\x02\xe6\xf1\x01\x98\x71\xf5\xcc\x86\x77\x00\xa6\x5f\x30\x0b\xe4\xc3\xfe\xce\x26\xdd\xca\xb6\x36\xe9\x1e\x62\x6f\x07\xa1\xc6\x87\xa0\x36\xbc\x92\x5a\xcd\xd6\xb6\xb4\x4f\x7b\xdb\xdc\xf9\xf3\x9e\xbd\xa3\x61\x18\x74\xbd\x28\x8e\xc2\x4e\x14\x97\xf7\x75\x60\xf8\xd5\xd3\x59\xc6\x58\xb6\x02\xa9\x76\x5c\xb2\xdf\xb1\xd7\x3d\xf2\xdc\x46\x23\x0e\xb7\x5a\xa7\x5f\x58\xc0\x87\x25\x10\x4d\xec\xc5\x46\xb8\x6f\x38\x15\x44\x4c\xad\x73\xc4\x71\x1c\x3b\x08\x8f\x81\xe7\x20\x89\x36\xd2\x8a\x2d\xcf\x6d\x59\xf5\x9c\x93\x19\xdc\x0c\xfb\xf6\x3c\xef\x3d\xd7\x8c\xaa\xad\x40\xe9\x9a\xff\x87\xee\x29\x9f\x7d\xed\x7b\x79\xe1\x2f\x64\x64\x96\x3c\x21\x9c\x5f\xac\xfe\x71\xbf\xe5\x33\x3b\xc6\xf1\xa8\xb0\xae\xb8\xd9\x08\xa3\xc0\x6b\x39\x1b\xef\xc4\x6d\xf4\x44\x98\x02\x07\xe1\xff\x0c\xa7\x29\xd5\xd6\x99\x9b\xa1\x83\xf0\xb5\x04\xa5\x36\x47\x0c\x62\x37\xf4\x9d\x72\x64\xe3\x75\x5e\xd8\xe4\xe8\xf2\xff\xc0\x92\x6f\x33\xa6\xc9\xac\xc8\x6b\xfa\x36\x6d\x40\x67\x73\xbd\x43\xfe\x78\x2a\xb6\x03\x28\x5a\xdd\x3b\xd0\xbb\x47\x9f\x19\xc6\x3a\x69\x6a\xff\x6e\xff\xd2\x93\x6f\x3f\x9f\x01\xa5\xa0\x50\x87\x31\xfa\xf6\x4b\x39\xa8\x70\x67\x07\xdd\x11\xc6\x32\x41\xc1\x41\x27\xa7\x1f\x2f\x95\x04\xd0\xa5\x93\x7f\x2d\x2e\xf3\xae\x25\x3c\x53\x58\x15\x27\xf9\x6a\xb8\x7f\x3b\xf6\xe5\x8a\x25\x57\x5c\x44\xd3\xf7\xb1\x57\x80\x14\x09\x5f\xf2\x64\x55\x1d\xd2\x08\x71\x41\x16\x3c\x99\x55\x88\xcc\x78\x74\xb9\xe0\x91\x57\x21\x32\xe7\x09\x5d\x8a\x5c\x6d\x90\x0f\x47\xaf\x0f\xbf\x03\x00\x00\xff\xff\xf8\x8c\x30\x81\xb6\x08\x00\x00")

func testMockMockJsonBytes() ([]byte, error) {
	return bindataRead(
		_testMockMockJson,
		"test-mock/mock.json",
	)
}

func testMockMockJson() (*asset, error) {
	bytes, err := testMockMockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-mock/mock.json", size: 2230, mode: os.FileMode(420), modTime: time.Unix(1498741549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/bloomsky.html": tmplBloomskyHtml,
	"tmpl/bloomsky.txt": tmplBloomskyTxt,
	"tmpl/bloomsky_body.html": tmplBloomsky_bodyHtml,
	"tmpl/bloomsky_header.html": tmplBloomsky_headerHtml,
	"tmpl/log_body.html": tmplLog_bodyHtml,
	"tmpl/log_header.html": tmplLog_headerHtml,
	"lang/en-us.all.json": langEnUsAllJson,
	"lang/fr.all.json": langFrAllJson,
	"test-mock/configForTest.yaml": testMockConfigfortestYaml,
	"test-mock/mock.json": testMockMockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lang": &bintree{nil, map[string]*bintree{
		"en-us.all.json": &bintree{langEnUsAllJson, map[string]*bintree{}},
		"fr.all.json": &bintree{langFrAllJson, map[string]*bintree{}},
	}},
	"test-mock": &bintree{nil, map[string]*bintree{
		"configForTest.yaml": &bintree{testMockConfigfortestYaml, map[string]*bintree{}},
		"mock.json": &bintree{testMockMockJson, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"bloomsky.html": &bintree{tmplBloomskyHtml, map[string]*bintree{}},
		"bloomsky.txt": &bintree{tmplBloomskyTxt, map[string]*bintree{}},
		"bloomsky_body.html": &bintree{tmplBloomsky_bodyHtml, map[string]*bintree{}},
		"bloomsky_header.html": &bintree{tmplBloomsky_headerHtml, map[string]*bintree{}},
		"log_body.html": &bintree{tmplLog_bodyHtml, map[string]*bintree{}},
		"log_header.html": &bintree{tmplLog_headerHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

