// Code generated by go-bindata.
// sources:
// tmpl/bloomsky.txt
// tmpl/bloomsky_body.html
// tmpl/bloomsky_header.html
// lang/en-us.all.json
// lang/fr.all.json
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplBloomskyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x4b\x6e\x83\x30\x10\x86\xf7\x39\xc5\x28\x52\x97\xed\x01\xba\x2c\x88\xc0\x22\x0f\xe5\xd5\xb5\x1b\x26\xc1\x2a\x06\x84\x4d\xdb\x08\xf9\x4e\x3d\x43\x4f\x56\x0d\x0e\x10\x62\x27\x51\xeb\xed\xff\x7d\xf3\x8f\x8d\xc4\xa3\xeb\x8c\x5e\xd2\x3c\x17\xf2\xfd\x38\x72\xc7\x75\xbd\x86\xf1\x9a\x0b\x94\x8a\x89\x62\xac\x35\x3c\x83\xeb\xd4\xf5\xd3\x04\x15\x81\x2b\x02\xb5\x36\xa6\xc7\xd5\xf1\xba\xd4\x8b\xc4\xb5\x8e\x8f\x1f\x7c\x87\x10\xc5\x6e\xd1\x08\x06\x8a\xfc\x56\x9a\x55\xe2\x0d\x4b\x98\xef\x21\xc8\xd3\x34\xff\xc4\x52\x5e\xea\x46\x9c\x55\x62\xbe\xef\x98\x56\x8f\xb2\x18\xbf\x60\xb3\xbd\xb1\xab\xd1\x1b\x70\xb3\xed\x6a\xf9\x21\x51\xb7\x2f\x48\x62\x24\x1b\xb0\xb5\x5e\x79\x16\x83\xcf\x4b\xdc\x29\x9e\x67\xb6\x6e\xaa\x88\xea\xa0\x81\x3a\xa9\xa4\xbb\xb4\x17\x09\x99\x16\x89\xd6\x30\x2d\x12\xa3\xae\x2a\xa9\x18\xcf\x30\x06\x02\xce\x7d\xa3\x75\x39\xc5\xab\x02\x31\xbe\x18\xf0\xa7\x6e\x49\xa6\xfc\x77\xf3\xb9\xbe\x64\xdc\xf1\x48\xf6\x1b\x13\xa7\x35\xf4\x12\xf8\x8c\xa7\x47\xbb\x8f\xb2\x26\x8a\x88\xe7\xd9\xd5\x9a\x1e\xb7\x48\x58\x32\x85\x43\xbc\xa7\x29\xb3\x0d\x6b\x9b\xcb\x75\xa6\x42\x6b\x10\xe2\xce\xad\x7b\xc9\xe2\x1d\x4b\xd9\x8b\x0d\xac\x35\x8a\x02\x4b\xa6\xaa\xb2\xf1\x82\xf1\xb5\xbe\x33\x30\x60\x49\x89\x59\x82\x5c\x69\x0d\x3f\xdf\x81\x73\x92\xe7\xfa\x5c\xd6\x28\x0f\x53\xc9\x2b\xd9\xcc\xf1\xcc\x9c\xb0\x12\x3c\xbe\xf3\xdb\x30\x73\x5a\x52\x6b\x78\x30\xee\xa2\x44\x29\x4f\x0b\x44\x59\x78\x38\x0d\x30\x78\x1b\x52\x70\xca\x6d\x2b\x5c\xb0\xb6\x75\x68\x85\x0b\x66\xe2\xd1\x6f\x00\x00\x00\xff\xff\xbd\x15\x0d\x9d\x48\x05\x00\x00")

func tmplBloomskyTxtBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyTxt,
		"tmpl/bloomsky.txt",
	)
}

func tmplBloomskyTxt() (*asset, error) {
	bytes, err := tmplBloomskyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky.txt", size: 1352, mode: os.FileMode(420), modTime: time.Unix(1497300991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomsky_bodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x72\xdb\xba\x11\xbe\xf7\x53\xe0\xf0\x4c\x7b\x47\x51\x96\x94\xd3\x99\x53\x49\x17\x89\x27\xb6\x3b\xcd\xcf\xc4\x4e\x32\xcd\x4d\x66\x49\xac\x48\x44\x04\x40\x03\xa0\x14\x25\xa3\x77\xea\x33\xf4\xc9\x3a\x00\x45\x8a\x92\x28\xff\xc4\xb4\xe2\xb8\xcd\x4c\x12\x12\xc4\xee\x7e\xf8\xbe\xc5\x82\x02\x38\x0c\x25\x5d\x8c\x8f\x8e\x08\x21\x64\x28\x60\x46\xa2\x14\xb4\x1e\x79\x02\x66\x21\x28\x52\xfc\xe7\x33\x31\x43\xa5\xb1\xbc\x9d\xb0\xaf\x48\x7d\x23\x33\x6f\xec\x0c\x9d\x31\x65\x95\x71\x24\x85\x01\x26\x50\xd5\x9e\x6f\xf7\x59\xb9\x4a\x10\xe8\x4e\x3f\xd7\x37\xcc\x8d\x91\x82\x98\x45\x86\x23\xaf\xb8\xf1\xb6\x8c\x8d\x8c\xe3\x14\x49\x24\xd3\x14\x32\x8d\xd4\x23\x14\x0c\xac\x9a\x2d\x8c\xa2\xbd\x6c\x06\x15\xa3\x19\x79\xbf\x17\xd6\x1e\x01\xc5\xc0\xc7\xaf\x19\x08\x8a\x74\xe4\x4d\x20\xb5\x7d\x5d\xab\x1d\x81\x92\x69\x15\x6a\x7b\x20\x3a\x03\x51\x82\xd1\xca\x97\x22\x5d\x78\xe3\xcb\x02\x8e\x80\x19\x8b\xc1\x30\x29\x86\x81\xed\x77\x8d\x29\x8b\xa4\xf0\x9d\xfb\x43\x75\x1d\x06\x05\x95\x0d\x84\xc3\x16\xbb\xa1\x02\x41\x3d\x92\x28\x9c\x8c\xbc\xdf\xbd\xf1\xf3\x54\x4a\xae\xa7\x8b\x61\x00\x5b\xc1\x03\xca\x66\x0d\x4a\x33\x5a\xd1\xb7\xce\x8c\x42\x92\x32\x93\x2a\x89\x1a\xf0\xe4\x69\x0d\x50\x69\x20\x60\xd6\xd0\xd7\xf5\x4f\x59\xd9\x1f\x22\xc3\x66\xe8\x8d\x87\xb0\x46\xff\xfd\xfb\x25\xf1\xce\x24\x47\x6f\xb9\xb4\x23\x18\x06\x29\xdb\xeb\x68\x6d\x99\x18\x93\xe9\x3f\x83\x20\x66\x26\xc9\xc3\x4e\x24\x79\x90\x81\x51\x2c\x9a\x42\xca\x44\x10\xae\x38\xf1\xa3\x94\xa1\x30\x7e\x2c\x3d\x52\xe6\xd9\xe7\x30\x05\x31\xf5\xc6\xa7\xce\xf4\x07\x62\x52\xd0\x49\x28\x41\xd1\x4e\x19\xc6\xc5\xdf\x8d\x50\x2a\x43\x4e\x4a\x8b\x75\xb4\x5d\x5e\x83\x3c\xbd\x56\xbf\xda\xed\x30\x10\x50\x5e\xfe\xe6\xfb\x41\x47\xc0\xac\xd2\x8c\xf8\x7e\x59\x38\x6e\x98\xfb\xf5\xe7\x4a\xce\xaf\xa9\x0a\x91\x4c\x7d\x4e\xfd\x7e\x53\x3e\x30\x1e\x13\xad\xa2\x91\x17\x68\x03\x86\x45\x15\xf9\x9d\x4c\xc4\x1e\x99\x33\x6a\x92\xd1\x1f\xdd\xbf\x34\x98\x66\xa5\xff\x14\x81\xae\x72\xa1\x22\xad\x90\x8e\x30\x41\x4e\xa5\x4b\x8e\xac\xc1\x43\x99\xcf\x86\x71\xd4\x06\x78\x66\xbd\x74\x4e\xd1\x5c\x32\x8e\x17\xb6\xc1\x5a\xee\xcc\x83\x4d\xe0\x86\x67\x9d\x98\x4d\x3c\x02\xa9\x19\xad\x01\x30\x1e\x7b\xce\xb9\x1b\x10\xe3\x71\xd7\x23\x09\xb2\x38\x31\x23\xaf\xd7\xed\x96\x43\x73\xd7\x37\xcf\x3c\xa7\x93\x85\xcb\x69\x7f\x2d\xd1\x35\x64\x3f\xf3\x9a\xb2\x24\x54\x4d\xad\x25\x0d\x32\x37\x59\x6e\xbc\x71\x89\x60\xb7\xa7\x81\xd0\x96\xe6\x22\x52\x71\xe3\xfe\xf5\xb5\x51\x2c\x43\xba\x6f\x16\x1b\xd5\xfc\xa0\x78\x48\xc7\x1b\x95\x2e\x4e\x17\x59\x62\xcb\x1d\xa9\xae\x7c\x0e\x99\xcf\x41\x4d\x71\x5d\xff\x88\x13\xfc\x05\x33\x0b\xa7\xaf\xa1\xd7\x87\xd8\xfb\x70\x83\x82\xc8\xba\x5b\x25\x81\x75\xbd\x57\xff\xca\xf2\x7e\x81\xff\x2a\x42\x9d\xfd\xfd\x07\xbc\x0f\x83\x7d\x9c\xde\x48\xf6\xed\x98\x10\x36\x55\x1d\x15\xe7\xfa\xb5\xbd\x7e\xb4\x54\x3c\xac\xf7\x7b\x10\x3d\xac\xd6\xae\x39\x23\x73\xe6\xeb\x5c\x68\x34\x36\x81\xd9\x2a\x7b\xcf\x05\xc5\xaf\xe4\xfd\x07\x6f\xb9\xbc\xef\x00\x2b\xe1\xf2\x99\x67\xbd\xdb\x0c\x76\xee\xdf\x7f\x78\xb4\xca\xb5\xc9\x2d\x87\x34\xf5\x23\x05\x13\xe3\x03\x9d\x31\x2d\xd5\xa2\xce\xf4\x47\x26\x28\x39\x61\x0a\x23\xfb\x0e\xd7\x62\xc5\x98\x33\x41\x29\x53\x65\xd1\xb0\x71\xaa\x30\xff\x27\x7e\x45\xfc\x69\xae\x4d\xcb\x9c\xc7\xd6\x65\x8d\x74\x1b\xe2\x55\x96\x3c\x34\xe5\x75\x0c\x16\x02\xd7\x3b\x20\xf4\x8d\x18\x9a\x1c\x4d\x79\xb2\xed\x69\xca\xef\x33\x9c\x03\x6a\x7c\x91\x6b\xf7\x7a\x48\x89\x85\xde\xa2\xd0\x3a\xd7\xc6\x8a\x5d\x32\x53\x05\xb2\x71\x2e\x32\x44\x7a\x48\xc9\x4b\x34\x6b\xcd\x1b\xf0\xdc\x51\xfd\xd2\x67\x4d\xfe\x5d\xa7\x8f\x26\x11\x14\x30\x41\x95\xcc\xea\xe2\xbf\x03\xd6\x66\x3d\xb5\x21\x56\xaf\x1d\xd6\xb3\x5b\x18\x9f\x7a\x0d\xdd\x47\x2b\x39\x01\x96\xb6\xf9\x7a\xeb\x02\x39\x9f\xab\x5c\xb3\x51\x5c\x90\xf3\x07\x5f\xac\x76\x41\x70\x5e\xbd\xa9\x54\x38\x5e\xf1\xc7\x9d\xe9\xe4\x1d\x18\x24\xff\x04\x6d\x48\x22\x73\xd5\xb2\x36\x0a\x0c\xd6\xa5\xb1\xc1\x0e\xac\x8c\x85\x60\x85\xd9\x04\xf1\x58\x64\x31\x09\x2a\x2e\x39\x9a\xe2\x87\x60\xa9\xcc\x25\xf2\x0c\x15\x98\x5c\x61\x8b\x8a\x18\xe4\xd9\xa4\xda\x12\x58\x87\x78\x09\x89\x42\x91\x20\x33\xcb\x25\xf9\xcf\xbf\x5f\x1e\x48\x1d\x0b\x27\x6a\x80\xf3\x02\x53\xcd\x72\xed\xb0\xbc\x78\x0c\x22\x25\x39\x67\xd4\xfd\x90\x5e\x2b\x74\x56\xb6\x2d\x97\xc4\xed\xb5\x4d\xa3\xb6\x78\x59\x87\x2b\xa8\x29\x43\xfd\x2f\xbc\x7d\x87\xa0\x76\x67\xc3\x5b\x85\x5a\xb7\x3b\x15\xb2\x95\x4b\x26\x92\xb8\xe4\xb9\x0c\x73\x2e\xce\xe2\x83\x95\xa8\x12\x48\x92\xc1\x36\x8e\xb3\xb7\xf0\x93\x8a\xd4\x4d\xbb\x57\x78\x95\x43\xca\xbe\xd5\x37\xaf\x3e\xc8\xd4\x40\x8c\x6d\xd1\x32\x2b\xdc\xb5\x4b\xc9\xad\x20\x3c\xc4\x2c\xf8\xcd\xf7\x0b\xd6\x37\x76\xcf\xff\x0c\x02\xdd\xef\x00\x87\x6f\x52\xc0\x5c\xbb\x6d\xf3\x50\x4f\x17\x86\x71\x74\x7b\xd7\x3a\x98\xc0\x73\x96\x7f\xfa\xa8\x45\x06\xf2\xea\xd3\x95\xfa\xdc\xfb\xdc\xeb\x1e\xff\xcd\xef\xfe\xe1\x77\x07\x1d\x9e\x0d\xbc\xf1\x0f\xec\xdc\x1e\x5f\xb3\x73\x4b\x76\x0e\x4e\x6a\x7f\x76\x77\x50\xab\x21\xde\x19\x44\xef\xba\xed\xe3\x16\xe3\xf4\x0f\x14\x67\x70\xa0\x38\xcf\x6e\xbb\xed\x5e\x85\xb0\x79\xe9\xfb\x0f\x55\x0b\xe2\x54\x86\xb8\xb5\x89\xfd\x3a\xe7\x21\x2a\xf2\x66\x42\x5e\xca\x34\x95\x73\x54\xba\xc5\xda\x3d\xa9\x7c\xae\xaa\xc3\xeb\x9c\xbf\x99\x54\x91\x7e\xc5\x02\x71\x5f\x15\x6a\x7a\x44\x32\xde\x52\xe3\x04\x67\x2c\x42\x72\xde\xe6\x46\x06\x75\x3e\x4b\x01\x8a\x08\xe7\x27\xbf\x18\xf5\xc3\xc0\x1d\xf6\xec\x3b\x58\xda\x69\xac\x7e\x56\xe0\x44\xa1\x4e\x6c\x9d\xb6\x54\x17\x67\x4b\x47\x9b\x9e\x5b\x38\xf2\x1a\x34\x9d\x2f\x3e\xc8\x89\x55\xd3\x68\x77\x46\x3d\x91\x8a\x83\x31\x48\x2f\x19\xc7\x67\xd5\xc0\xf7\xda\xcd\x18\x45\x59\x2c\xe6\x8c\xae\x0b\x55\xbf\x57\x3f\x38\x1c\x74\x3d\x52\x7e\xc6\x40\x52\x29\xdd\xa9\xe6\x50\xcb\x5c\x45\x58\xd4\x45\x2e\x67\x0c\xed\x52\x47\x6a\x75\xb0\xf0\x58\x7c\x75\xe1\xe2\x04\x6e\x2d\xfc\x97\xcc\x15\x09\x95\x9c\x6b\x54\x84\x4a\xd4\x44\x48\x43\x74\x9e\x65\x52\x19\x62\x12\x24\x05\x28\x03\x71\xe7\x68\x18\xb8\x9b\x76\xe7\xea\xdd\x99\x1c\xdc\x91\xc9\xe3\xd6\x99\x3c\x7e\x22\x4c\xf6\xef\xc8\x64\xaf\x75\x26\x7b\x4f\x84\xc9\xde\x1d\x99\xec\xb7\xce\x64\xff\x89\x30\x79\x7c\x47\x26\x07\xad\x33\x39\xf8\x09\x4c\xae\x17\xd6\xdb\xac\x8a\x64\x73\x59\xdc\xd3\x7b\xd5\x53\xc9\x79\xd5\xab\xfe\x0d\x50\xf1\xb4\xfa\xae\xa7\xf6\xd9\x8f\x7d\xf2\x5c\x4a\xa3\x8d\x82\x8c\x44\x52\x21\xf9\x07\xcc\xe0\x22\x52\x2c\x33\x8d\x83\x1a\x8d\x46\xfb\xda\xef\xf1\x77\x0d\xdb\x22\x7a\x9b\x42\x84\x94\x40\x41\x37\x0a\x4a\xe4\xc4\x5d\x52\x19\xe5\x1c\x85\x21\x5a\xba\xfb\x0c\x62\xb4\x92\x03\x25\x13\xd0\x66\x35\x34\xe7\x47\xbb\x21\x6c\x7e\x6e\xf4\x45\x07\x5f\xae\x72\x54\x0b\xbf\xdf\xe9\x75\x8e\x3b\x9c\x89\xce\x17\xed\x95\x84\x15\x26\xe3\xa3\x61\xb0\xfa\xa4\x72\x18\x24\x86\xa7\xe3\xff\x06\x00\x00\xff\xff\x88\xbc\x11\x86\x62\x29\x00\x00")

func tmplBloomsky_bodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomsky_bodyHtml,
		"tmpl/bloomsky_body.html",
	)
}

func tmplBloomsky_bodyHtml() (*asset, error) {
	bytes, err := tmplBloomsky_bodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky_body.html", size: 10594, mode: os.FileMode(420), modTime: time.Unix(1497384191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomsky_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\x5d\x73\xda\x38\x17\xbe\xef\xaf\x38\xeb\x9b\xa4\xe9\xda\x0e\x1f\x99\xdd\x4d\x21\xb3\xdd\x84\x6d\xd3\x49\x93\x4e\x48\xdb\x77\xa7\xdb\x0b\x61\x1d\xb0\x1a\x4b\xf2\x4a\x32\x94\xe9\xf0\xdf\xdf\x91\x0d\xc1\x80\x6d\x20\x84\x4e\x73\x15\xc5\xe7\x3c\xe7\x79\xce\x87\x64\x63\xd2\xfa\xe5\xe2\xe6\xfc\xee\x9f\xf7\x1d\x08\x0d\x8f\xe0\xfd\x87\xbf\xae\x2e\xcf\xc1\x71\x7d\xff\x53\xe3\xdc\xf7\x2f\xee\x2e\xe0\xcd\xdd\xbb\x2b\x68\x7a\xc7\x35\xdf\xef\x5c\x3b\xcf\x00\x00\x9c\xd0\x98\xf8\xd4\xf7\x47\xa3\x91\x37\x6a\x78\x52\x0d\xfc\xbb\x5b\xdf\x22\x34\x7d\x6d\x14\x0b\x8c\x47\x0d\x75\xce\x9e\xb5\x52\xd4\x88\x88\x41\xdb\x41\xe1\x9c\x3d\x7b\xd6\x0a\x91\xd0\xb3\x14\xa5\xc5\xd1\x10\x08\x42\xa2\x34\x9a\xb6\x93\x98\xbe\xfb\xbb\x93\xbf\x64\xa3\xb8\xf8\x5f\xc2\x86\x6d\xe7\x7f\xee\x87\x57\xee\xb9\xe4\x31\x31\xac\x17\xa1\x03\x81\x14\x06\x85\x69\x3b\x97\x9d\x36\xd2\x01\x2e\x78\x0a\xc2\xb1\xed\x0c\x19\x8e\x62\xa9\x4c\xce\x78\xc4\xa8\x09\xdb\x14\x87\x2c\x40\x37\x5d\xfc\x0a\x4c\x30\xc3\x48\xe4\xea\x80\x44\xd8\xae\xcd\x80\x7e\x71\x5d\xb8\x0b\x11\x48\x4f\x0e\x11\x1a\x90\x02\x1b\x32\xd0\x70\xc4\x13\x6d\x8e\x20\x90\x1c\xa1\xcf\x94\x36\xc0\x04\x98\x10\xc1\x6a\x7b\x09\x44\x8c\x41\x9a\x10\x55\xba\x9e\xc5\x06\xeb\x94\xf9\x1c\x91\xbe\x41\x75\x64\x5d\x34\x66\x90\xae\xbb\x4a\x9f\xa2\x0e\x14\x8b\x0d\x93\x22\xa7\xe0\xaf\x48\x4a\xae\xef\xc7\x10\x44\xcc\xc2\x0e\x64\x81\x72\x92\x98\x50\xaa\x9c\x57\x4c\x6c\x59\xee\x49\xc4\xc4\x9f\x03\x4e\x58\xe4\x05\x92\xdb\x7a\xa4\x9e\x86\x99\x08\xcf\x96\x91\x5f\xcb\x96\x9f\x5d\x79\x36\xcf\xc8\x15\x31\x98\xe9\x88\x59\x84\x14\x88\xa0\xc0\x99\x60\x7d\x86\x14\xce\xbb\xdd\xb9\x92\x88\x89\x7b\x50\x18\xb5\x1d\x6d\xc6\x11\xea\x10\xd1\x38\x10\x2a\xec\xb7\x1d\x5f\x1b\x62\x58\xe0\x07\x5a\xfb\x3d\x29\x8d\x36\x8a\xc4\x1e\x67\xc2\x0b\xb4\x76\x20\x50\x52\x6b\xa9\xd8\x80\x89\xb6\x43\x84\x14\x63\x2e\x13\xed\x54\x00\x43\x25\xb2\x6b\x42\xe4\xf8\xe4\xf8\x23\x24\xb6\xcc\x2e\x0b\xa4\xd0\x0f\xe8\x3b\xa1\xb8\x23\x26\x68\x0e\xea\xd9\x34\xf5\x59\x27\x80\x56\xc1\xdc\xf9\xab\xf6\xbf\xfe\x97\xa0\x1a\xbb\x0d\xaf\xee\xd5\x52\xaf\xaf\xa5\xea\xc0\x39\x6b\xf9\x19\xcc\xc6\xf5\x7c\x4b\x86\xa4\x9b\x45\x7e\x28\x6b\x09\x93\xc5\x2a\x7e\xd5\xb0\x05\x8f\x34\x41\x19\xbc\xfd\xe9\x49\x3a\x86\xef\x0f\x4b\xfb\x13\x13\x4a\x99\x18\xb8\x46\xc6\xa7\x70\x72\x1c\x7f\x7b\xf9\x70\x79\xf2\xf0\xdb\xc3\x2f\x9e\x36\x44\x19\x54\xae\x41\x1e\x47\xc4\x60\x31\xda\x29\x34\x8f\xe3\x6f\x50\x3b\xc9\xc3\xd9\x1f\x83\xdf\x8c\x4b\x22\x36\x10\xa7\x10\xa0\x30\xa8\x2a\xc3\xb1\xbe\x22\x7c\x39\x46\x4f\x2a\x8a\xea\x14\x84\x14\xb8\xec\xdd\xf2\xa7\x8a\x73\x75\xb0\xbb\xec\x09\xe8\x90\xf1\xb4\x04\xb7\xa8\x63\x29\xa8\x4d\x64\x5f\x2a\xb8\xec\xfc\x0e\x3a\x89\xed\x66\x06\xb2\x3f\x35\xc6\x08\x39\x0a\xa3\xb3\x9a\x21\x65\x04\x6c\x3b\x30\xcc\x6d\x27\x16\xfa\xd3\xab\xdb\xeb\xcb\xeb\xd7\xa7\x79\x50\x2a\x51\x8b\x03\x03\x23\xa9\xee\x81\xf5\x61\x2c\x13\xb0\xdb\x65\xba\x8d\xc5\x64\x80\x30\x64\x04\xfa\x2c\xc2\x53\xdf\x5f\x80\xfb\xcc\xfa\x10\x19\xb8\xec\xc0\x1f\x5f\x66\x35\x5b\x68\x0a\xbb\x6b\xeb\x53\xdf\x97\x5a\x7b\x9c\x7c\x0b\xa8\xb0\x7b\x4d\x7a\x3a\x9c\xe8\x90\x0d\xfd\x86\xf7\x9b\xd7\x98\xaf\x1f\x1a\x26\xd7\x17\x9b\xc3\xaa\x4c\x93\x5f\xf3\x9a\x5e\x7d\xb6\x2a\x83\x6c\xfd\xf2\x19\x05\x65\xfd\x2f\x56\x50\xbe\x9d\xe7\xcd\x67\xe7\x4f\x8e\x3c\x42\x69\x67\x88\xc2\x5c\x31\x6d\x50\xa0\x3a\x74\x22\x49\xa8\xf3\x2b\xf4\x13\x11\xd8\x1d\xf9\x10\x87\xe6\xf9\x52\xcd\x87\x44\x81\x4c\x4c\x9c\x18\x68\x03\x95\x41\x62\xcb\xe3\x0d\xd0\x74\xb2\x4a\xfd\x35\xbe\xa4\x87\x4e\x66\xe1\x3c\x7f\xb9\xe2\x3b\xd2\xab\x7f\x8b\x15\x13\x16\xee\x21\x2e\x47\xad\xc9\x00\x97\x63\xcf\xec\x69\x3e\x74\xa0\x90\x18\x9c\x46\x3f\x74\x28\x1b\x2e\x87\xb5\x3f\xd4\x63\x42\xa0\x4a\xcf\xf9\x36\x4c\xf1\x57\xcd\x32\xde\x1e\x89\x63\x14\xf4\x3c\x64\x11\x3d\xa4\x4b\x68\x93\xc5\xa5\x96\xc1\x3d\x5a\xf2\x02\x47\xf0\x09\x7b\xdd\x74\x7d\xe8\x7c\xff\xee\x4d\x26\xcb\x4c\x7c\xff\xe6\x1a\x6e\xde\x77\xae\x0b\x20\x3c\x29\x64\x8c\x22\x9f\x86\x82\xf4\xcf\x91\xb2\xac\x1d\x3a\x16\xae\x48\x71\x66\x95\x19\x4d\x23\xc4\x4a\x1a\x19\xc8\xe8\xf9\x26\xc6\x0a\x09\x1d\x77\x0d\x31\xb8\x91\x79\xa2\x4a\x60\xa7\xd7\x35\x0a\xdb\x17\x31\x0a\x67\xd5\x6e\xb2\xf2\x17\xdf\x87\x9b\x6b\xe8\xdc\xde\xde\xdc\x16\xe7\x0a\x95\x92\x6a\x21\x59\xf6\x0f\x45\xe9\xb2\x47\x8e\x8c\xd0\x4b\x0d\xa6\x66\xab\xe9\xca\xc4\x14\x5d\x2d\x2c\xb8\x27\x45\x10\x49\x8d\x1b\x94\x6b\x5a\xa7\x56\xef\xec\x5c\x0a\x81\xa9\x2d\xa4\xce\xd4\x6b\xf9\xbd\xb3\xe5\xe2\x4d\x96\x7b\xc6\x66\xe2\x5d\xa7\xdb\x7d\xf5\xba\x53\xcc\x64\xda\xce\x1b\x70\xb1\xd3\x13\x24\x4a\xa1\x30\xd4\x9e\x19\x59\xdb\x5e\x10\x83\x87\x05\x39\x49\x67\x8d\x18\x34\x8c\x5b\x53\xe7\xfb\xf7\x3b\x70\xae\x88\x36\xd0\x1d\x8b\xc0\x99\x4c\x4e\xc1\x81\x17\x79\x40\xbb\x11\x64\x68\xf0\x02\x1c\xdf\x81\x17\x85\x3d\x71\xb8\xe4\xf2\x4e\x0a\x13\xa6\x3e\xb5\x6a\xc7\x25\xbf\xbf\x93\x28\xfa\x07\x89\xca\xc2\xc1\x9f\xb0\xa1\xdf\x1b\x99\x28\x9d\x39\x9d\x6e\xe8\xf2\x8e\x89\xc4\xe0\x96\x4e\x5d\x0c\xa4\xa0\xba\x28\xb7\xa5\x5b\xa7\xc2\xbe\x42\x1d\xda\x9c\x3b\xcf\x17\x76\xad\x59\x29\x56\xc1\x66\xb3\xe8\x4c\xdb\xa4\x68\x3f\xf0\xfd\xd9\x20\x44\x72\x60\xfb\xc3\xa3\xc4\x90\xe7\xd3\xf3\x79\xd1\x12\x7a\x09\x8b\x68\x1a\xb0\xb0\x29\xbe\x6a\x69\x37\xaa\xb7\xdd\x9b\x6b\x2f\xb6\x8f\x36\x73\xbc\xe2\x2e\x22\xf9\x4e\xb3\xde\xde\x05\x31\xc4\xbb\xeb\xc2\x11\xd4\x8e\x8f\x8f\x4b\xdc\xb8\xed\x0b\x0d\x6d\xf8\x7c\x90\xf6\xde\x5b\x22\x9c\xc9\xe4\xe0\x57\xc8\x96\x7f\x63\x2f\xbf\x7c\x47\x54\x7e\xf9\x2a\x56\x8b\x57\xc7\xf9\xe5\xdb\x44\x2c\x2e\xa3\x05\xdf\x64\x90\x5f\x76\x31\xce\x2f\x6f\x02\x93\x5f\x5e\xcb\x61\x7e\x79\x81\x76\x34\x0e\xbe\x14\x4b\x1a\x23\xb1\xdb\x16\x59\x6c\xdf\x0a\xf9\xf6\xb8\x4a\xd3\xf0\x99\xe4\x46\xa5\x04\x7d\x3a\xd4\x64\x3e\x87\xc5\x76\xa1\x4c\x1e\x58\x4c\x87\xa1\x84\x02\x13\x33\xbb\x87\x09\x28\xb6\xd4\x18\xcc\x2c\x2b\xda\xde\x5a\xf6\xa5\xe2\xc4\x18\xa4\x77\x8c\xe3\xf1\xb4\xb1\xe1\x05\x1c\xc0\x01\xbc\x98\x8a\x9e\xad\xd2\x74\xcd\x16\x29\xeb\x17\x70\x70\x9a\xda\x31\xf1\xf0\xbb\xc6\x60\x83\x50\xb5\x59\x28\x17\x6a\x15\xe1\xb6\x98\xd5\x45\xf8\xa5\x71\x5d\xbc\xb8\x01\xbf\xfa\x9c\x5f\x7d\x0f\xfc\xea\x55\xfc\xea\x1b\xf0\x6b\xcc\xf9\x35\xf6\xc0\xaf\x51\xc5\xaf\xb1\x01\xbf\xe6\x9c\x5f\x73\x0f\xfc\x9a\x55\xfc\x9a\x1b\xf0\x3b\x99\xf3\x3b\xd9\x03\xbf\x93\x2a\x7e\x27\x2f\x57\xf7\xf9\x52\x58\x7b\xc8\x68\x43\x78\x5c\x85\x78\xbc\x05\xcf\x80\x99\xf1\x12\x56\x7a\x08\x9c\x33\x33\xbe\x26\x45\x27\x5a\x29\x54\xf6\xb1\x56\x11\xd8\x45\x7a\xe5\xf2\x62\xab\xfc\x45\x91\x1c\xa1\xd2\x45\x78\xd7\x09\xbf\xe9\xff\x3d\xb3\x48\x6f\x30\xd2\xfd\x7d\xee\x34\x99\x38\x05\x69\x65\x7d\xc8\x1d\x71\xd7\x6c\x10\x96\xde\xc5\x97\x12\x13\xd6\x6b\x89\x94\xd3\x62\x10\x44\x44\xeb\xf6\xbf\xce\x88\xc1\x88\xb9\x5c\x4a\xe1\x8e\x88\x60\x62\xe0\x06\x0a\xb5\x7d\x8e\x77\x1b\xff\xda\x27\x42\x76\x96\x91\x4d\xc3\x5b\xa2\xab\xf7\xdc\x80\x91\x5e\x7e\xa2\x7f\x22\x62\x94\x8c\x5d\x9d\x08\x31\x5e\xe0\x72\x91\x9e\xc0\x05\x4c\x56\x2b\xf6\x90\xc3\xae\x91\x8a\x7b\x1f\x3e\x5e\x0a\x8a\xdf\xa0\xd5\x86\xfa\xd6\xb9\x4c\x86\x45\xd5\x5d\x04\xb6\xf7\x9c\xb5\x5a\x46\x33\x92\x23\x4b\x33\x2d\xf8\x8a\xb2\x20\x92\x09\x9d\xc9\x2a\x4b\xea\x16\x72\x9a\x7b\x97\xc3\x91\xb2\x84\x97\x2b\xb2\xb5\xda\x48\xd5\xbe\x89\x86\x6c\x10\x56\xd3\xcc\xb7\x54\x61\x1b\xad\x4b\xfc\x27\x26\xe8\x05\x53\xd3\x67\xb0\x76\x1b\x9c\x6b\x67\xeb\x02\x8c\x98\xa0\x94\xa9\xe5\x21\x98\xde\x0a\x2a\x63\x45\xc0\xaa\x00\xeb\x06\x46\x8e\x88\xa2\xda\x3d\x76\x29\x0e\x76\xec\xa2\x02\x31\x9d\x3d\xa9\x49\x57\x1d\x6d\x37\x92\x35\xc2\x9a\x27\x7b\x51\xf6\xc4\xc2\x36\x92\xf2\xc7\x7e\x8a\xd4\x7d\x62\x2d\x5d\x99\xac\x14\xa9\x5a\x58\xad\xb1\x9f\x22\x75\xf7\x24\x6c\x8d\x9a\xdf\xf7\x54\xa7\x4f\xfb\xac\xd3\x27\xdc\xa4\x05\xeb\xf5\xfd\x54\xea\x89\xa5\x6d\x28\xe6\xb7\x3d\xed\x7a\x4f\xac\x66\x71\xd7\xdb\x4c\x5b\xa3\xb6\xa6\x50\xeb\xcf\xa6\x6e\xa2\x0d\x61\x02\xa9\x55\xd8\x8d\x11\xa9\xbd\x3f\xa8\x6d\x2d\x4d\x27\xda\x58\x6e\xe5\x87\x6f\x41\x24\x7b\xe4\xf2\xd8\x0f\x4b\x0e\x5f\x8b\xe7\xf6\x90\x24\x7d\xa9\x8c\x7b\x5c\x2a\x73\x6d\xce\x07\x89\x5e\xbe\x7b\x5c\xaa\xed\xeb\x44\x9b\x47\xd2\x29\xfe\x0c\xbc\x8a\x8f\xa5\xc3\x0b\x6f\xfe\x17\x09\xf1\xec\xf6\x9f\xfb\xfa\x47\x30\xba\xe7\xe1\x7a\x4a\xf7\x3c\x4c\xa9\xdc\xf3\x3d\xa7\x69\xd6\x4f\x55\x79\x5a\xed\xa8\x1f\x94\xb1\x19\xb9\xca\x94\xad\xb2\x7b\xca\xe4\x6d\xb6\x6d\x15\x4f\x77\xe3\x27\x9c\xee\xda\xe3\x9b\x77\x2f\xe3\xbd\x03\x9f\x3d\x8d\xf7\x8e\x8c\xf6\x33\xde\x8f\x25\xf5\x43\xc6\x7b\x57\x72\xfb\x1e\xef\x0a\x7e\xbb\x8c\xf7\x6f\x3f\xe1\x78\xd7\x7f\xae\xc3\xbb\xfe\xd3\x4d\xf7\x8e\x8c\xf6\x33\xdd\x8f\x25\xf5\x43\xa6\x7b\x57\x72\xfb\x9e\xee\x0a\x7e\xf6\xbe\x7c\xdd\x6c\xdf\x12\x96\x3e\x68\x1c\x6f\x3d\xcd\x8a\x30\x51\xf2\x88\x51\xf8\x48\xb1\xc1\x67\x5c\x8f\xfa\x24\xae\x94\xc7\x3f\xa8\x0b\x89\x24\xbc\xa7\x30\x8a\xc8\xb7\xaa\x07\x9a\x0d\xd2\x76\x41\x58\x34\x7e\x7c\xee\xa8\x75\x5f\x26\xee\x3e\x65\x56\x8a\x22\x14\x6a\xb0\x6d\xc6\xc4\x4e\x79\xe0\x7c\xc7\x4c\x70\xbe\xff\x5c\xac\xc4\x28\x51\x92\xee\x0f\x1c\x5a\x3d\x75\x66\x67\xb0\xc2\x2a\xf2\x79\xfd\xb1\x79\xbb\x4d\x5f\x67\x3f\x36\x69\x8a\x98\xe5\x17\x45\x4f\x9b\xb1\x82\x00\x45\x02\x76\xeb\x1d\x0b\xb1\x4b\xeb\xa8\xd4\x7f\xef\x79\x58\xd7\x38\x53\x19\xd5\x7d\x93\x33\x2a\x6d\x9b\x2d\x5e\x63\x22\x8f\xfb\x85\x6f\x0a\xd3\xef\x9e\x20\x8f\x51\x11\x93\x28\x2c\x3e\x44\xfa\x24\x54\x28\x42\x64\xa6\xfc\xfc\xa8\x8c\x1d\x6c\x12\xfb\xbc\xe4\x3d\x13\x46\x9a\x25\x7a\x1e\x79\xf3\xd0\x61\xc2\x19\x2d\x79\xe1\x9a\x46\x7f\x33\x35\x28\x8e\x3c\x73\x7f\x4c\xe8\x58\xa1\xd6\x89\x42\x26\xc2\x41\x69\xf8\xf7\x53\xa3\xe9\x5c\xbc\x19\x6c\x93\xd7\x59\x84\x30\x26\x6b\x03\x84\x31\x49\x63\x84\xef\xc9\x56\x2a\x86\x32\x32\x64\x50\xfc\x8e\xd9\xe2\x7f\xcc\xae\x67\xbd\xfc\x71\x2b\xe8\x5e\x24\x25\x67\x7c\x70\xec\x3c\xf7\xb4\x0a\x16\x60\x2f\x39\x19\xe0\x87\xdb\xab\x02\x3c\xff\x68\x3d\x64\x6d\x11\xf2\xbd\xc2\x21\xc3\x51\x0a\x7a\xc5\xb4\xf9\x7c\x5c\xf0\x95\xa1\xf5\xa8\xf5\x35\xa8\xb5\x47\xa1\x36\xd6\xa0\xd6\x1f\x85\xda\x5c\x83\xda\x78\x14\xea\xc9\x1a\xd4\xe6\x97\x97\x47\xfe\xb6\x2d\x30\x64\x74\xa9\x05\x3e\x32\x8a\xb2\xb4\x50\xe5\xbd\x9a\x01\x45\x92\xd0\xad\xbe\x65\x38\x63\x51\x2b\x63\x51\x54\xd8\x2a\x16\xb5\x5d\x58\xd4\xcb\x58\x14\x35\x42\x15\x8b\xfa\x2e\x2c\x1a\x65\x2c\x8a\x1a\xa7\x8a\x45\x63\x17\x16\xcd\x32\x16\xcd\x2d\x59\x34\x4b\x58\xcc\xbf\x6c\x3d\x99\x5e\xc9\xfd\xaf\x4a\xcb\x4f\xff\x77\xed\xff\x01\x00\x00\xff\xff\xb4\x79\xd0\xf6\x33\x37\x00\x00")

func tmplBloomsky_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomsky_headerHtml,
		"tmpl/bloomsky_header.html",
	)
}

func tmplBloomsky_headerHtml() (*asset, error) {
	bytes, err := tmplBloomsky_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky_header.html", size: 14131, mode: os.FileMode(420), modTime: time.Unix(1497298885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langEnUsAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x82\xf0\x1c\xe4\x00\x59\xb3\xb4\x5b\x87\x2e\x9d\x04\xa2\x62\x2d\x01\xfa\x09\x28\xba\x85\x60\xe8\xee\x85\x1c\xa7\x71\x2b\xa3\x31\xb2\x19\xf6\xf7\x3e\x92\x7e\xe3\x0e\xa0\x3b\x59\xc9\xdd\x11\xea\x33\x40\x17\xc5\x10\x77\xc7\xf9\xf5\x0e\xa0\xec\xa1\x52\x5a\x69\xcc\x69\xc1\x05\xaa\xd4\x38\x1e\x4e\x71\x08\x52\x0a\x68\xcc\xdd\xfe\x8f\xe4\xf7\xe7\x74\xf1\x55\x9d\xcf\xca\x90\xed\x8d\x28\x1b\x94\x27\x21\x6e\xdd\xcf\x80\x1e\x16\x86\x09\x03\x41\xe7\x0e\xcd\xa0\x55\x36\xcd\xf0\xcf\xd4\x33\x71\x8a\x41\xf5\x4c\x24\x36\xf4\x2b\x57\x3f\x91\x73\xb1\x8a\x5e\x26\xb4\x94\x26\x3c\x04\x26\xd4\x8a\x3c\x5a\xa7\xde\xeb\xb8\xb5\x9f\x72\x8d\x83\xc1\xb4\xdc\xeb\x92\x86\x29\xdd\x5e\xb1\x31\x98\xda\x93\xda\xad\x94\x58\x4f\x1f\x8c\x9e\x1e\xdd\x0f\x6c\x00\x31\x04\x67\x4c\x52\x99\xd7\xab\xb0\x94\xc7\x57\xff\x57\x7a\xbb\x8a\x63\xcf\xe8\xef\x37\xf5\x15\xd9\xe9\x5b\x2e\xc7\x81\xb7\x34\xf4\x16\x07\x30\xf8\x49\xdb\xab\xb9\x97\x98\x3b\xd9\x95\xef\x00\x00\x00\xff\xff\xa2\x16\x10\xd2\x54\x03\x00\x00")

func langEnUsAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langEnUsAllJson,
		"lang/en-us.all.json",
	)
}

func langEnUsAllJson() (*asset, error) {
	bytes, err := langEnUsAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/en-us.all.json", size: 852, mode: os.FileMode(420), modTime: time.Unix(1497363081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langFrAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\xcd\x72\xdb\x36\x10\xc7\xef\x7e\x8a\x1d\x5d\x72\xc9\xf8\x01\x7a\x4b\xac\x3a\xb6\xa7\x91\x3c\x96\xeb\x4c\x4e\x1c\x98\x5c\x89\xdb\xe2\x83\x05\xb0\x74\x38\x1a\xbe\x4f\xf5\x1c\x7a\xb1\x0e\x68\x9b\x84\xa4\x6d\xe2\xe4\x26\x71\x7f\xff\xc5\x7e\x61\xc9\xed\x19\xc0\xec\x43\xe3\x67\xbf\x41\xfa\x09\x30\x73\xb1\xc6\xf4\x77\xf6\xa1\xf5\xa4\x67\x67\x00\xfd\xfb\x01\xe2\x8d\x04\x39\x8e\x13\xf3\x51\x3b\x67\xc2\xdf\x1d\x94\x9a\xd0\x46\x20\x0b\x9f\x9c\xa0\xba\x78\x36\x8f\x38\x0e\xdc\xe8\xe6\x82\x62\x27\xa8\x1e\x48\x6b\x9c\xa8\xb9\x92\xa0\x1b\xc7\x3e\x63\xb0\x14\x98\xf9\x7e\x57\xa2\x79\xf4\xb9\x33\x6c\xa9\x44\xb8\xae\x24\x9c\x42\xe3\x02\x45\x5a\xc3\xf5\x7c\x92\xfc\x1e\xa2\x00\xa7\xa7\x23\x72\x89\x8f\x02\x72\xb9\xdf\xb5\x9e\x30\x0b\xf3\xca\x19\x94\x8a\x5b\x96\x8c\x79\x0f\xae\xd8\x50\x25\x17\xe7\xc5\xb4\xdf\x4d\xf4\xb5\xad\xf0\x1b\xfc\xf9\x20\xd0\xa3\x69\x84\x6f\x94\x95\xaa\xa9\x6c\x7b\x10\xe9\x0d\x6b\x09\xe3\xd4\x9a\x98\x63\xa2\x37\x26\x3b\x31\x7f\xa8\x10\x61\xd5\x59\xb1\x43\xe8\x2d\xed\xff\xf5\x08\xa1\xb3\x65\xed\x9d\xa5\xa0\x22\xb9\x4c\xfe\x59\x49\x43\xfb\x59\xf9\x90\x33\x52\xa9\x8c\xa2\x09\x59\xd0\xa6\x96\xfa\xb8\x60\xca\xf2\x59\x48\x53\xbc\xc8\xc3\x59\x38\x1f\x6b\x11\xf2\x55\x4e\xb5\x22\xd3\x1e\x8d\xe3\x82\xcd\x23\x7a\x58\xae\xe1\xd2\x69\xed\x9e\xd0\x07\x51\x97\x54\x50\x21\xac\x47\x6a\x74\xb1\x2c\xa5\xb4\x96\x65\x74\x07\x27\xdd\x7a\x0c\x81\xbd\x34\x7e\x83\x89\x9c\x05\x15\x8d\x0b\x4d\xbd\xdf\x79\xfa\x87\x33\xed\x9d\x22\xa9\xcd\xb7\x9a\xe9\x88\x82\xb9\x22\x2d\xf5\x62\x60\x41\x95\x25\x1b\xd6\xfb\x1d\x54\xef\x14\xff\xe5\xd8\x57\xef\x6a\xa6\x23\x1f\x77\x2a\x4a\x61\xde\x2b\xfe\x96\x6a\xd0\x08\xc7\x26\x09\x0c\x83\x56\xa7\xbd\xf0\x7f\xe7\x97\x18\x63\xaa\xe3\xeb\xd0\xd5\xc8\x79\x8d\x56\xd8\x08\xd2\x15\x36\xf1\xa8\x6d\x2b\xc7\xe2\x10\xac\x38\x9b\x81\x15\x87\xa8\xc8\x62\x05\x5f\xc8\x4a\xfb\xe6\x81\x22\x86\x80\x50\x31\xb4\x69\x4d\x06\xc7\x11\x2d\x4f\x1e\xee\xd1\x34\xe8\x55\x94\xdb\x96\xac\xfb\xdd\x8b\x79\xd2\x90\xc1\x10\x95\x91\x32\x99\x6c\x23\xfe\x65\x4e\x1e\xcb\xe1\xc6\x9d\xf2\x29\x6e\x98\x80\x49\x84\xe2\x4a\x5c\x32\xe6\x4b\xf1\x48\x2d\xed\xdb\x17\xdb\x6b\x05\x8e\xb4\x9f\x58\x3c\xe6\x4e\xad\x95\x1e\x6e\xc3\xa1\xe6\x2b\x4a\x77\x67\x99\x8f\x57\x55\x54\xaa\xcb\x29\x9b\x0a\x3b\xdb\x6e\xcf\x2f\x1c\xdb\xd8\xf7\x50\xa9\x6e\xf6\xfe\xc8\xc5\xa1\x39\xbb\x7a\x35\x6d\xa4\x29\xb8\x52\xf9\xbb\x52\xbb\x27\x81\xf9\xa8\x32\x3f\x06\x2b\x62\x23\x6d\x39\xd7\x61\x56\x77\xd3\x15\x35\xa6\x3d\x56\x90\x2d\x0c\xc6\xc3\x6d\xf1\x9c\xcb\x35\x28\x03\x59\xc4\xcf\x18\x44\xa5\xf5\xf9\x49\x66\xdf\x85\xc7\x63\x1b\xf4\xc1\xd9\x62\xe3\x11\x23\x59\xe9\xeb\xe0\x0a\xb5\x76\xc9\xd1\xed\x80\xf6\xfd\x89\x98\xad\x47\x55\x15\x68\x14\xe9\xa2\x4c\xc7\x49\x5d\x78\x95\x43\xad\x42\x1e\xd7\xb3\x1a\x06\x75\x38\x4d\xe3\xed\xca\x1f\x87\x55\x44\x32\xb8\xf6\xea\xe0\x45\xfd\x73\x01\xa6\xcf\xa1\x58\x23\x34\x69\x1f\x6d\xb7\xe7\xf7\xaf\x1e\xfb\xfe\xd7\x63\xff\xae\xd3\x29\x2d\xef\x36\x5e\x99\x1f\xf7\xea\xc9\x79\x9d\xed\xaa\xce\xb1\x7f\x4b\x8f\xbe\x3a\x86\x5a\xb5\xf8\x13\xcd\x79\x83\x24\x85\x71\xd6\xff\x17\x00\x00\xff\xff\x12\x5d\x85\xe5\xa3\x0a\x00\x00")

func langFrAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langFrAllJson,
		"lang/fr.all.json",
	)
}

func langFrAllJson() (*asset, error) {
	bytes, err := langFrAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/fr.all.json", size: 2723, mode: os.FileMode(420), modTime: time.Unix(1497357944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/bloomsky.txt": tmplBloomskyTxt,
	"tmpl/bloomsky_body.html": tmplBloomsky_bodyHtml,
	"tmpl/bloomsky_header.html": tmplBloomsky_headerHtml,
	"lang/en-us.all.json": langEnUsAllJson,
	"lang/fr.all.json": langFrAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lang": &bintree{nil, map[string]*bintree{
		"en-us.all.json": &bintree{langEnUsAllJson, map[string]*bintree{}},
		"fr.all.json": &bintree{langFrAllJson, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"bloomsky.txt": &bintree{tmplBloomskyTxt, map[string]*bintree{}},
		"bloomsky_body.html": &bintree{tmplBloomsky_bodyHtml, map[string]*bintree{}},
		"bloomsky_header.html": &bintree{tmplBloomsky_headerHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

