// Code generated by go-bindata.
// sources:
// tmpl/bloomsky/body.html
// tmpl/bloomsky/menu.html
// tmpl/bloomsky/script.html
// tmpl/bloomsky.txt
// tmpl/endScript.html
// tmpl/header.html
// tmpl/history/body.html
// tmpl/history/menu.html
// tmpl/history/script.html
// tmpl/index.html
// tmpl/log/body.html
// tmpl/log/menu.html
// tmpl/log/script.html
// lang/en-us.all.json
// lang/fr.all.json
// test/configForTest.yaml
// DO NOT EDIT!

package assembly

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplBloomskyBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x99\xcd\x6e\xe3\x36\x10\xc7\xef\x79\x8a\x29\x81\xf6\xa6\x28\x89\xbd\xbd\x54\xf6\xa1\x0d\xba\x5d\xa0\x68\x8b\x6d\xba\x45\x8f\xb4\x38\x96\x06\x11\x3f\x4a\x52\x76\x5d\x43\xef\x5e\x88\xb6\x6c\x45\x71\x1c\x38\x96\xf3\xd5\x4b\x60\x73\xc8\xff\x70\x7e\x33\xa6\xc4\xc9\x72\x29\x70\x4a\x0a\x81\x4d\xb4\x58\xb0\xaa\x82\xe5\x12\x3c\x4a\x53\x70\x8f\xc0\x24\xaa\x92\x55\xd5\x59\x22\x68\x06\x69\xc1\x9d\x1b\xb1\x54\x2b\xcf\x49\xa1\x65\xe3\x33\x00\x80\xb6\xcd\xea\xf9\x7a\xb4\x6b\x49\x75\x11\x49\x11\x0d\x5a\xe6\x30\x85\x64\x06\xce\xa6\x23\x16\x3b\xcf\x3d\xa5\xf1\xa4\xd0\x5a\xba\xdb\xc5\xb9\x51\x19\x83\x39\x09\x9f\x8f\xbe\xbd\xf8\xba\xb3\xcc\x34\xba\x05\x72\xc1\xc6\xcb\xe5\x0d\xb0\xef\xd7\x2b\x21\x2d\x08\x95\x07\x52\xf0\x51\xb3\xaa\x4a\x62\xd3\x59\x5d\xef\x8b\xc4\x88\x79\x92\xe8\x3c\x97\x86\x8d\x93\x58\xd0\xec\xa1\xbd\x31\xe0\x85\x1f\x6d\x1d\x90\xcc\x58\x10\x08\x9b\x25\x99\x5d\x30\xc8\x91\xb2\xdc\x8f\xd8\xd5\xc5\x45\xb3\xed\xf0\xb9\x85\xe3\xae\x8b\xe4\xab\x28\x8a\xcf\xeb\xad\x48\x31\x80\x28\x1a\x9f\xed\x03\xf7\x81\xb5\xec\x61\xce\xc4\x76\x47\x9a\xb0\x74\xe9\x4d\xe9\xd9\xb8\xf1\x78\x77\x96\xe7\x93\x02\x1b\xf5\xd5\x97\xf0\x37\x72\xde\x92\x41\xd1\xc9\xd0\x6a\x8d\xbd\x3f\xb8\x32\x88\x71\xe2\x0c\x57\x8d\x5e\x56\x2c\x4c\x4e\xa9\x56\xb0\xf9\x14\x49\x6e\x22\xc9\xed\x6d\x5d\x31\x49\x5c\xcf\x1e\x43\x48\xd8\x0f\xe4\x17\x21\x3f\x5e\x3c\x2c\xbf\xd3\x70\x27\xdc\xb4\x96\xd9\x95\xc0\x2d\xf8\x27\x39\xf8\x46\x4d\x9c\xf9\xee\x00\xc5\x24\xde\xc5\x69\x2f\xbc\xc7\xa3\x53\x75\x59\xbd\x8a\xf0\xfa\x57\x7c\x02\xb0\x84\x9a\x52\x9b\x13\xcc\x29\x72\xa5\x72\x18\xf8\xd0\xba\xaa\x3e\x29\x81\xff\xc0\x1f\x5f\xea\xc3\xec\xd8\xd2\x2a\x67\xaf\x82\x7c\x1f\x9c\x24\x2f\x8a\x28\xb5\x7c\xea\x23\x2e\x66\xe4\xb4\x5d\xb4\xa9\xfd\x49\x4a\xc0\x35\x59\x4c\x3d\x69\xd5\xc3\xaf\x72\x4e\x4a\x08\xb2\xff\x2b\x7e\x1f\x4b\xe7\x7b\x42\x97\xd5\x52\x27\x60\xd7\x76\x52\xfb\x90\x6e\xaf\x97\x5d\x4b\x6e\x65\xfe\x84\x9d\x3d\x43\x0e\x7e\x2f\x5d\x78\x33\x11\x50\x67\xa3\x87\x44\xb8\xd2\xf9\x3a\x19\x27\x4d\x44\xe3\xe4\x90\x4c\x34\x6b\x5e\x2c\x15\x96\x93\x12\x56\x9b\x36\xfe\xcf\x9c\xfa\x38\x38\x6a\xe9\xf7\x72\x6a\x3c\x84\x09\xae\x39\x15\x7d\xbc\xfb\x04\x07\x41\xeb\x94\x25\xba\xf1\x22\xe5\xeb\x2a\x37\xf8\x5c\x5f\x53\x7e\xe6\xce\x43\xae\x4b\xdb\x13\x50\xcb\x3d\x9e\x9c\x67\xed\xe4\xa5\x70\xfa\x1c\xad\xd4\x12\xfd\xea\x95\xbc\x21\x7a\x83\xd2\xa0\xe5\xbe\xb4\xd8\x03\xc9\xfa\x16\x39\x3d\x29\xc6\xda\x43\xfa\x32\x04\xf3\x52\x92\x58\xdf\x3b\x1a\x7c\x3f\x35\x63\x55\x05\x86\x7b\x4b\xb7\xe9\xb1\x11\xb6\xdd\xbc\x87\xf3\x70\xc2\xed\xfd\xb2\xfb\xcd\xa2\x73\xfd\xd4\x9c\x59\x4b\x91\xca\xb3\x93\x96\x5e\xe3\x28\x37\xfc\x99\x0a\xf0\xb1\x5b\x36\xfe\x5d\xf2\x82\xfe\x6d\x5f\xb2\xbf\xe8\xc2\xf3\x0c\x8f\x8d\x75\xb6\x92\x79\xb3\x35\xf8\x18\xb9\xac\xd0\x13\xec\xb4\x26\x7e\x29\xe5\x04\x2d\xfc\x3a\x85\x1f\x75\x51\xe8\x39\x5a\xd7\x43\x79\x4e\x37\x5a\xef\x94\x65\x8b\x6a\xaa\xb3\x0e\xd3\x6b\x9c\x51\x8a\xf0\xa9\x8f\x37\x73\x11\xb4\x5e\x29\xc6\x24\x0e\x0d\xb5\x5d\x0d\xbb\x9d\xc1\x58\x9c\x5a\x74\xb9\x27\xb9\x8d\xa8\xd5\x0c\x3c\xa6\x6d\x38\xec\xf6\x5b\x7b\xed\xfe\x75\x23\xba\x17\xd9\x54\x5b\xc9\xbd\x47\x71\x43\x12\x3f\xec\x4f\xd7\x8c\x04\xea\xd5\x81\x43\x62\xdb\x43\x1d\x5c\xb5\x9b\xab\xc3\x0b\x06\xa9\x56\xde\xea\xc2\x41\xa1\x75\xe8\xec\x26\x4e\x97\x36\xc5\xa6\x57\xbb\x69\xcc\xae\x74\xfc\xc2\x60\xd0\x44\x1d\x4b\x33\x64\xe3\xbf\x74\x69\x61\x62\xf5\xdc\xa1\x05\xa1\xd1\x81\xd2\x1e\x5c\x69\x8c\xb6\x1e\x7c\x8e\xb0\xda\x8a\xe7\xd9\xf9\x59\x12\x87\x2f\xc7\xff\x7a\x0e\x63\x35\x3c\x80\xd5\x65\x4f\xac\x2e\xdf\x28\xab\xc1\x01\xac\xae\x7a\x62\x75\xf5\x46\x59\x5d\x1d\xc0\x6a\xd0\x13\xab\xc1\x1b\x65\x75\x79\x00\xab\x61\x4f\xac\x86\xcf\xc8\x6a\xfb\x98\xda\xf7\xac\x81\xbb\x0f\x9b\xce\xac\xf5\x0c\xab\xe7\xc1\xba\xb6\xac\x47\x37\xff\x29\x0c\xb6\xe5\x12\x50\x09\xa8\xaa\xff\x02\x00\x00\xff\xff\xda\xed\xfa\xbb\x74\x1c\x00\x00")

func tmplBloomskyBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyBodyHtml,
		"tmpl/bloomsky/body.html",
	)
}

func tmplBloomskyBodyHtml() (*asset, error) {
	bytes, err := tmplBloomskyBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky/body.html", size: 7284, mode: os.FileMode(420), modTime: time.Unix(1498851459, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomskyMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\xbb\x8e\xdc\x30\x0c\xec\xef\x2b\x04\x5e\xed\x53\x1f\xd8\x2e\x82\x00\x49\x91\xf2\xfa\x80\xb6\xb4\x36\xb1\x5a\xd2\x90\x64\xe3\x16\x86\xff\x3d\xf0\x43\xbb\x7b\xca\x21\x8f\x26\x95\x2d\x6a\x86\x33\xe2\x70\x9e\x8d\x3d\x11\x5b\x05\x17\xcb\x23\x2c\xcb\x53\xc9\x38\xa9\xd6\x61\x08\x15\x30\x4e\x0d\x7a\xb5\x7f\x0a\xe2\xc9\xfa\x60\xd3\xf1\x44\x6f\xd6\x14\x51\x06\xa8\x9f\x94\x52\xaa\x34\x74\x23\xb6\xc2\x11\x89\xad\x3f\xee\xf2\xfb\xa3\x45\x6f\xd1\xbc\xc3\x6c\xb8\x66\x8c\x51\x58\xc5\xeb\x60\x2b\xd8\x0f\x90\x11\xa3\x74\x9d\xb3\xaa\x15\xe7\x70\x08\xd6\x80\x32\x18\xf1\x28\xaf\xf2\x7b\x3d\x95\xd1\x77\x36\x56\xf0\xbc\xb3\x41\xa1\x27\x2c\xec\xdb\x80\x6c\xac\xa9\xe0\x84\x6e\xc5\x6e\xd5\xd5\xb9\x17\x77\x93\xca\xcd\x85\x01\x39\x99\x09\xbe\x10\x76\x57\xa8\x5f\x77\x3b\x8c\x13\x75\x18\x49\xb8\xd4\x2b\xee\x37\x54\x6a\x85\x8b\xad\xfd\xff\x82\x96\x7a\x1f\x65\x46\xc7\x6c\xb2\x8d\x47\x36\xa0\x7a\x6f\x4f\x15\x3c\x43\xfd\xd9\x89\x5c\xc2\xf9\x5a\x6a\x7c\x88\x52\x1b\x9a\xb2\x64\xc9\xdc\x46\x76\xdf\x82\x3d\x86\xb4\x31\xb7\x58\x32\x0f\xa3\x7b\x30\x91\xc0\x8c\x53\x86\xdb\xb0\x8e\x12\x16\xdb\x48\x53\xde\xeb\xe1\x5d\xfb\x13\x34\xd4\xf3\xfc\xaa\xe0\x9b\x5c\x2c\x2c\xcb\xfa\x8c\x52\x3b\xfa\xb0\x73\xfd\x40\xeb\x29\x44\xf1\xd7\xc4\x3e\x4e\x7f\x6a\x70\xe7\x3b\xe9\xa0\xfe\x2e\xdd\x5f\xe2\xfb\x18\x87\xf0\x49\xeb\x8e\x62\x3f\x36\x2f\xad\x5c\xf4\x80\xd1\x53\x7b\x46\x47\xac\x9b\x23\x85\xa2\x75\x64\x39\x16\x9d\x80\x4a\x5b\xfd\xa3\x71\xc8\x67\xa8\xbf\x6e\xd4\x7f\xd4\x33\x18\xfa\x46\xd0\x9b\x97\x24\xb1\x69\xff\xda\x3d\xed\x81\xfa\x92\x18\x77\xa5\xf7\x69\xea\xd1\x7d\xb8\x29\xc7\x6f\xa9\x19\xa7\xfa\x69\x9e\x95\x65\xa3\x96\xe5\x67\x00\x00\x00\xff\xff\x8d\xd2\xf5\xc5\x82\x04\x00\x00")

func tmplBloomskyMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyMenuHtml,
		"tmpl/bloomsky/menu.html",
	)
}

func tmplBloomskyMenuHtml() (*asset, error) {
	bytes, err := tmplBloomskyMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky/menu.html", size: 1154, mode: os.FileMode(420), modTime: time.Unix(1498851464, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomskyScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5b\x6f\xdb\x38\x16\x7e\xcf\xaf\x20\xf4\x12\xa7\x19\xdf\x1d\xcc\x6e\x73\xc1\xce\x36\xe9\xb4\x45\xe2\x14\x71\xa6\xc1\xa0\x33\x0f\xb4\x78\x6c\x71\x2b\x91\x02\x49\xd9\x63\x18\xfe\xef\x0b\x4a\x72\x2d\x51\x57\x3b\x72\xd1\x3e\x99\xe5\xe1\xf7\x7d\xe7\x46\x32\x92\xd6\x6b\x02\x33\xca\x00\x59\xd2\x16\xd4\x57\xd6\x66\x73\x72\x15\xfd\xbc\x39\x41\x08\xa1\x25\x65\x84\x2f\x3b\x98\x90\xbb\x05\x30\x75\x4f\xa5\x02\x06\xa2\x65\xb9\x1c\x13\xeb\x17\x34\x0b\x98\xad\x28\x67\x2d\x58\xa8\x33\xb4\x0e\xd7\xe8\x7f\x0b\x2c\x10\x0f\x94\x1f\x28\x74\x8d\x08\xb7\x03\x0f\x98\xea\xcc\x41\xdd\xb9\xa0\x7f\xfe\x77\xf5\x91\xb4\xac\xc8\xc2\x3a\xbb\x4c\xad\x5b\xca\xf4\xd8\x17\x94\x69\x98\xef\x5c\x1e\x48\x89\xe7\x90\xe4\xdb\xda\x92\x24\x9d\x2d\x00\x2b\x88\x19\x5b\x16\xa1\x8b\x24\x95\xfe\x47\x3a\x94\x31\x10\x1f\x9e\x1f\xee\xd1\x35\x8a\x71\xd3\x26\x91\xc6\x0e\xf6\x7d\x60\xe4\x9d\x43\x5d\xd2\x22\x09\x94\xcd\xee\xa7\xe4\xf6\x37\xd0\x42\x19\x2c\xd1\x0b\x4c\x27\xe1\xb8\x65\xad\xd7\x9d\x17\x98\x86\xb3\x22\x10\xee\x66\x93\x54\xd1\xed\x3e\x8e\xd1\xe3\xe7\xbb\xb1\x01\xd3\xe1\x8c\xfb\xc0\x92\x6e\x1b\x21\xde\x21\x44\x11\x6a\x59\x1a\xc6\xf4\x30\xb2\x88\x0c\x62\x64\x5f\x70\xc5\x6d\xee\x9e\x55\x19\x0a\xc0\x64\x35\x51\x58\x41\xa5\x69\x20\x72\xe0\xe2\x39\x09\x4c\xe7\xda\x07\x66\xa5\x6d\x36\x27\x86\x1f\x8f\x63\x74\xf7\xf4\xf4\xf8\x94\x8d\x05\x08\xc1\x45\x2a\x18\xfa\x3f\xcc\x70\xd8\x9c\x49\xee\x42\x27\x9c\x8c\x4d\xd2\xe1\x88\x44\x9b\x33\x99\x24\x76\x38\xb3\x5d\x2e\xa1\x22\xfc\x71\xdc\xaf\xa6\x37\xef\x38\x63\x10\xda\xa1\x70\x21\xe9\x5c\x75\xa7\x37\x56\x3e\x47\xe4\xe9\xc3\xdd\x64\xf2\xdb\xef\x77\x59\xe6\xb8\x0c\x2b\xb8\x75\xb5\xdb\x81\x10\xc0\x14\xc1\x0a\xe2\xb2\xbb\xc5\x0a\x5a\x86\xcf\x61\x5f\x60\x05\x8a\x7a\xda\xec\x74\xbd\x7e\x46\xd6\x3d\x96\x0a\x4d\x56\xcc\xb6\x36\x9b\xb7\xe8\x14\x9d\x27\xc1\x74\xa3\x46\x48\xe8\x1c\x59\x5d\x0b\x9d\x67\x72\xdb\x32\xcc\x1f\x38\x53\x4e\x68\xdf\x2f\x5e\x64\xac\x79\x1f\xb8\xee\x9f\x80\x45\x44\x83\xfe\x83\x6a\xac\xf9\xc0\x03\x21\xa3\x05\x6f\x6b\x98\x3f\x50\x16\x28\xd8\x63\xc1\x04\x6c\xce\x88\x34\x63\x58\xb8\x85\x09\x98\x09\x90\x8e\x8e\xad\x75\x96\xda\x4d\xb6\x21\xbf\x3c\x31\xca\xfc\x99\x23\xe9\xf0\x25\x52\x0e\x68\x23\x8c\x8c\xf9\xb8\xaa\xe2\xfa\x30\x1b\xba\xdb\xdd\x56\xb9\xcb\xe7\xba\x30\x3a\x1a\xe3\xec\x24\x93\xf2\xff\x49\xae\xb7\x8f\x4f\x93\xc7\x71\xc7\xc7\x42\xc2\xce\xd8\x44\x44\xd3\x80\xba\x24\x54\x9c\x81\xc1\xc9\xca\xd2\x98\x9d\x5b\xac\x70\xe7\x79\x82\xde\xa0\x7e\xaf\xd7\xcb\x29\x36\x4f\xd7\x82\x44\xd7\xe8\x6b\x54\x6b\x9f\x30\xb3\x36\x9b\xd3\x5f\xe2\xd2\x7b\x0f\xd3\xe4\xf0\x01\x8b\xe4\xf0\x37\x5f\xa4\x67\x57\xc9\xe1\xa7\x80\xa5\x87\x6e\x6a\x6d\x30\x4f\x0e\x27\xe0\x27\x87\x8f\xb6\x4a\x0e\xc7\x7c\x91\x1c\xde\x82\x6e\x85\xd3\xbf\xb3\xee\xac\x00\xeb\xad\x07\xa7\x4b\xb6\xc0\x6d\x7d\x8c\x84\xee\x7f\xc5\x89\xb6\xc8\x41\x8d\x9b\x16\xef\x7a\x2d\x6b\xe3\xf0\xe0\x3b\x73\x5c\xf8\x39\xb4\x94\x6d\x6d\xbe\x57\x7b\xd6\x4a\x82\xbd\xb5\x2a\x28\x71\x6d\x35\xe3\xc2\xc3\x4a\x01\x79\xa6\x1e\xf4\xe2\x22\x46\xe7\xe8\x34\xdc\x21\x22\x07\xb7\xa3\x30\x2c\xdb\x41\xa8\xf4\x1c\x9d\xbe\x0d\xed\x28\xfb\xfe\x5b\x82\x5d\x41\xd3\xdf\xd2\xb4\x51\xbf\x84\xaa\x66\x3f\xa6\xa1\x8d\x96\x4c\x4f\x56\xe8\x1a\xec\x74\x0d\x1a\xd6\x35\x28\xd3\x35\xa8\xd0\x35\xdc\xe9\x1a\x36\xac\x6b\x58\xa6\x6b\x58\xa1\x6b\xb4\xd3\x35\x6a\x58\xd7\xa8\x4c\xd7\xa8\x42\xd7\xc5\x4e\xd7\x45\xc3\xba\x2e\xca\x74\x5d\x18\x1b\x7f\x21\xa4\x3e\x24\xa4\xc2\x9e\x5f\x86\xd6\xab\x8b\x66\x53\xb5\x32\x80\xc2\x5d\xfb\x1d\x55\xab\x31\xf6\xa0\xa6\x9f\x04\x16\xd4\x36\x8f\xb4\x68\xfb\x0f\x67\x3e\xde\xd6\x0e\x98\xeb\xf2\x25\x08\x99\x87\x35\x0e\xbc\xc7\xd9\xfb\xad\x45\x98\x8f\x70\x33\xde\x2d\xda\x6c\x4e\x0d\xcf\xe9\x0c\x25\xce\xa1\x31\x9d\x3b\xb9\xd7\xe2\x42\x41\x4c\xaf\x30\xc4\x9c\x5e\x51\x64\xbb\x58\xca\xeb\xbf\xac\x25\x45\x4b\xda\xf6\x38\x67\xed\x25\x66\x94\xcd\xdb\xb6\x00\x69\x03\x53\xed\xe1\x5f\xd6\xcd\x55\x97\xde\x44\x22\x43\x6a\x2d\x30\x7d\xa9\x45\xe0\x4a\x68\x5e\x10\xc1\xab\xb6\x0c\x18\x5b\xa5\x34\xdc\x46\xc7\x63\x5a\xc1\x65\x7e\xbc\x26\x8a\x0b\xaf\xf3\xc7\x97\x8f\x8c\xc0\x3f\xe8\xea\x1a\x0d\xf6\x8a\x5b\xb0\xc8\xcb\x60\x1a\xf4\x1c\x9d\x76\xfb\xfd\x48\x9a\xcb\x97\x5a\x5a\x78\xb5\xcb\x78\x63\xbb\x3c\x20\x5b\x57\xac\x9c\x00\xd6\x74\x61\x74\x54\x17\x3c\x20\x34\xf0\x8a\xbd\xd0\x39\xa9\xf4\xe4\x98\x02\x1d\x3a\x77\xca\xe5\x25\x4b\xc6\x32\xcb\xa4\x2c\xc8\x2f\x94\x91\x5b\x2a\xe2\x3f\x6a\xae\xaf\x91\x35\xb6\xf6\x0a\xf6\x92\x32\x42\xa8\x30\x0b\x3b\xbe\x7b\x09\xa5\x85\xa3\xac\x68\xbd\x0c\x29\xbe\xc4\x82\xc8\x76\xaf\x4d\x60\x1e\xab\xcf\x6b\xb3\x3d\x1d\xb8\x3b\x82\x07\xe1\xe8\x4e\xea\x8d\xa0\xc2\x99\xd1\x45\xa3\xde\x34\xe8\x4c\x2d\xf9\xff\x6e\x36\x19\x93\x06\xf5\x4f\x78\x90\x49\x46\xb9\x33\xfd\x61\xb3\xc9\x98\x1c\xc1\x99\x0a\x0f\xfe\xd5\x70\x3e\x5e\x8e\x95\x8f\x17\xa8\x53\x5e\x83\x41\xb3\x19\x69\xd0\x9d\x9a\x0e\xfc\xda\xf0\x6e\xd5\xa0\x07\xe9\xdd\xaa\x9e\x3f\xc3\x7e\x49\x42\xca\xcf\x8e\x49\x20\x15\xa6\x0c\x88\xf6\x6a\xe2\x03\x10\x7d\x56\xf7\xf7\x72\x47\x06\x52\x69\x3d\xc5\x07\x62\x0e\x8b\x3e\x06\x3d\xbf\xeb\x58\xf9\x07\xa2\xc6\x6b\x4f\x01\x07\x33\x2e\x54\xbb\x97\x7b\x2c\x56\xc6\x78\x1e\x48\xf3\xb6\x66\xe4\xf1\xf7\x40\xaa\x03\xa5\x64\x1f\xde\x96\x69\xd1\x52\xbc\xdc\x8b\x75\x5a\x8c\x27\x23\x39\x5d\x79\x6c\x35\xdf\x3c\xa7\x5a\xce\x37\xcf\x09\x65\x7c\xf3\x8e\x18\x9e\x6d\xfd\x94\xc5\x27\x5b\x41\x3f\x20\x52\x5b\x61\xa5\xa1\xca\x2a\x6b\x2a\x68\xd5\x5b\x51\x7e\xf7\x0e\x7f\xb2\xee\xed\x1f\x56\xa4\x47\x69\xdf\x03\xb5\x1c\xa9\x7d\x5f\xa1\xe6\x38\xed\x7b\x88\xa0\x1f\xd2\xbe\xaf\x11\x76\xec\xf6\x2d\xd0\x76\x68\xfb\xfe\xfa\x93\xb5\xef\xe0\xe7\x39\x7c\x07\x3f\x55\xf7\xbe\x42\xcd\x71\xba\xf7\x10\x41\x3f\xa4\x7b\x5f\x23\xec\xd8\xdd\x5b\xa0\x4d\xdf\x9b\xcb\x7a\xf7\x09\xd3\xf0\xf2\xdf\xdb\xab\x5b\x05\xa6\xac\xe0\xda\x9f\x7b\xcd\x37\x9f\x0b\xbd\xf6\x01\x66\x21\xff\x9f\x20\x73\x05\x04\xde\x54\x80\xeb\xe2\x7f\x8a\xfe\xb8\xa8\x08\xd1\x2d\xa6\xee\xea\xb0\x38\x11\xbd\xd4\x10\x6b\xb5\x5f\xfb\xdc\xae\x08\x39\x57\xb7\x2e\x1f\xca\x32\x0f\xe3\xea\xf8\xec\x79\xaf\xf0\xda\xf3\x8e\xe7\x77\x06\xbb\x40\x7d\xd8\xdf\x1e\xba\x9a\x8a\x1b\xdd\x47\x25\x56\x6e\xd7\x1b\xec\x1b\xa3\xa7\xf0\x9d\xea\x21\x01\x12\x58\x99\x2f\x3b\x9a\x89\x4e\x0e\x70\x9e\xe8\xc3\x6a\x42\x2f\x3d\xb4\x24\x44\xb8\xf6\x68\x3e\x57\x15\x44\x2c\xbd\xbc\x1e\x12\x46\xb9\xe5\x50\xf3\xfd\x1a\x78\xfe\x2c\xf7\x4d\x56\xf8\x21\x03\x78\x3e\x08\xac\x02\x01\xf9\x1b\xfb\x0c\x3b\x02\x98\x03\x54\xe5\xef\xe9\xa5\xbc\x76\x1d\xde\x77\x05\xef\x48\xc0\x95\x34\x90\x3b\xd6\x7a\xb4\x4e\xe0\x51\x52\xf0\x12\x30\x64\xfe\x10\x1b\xe4\xb3\x6e\x97\xef\x4b\xeb\x0b\x90\x32\x10\x40\x99\x33\x2f\xa4\xfe\x1c\x1b\xc5\xf5\xfe\x61\x5e\x37\x96\x5b\x74\xc7\xc7\x95\xe0\x8e\x8f\x43\x7c\xe7\x33\xae\xad\x7e\xc1\x5d\x85\xe7\xf9\xef\x3b\x35\xf6\x97\x68\x3e\xaa\xd7\x2f\xb5\x61\xa7\x2e\xe7\x1e\xf5\xe6\x3d\xeb\xac\x23\x85\x9d\x82\xfc\xe8\xe1\x39\xfc\xf1\x74\x6f\x7e\x1f\xf4\xa6\x1a\xae\x9f\x86\xfb\x2c\x60\x41\x61\x19\x02\xde\x53\xa9\xbe\xf6\x8c\xef\x4d\xaa\x11\x07\x15\x88\xfd\xbd\x11\x87\x15\x88\x83\xbd\x11\x47\x15\x88\xc3\xbd\x11\x2f\x2a\x10\x47\x7f\x5f\xbe\xe9\xee\x93\xea\x05\x25\x46\xaa\xbf\x50\x02\x3c\x37\x29\xc5\xb5\x18\x81\xb8\x1c\x93\xda\x9f\xa1\x6d\xd9\xfb\x45\xec\x66\x02\xcb\xd8\xfb\x87\xb2\x0f\x8a\xd8\xcd\x64\x97\xb1\x0f\x0e\x65\x1f\x16\xb1\x9b\x85\x51\xc6\x3e\x3c\x94\x7d\x54\xc4\x3e\xda\x83\x7d\x94\xc3\x1e\x7d\x25\xbb\x39\xbb\x3c\xb9\xea\x6e\x3f\xcd\x5e\xaf\x11\x30\x82\x36\x9b\xff\x07\x00\x00\xff\xff\x61\x3d\x7c\xc8\xc1\x2d\x00\x00")

func tmplBloomskyScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyScriptHtml,
		"tmpl/bloomsky/script.html",
	)
}

func tmplBloomskyScriptHtml() (*asset, error) {
	bytes, err := tmplBloomskyScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky/script.html", size: 11713, mode: os.FileMode(420), modTime: time.Unix(1498851473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplBloomskyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x4b\x8e\xa3\x30\x14\x45\xe7\x59\xc5\x53\xa4\x1e\x76\x2f\xa0\x87\x0d\x22\x20\x75\x3e\xca\xaf\xc7\x4e\x78\x09\x56\x63\x40\xd8\x54\x55\x84\xde\x9e\x6a\x0d\xb5\xb2\x92\x31\x9f\x10\x3b\x89\xaa\x98\xde\x73\xee\x7d\x10\x29\x3f\x5d\xcf\xe4\x4f\x9a\xe7\x42\xfe\xbf\x40\x5d\xff\x9a\xa1\xfa\xcb\xa4\xf2\x58\x9a\x12\x4d\xdc\x7c\x5d\x6f\x61\xba\xe5\x02\xa5\x62\xa2\x80\x43\xab\x4f\x89\xe0\x37\xb8\x1e\xd3\xab\x8d\x8d\x36\x88\x4c\x85\xc7\xd5\x03\x69\x10\x35\xd7\x39\x3e\xbe\xf0\x23\x42\x14\xbb\x45\x23\x18\x28\xf2\x3b\x69\x51\x89\x03\x96\xb0\x3c\x41\x90\xa7\x69\xfe\x8a\xa5\xbc\xd5\x8d\xb8\xa8\xc4\xf2\xd4\x33\x9d\x1e\x65\x31\xbe\xc1\x6e\xff\xe0\x56\xa3\x37\xe0\x6e\xdf\xcf\xf2\x73\xa2\x1e\xbf\xa0\x16\x23\xd9\x80\x9d\xf5\x8f\x67\x31\xf8\xbc\xc4\xa3\xe2\x79\x66\xeb\x66\x4a\x53\x3d\x34\x52\x67\x95\x74\x8f\x0e\xa2\x46\xe6\x45\x42\x04\xf3\x22\x31\xea\xa6\x92\x8a\xf1\x0c\x63\xd0\xc0\xb5\x6f\xb4\x3e\xd7\xf1\xa6\x40\x8c\x6f\x0a\xbe\xb4\x2d\xb5\x29\xbf\xbd\x7c\xad\xaf\x19\x77\x7c\x24\xfb\x1b\x6b\x8e\x08\x06\x09\x7c\xc6\xd3\x8b\xbd\xa7\xb3\x26\x8a\x34\xcf\xb3\xbb\x33\x03\x6e\x91\xb0\x66\x0a\xc7\xf8\x40\xeb\xcc\x36\xac\x6b\x6e\xcf\x99\x0b\x22\x10\xe2\xc9\x5b\x0f\x92\xc5\x3b\x8e\xb2\x0f\x1b\x59\x5b\x14\x05\x96\x4c\x55\x65\xe3\x05\xd3\x7b\x7b\x57\x60\xc0\x92\x12\xb3\x04\xb9\x22\x82\x8f\xf7\xc0\xd9\xe4\xb9\x7e\x2e\xab\xca\xc3\x54\xf2\x4a\x36\x3d\x9e\xe9\x09\x2b\xc1\xe3\x27\x7f\x1b\xa6\xa7\x23\x89\xe0\x87\x71\x57\x25\x4a\xd9\x1e\x10\x65\xe1\xb9\x2d\x30\x78\x17\xea\xa0\xcd\x6d\x2b\x5c\xb1\x6e\x75\x6c\x85\x2b\x66\xe2\xc9\x67\x00\x00\x00\xff\xff\x01\x56\xa6\x84\x62\x05\x00\x00")

func tmplBloomskyTxtBytes() ([]byte, error) {
	return bindataRead(
		_tmplBloomskyTxt,
		"tmpl/bloomsky.txt",
	)
}

func tmplBloomskyTxt() (*asset, error) {
	bytes, err := tmplBloomskyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/bloomsky.txt", size: 1378, mode: os.FileMode(420), modTime: time.Unix(1498741853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplEndscriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x4a\x06\x31\x0c\xc7\xf7\x3e\x45\xec\xde\x16\x75\xfd\x7a\x83\xa3\x93\xe0\x13\x84\x36\xa7\x3d\xee\xda\xb3\xc9\x09\x52\xfa\xee\x42\xbb\xea\xf4\x05\x02\x49\xf8\x91\xff\x0f\x5a\x8b\xb4\xa6\x4c\xa0\x29\xc7\xf7\x50\xd3\x29\xba\x77\x75\x7b\x30\x06\x5e\x4a\x11\x96\x8a\x27\x84\x52\x09\x5e\xf1\x1b\x27\xa1\xe0\x8f\xf2\xde\xff\x77\xbf\xa3\xc1\x98\x65\xda\xbc\xed\x18\x28\x02\x0a\xc8\x27\x01\xe5\x08\x65\x1d\x63\x2c\xe1\x3a\x28\x0b\x70\x19\xfb\x89\x1f\xc4\xb0\x17\x8c\xb0\x22\x0b\xd5\xf9\x83\x87\x3a\x70\x0d\x5e\x3b\x16\x94\x14\xdc\xc6\x6e\xfb\xba\xa8\xfe\x98\x67\xfb\x64\x1f\xed\x91\xb2\xdd\x58\x2f\xea\xe6\x26\xbe\xa8\xd6\x46\x56\xef\xbf\x01\x00\x00\xff\xff\x78\xdd\xc8\x41\x2b\x01\x00\x00")

func tmplEndscriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplEndscriptHtml,
		"tmpl/endScript.html",
	)
}

func tmplEndscriptHtml() (*asset, error) {
	bytes, err := tmplEndscriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/endScript.html", size: 299, mode: os.FileMode(420), modTime: time.Unix(1498851130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdf\x6f\xdb\x46\x0c\xc7\xdf\xf3\x57\xb0\x7a\x19\x10\xec\xa4\xa6\x69\xb0\xce\xb5\x8c\x75\x45\xd0\x65\xe8\xfa\xd0\x74\xd8\x80\xa2\x0f\xe7\x3b\x4a\x62\x72\x3f\xd4\x23\x65\xc7\x30\xfc\xbf\x0f\x27\x39\xa9\xd3\x20\x43\x30\x4c\x0f\x82\xe9\xe3\xf7\x73\x24\xbf\x10\xb7\x5b\x8b\x0d\x05\x84\xa2\x43\x6d\x31\x15\xbb\xdd\xd1\xdc\xa3\x68\x30\x9d\x4e\x8c\x52\x17\x83\x34\xea\x55\xb1\xd8\xff\xdd\x89\xf4\x0a\xbf\x0e\xb4\xaa\x8b\xbf\xd5\x9f\x6f\xd4\xdb\xe8\x7b\x2d\xb4\x74\x58\x80\x89\x41\x30\x48\x5d\x5c\x9c\xd7\x68\x5b\xbc\x53\x05\xed\xb1\x2e\x56\x84\xeb\x3e\x26\x39\x48\x5c\x93\x95\xae\xb6\xb8\x22\x83\x6a\x0c\x7e\x04\x0a\x24\xa4\x9d\x62\xa3\x1d\xd6\x27\x19\xf2\x4c\x29\xf8\xd4\x21\xe8\x65\x5c\x21\x9c\xc2\x08\x15\xdd\x32\x1c\xfb\x81\xe5\x18\x4c\xf4\x08\x0d\x25\x16\xa0\x00\xd2\x21\xe4\x7e\x5e\x83\x0e\x1b\x88\xd2\x61\x1a\xe3\xdb\x7b\x21\x8b\x26\xcd\xb1\x6e\x04\xd3\x71\x96\x30\x4e\x48\xa5\xee\x97\x6d\x91\x4d\xa2\x5e\x28\x86\x83\xca\x7f\x75\x31\x7a\xbe\xde\x80\x71\x94\x91\x6d\xfc\xae\x5b\x3d\x48\x17\xd3\x81\xa2\xd7\x92\xc8\x5c\x6b\x47\xe1\x97\xd6\x6b\x72\xa5\x89\x3e\x8b\x84\xc4\xe1\xe2\x7b\xe0\xbb\x38\xaf\xa6\x93\xa3\x69\x00\xef\xb5\xe0\x54\x76\x4f\x0e\x2d\xe8\x60\xc1\x53\xa0\x86\xd0\xc2\xdb\xcb\xcb\xa9\x70\x47\xe1\x1a\x12\xba\xba\x60\xd9\x38\xe4\x0e\x51\x0a\xe8\x12\x36\x75\x51\xb1\x68\x21\x53\x19\xe6\x6a\x19\xa3\xb0\x24\xdd\x97\x9e\x42\x69\x98\x0b\x30\x29\x32\xc7\x44\x2d\x85\xba\xd0\x21\x86\x8d\x8f\x03\x17\x8f\x40\xe1\x5f\xa9\x4a\x3a\xf4\xf8\xbf\xb2\xd7\xa8\xb3\x93\x8a\x4c\x0c\x7c\x47\xfe\xcf\x04\xb5\xa6\x60\x0f\x30\x47\xf3\xc9\x66\xe0\x64\xbe\xc9\xae\xb8\xba\xfa\x3a\x60\xda\xa8\xd3\xf2\x45\x79\x32\xe6\x5f\x3d\xda\x0f\x14\x8b\x79\x35\x61\x9e\xe4\xda\xef\x7a\xa5\x2f\xa7\x5b\x47\xf3\x1e\xa9\xe0\xbe\x57\x57\x0c\x4f\xbc\x7f\x1c\xc7\xe2\x08\x00\x60\x19\xed\x06\xb6\xe3\xcf\xfc\xf4\xda\x5a\x0a\xad\x92\xd8\xcf\xe0\xec\x79\x7f\xf3\x7a\x3c\xda\x8d\xef\xf1\x55\xb2\xe8\x24\x98\x94\xa0\xef\x9d\x16\x7c\xa8\x9e\xc1\xcb\xe7\xfd\x0d\x9c\x9c\xdd\xca\xf3\x23\x78\x23\x4a\x3b\x6a\xc3\x0c\x0c\x06\xc1\xf4\x00\x4d\x4d\xd2\xfe\x90\xb7\x8c\xc9\x62\x9a\x41\x88\x01\x6f\xb3\xe7\xd5\xbe\xfa\xfd\x1c\x7f\xfb\xf4\xc7\xfb\x33\xe0\x8e\xfc\x38\xc2\x8f\xc8\x7d\x0c\x36\x0f\xa3\x89\x09\x2e\xce\x5f\x01\x0f\x7d\xde\x2e\x10\x9b\x7d\x32\x3a\xf4\x18\x84\xa7\x99\xa3\x25\x0d\xd9\x4a\xc2\xfd\x37\x9e\xb1\x7f\xbd\xf9\xf8\xe1\xe2\xc3\xbb\xd9\x21\xd0\x46\xe4\xf0\x83\xc0\x3a\xa6\x6b\xa0\x06\x36\x71\x80\xbc\xbb\xc6\xbd\xd2\xeb\x16\x61\x45\x1a\x1a\x72\x38\xab\xaa\x3b\xd4\x67\x6a\xc0\x09\x5c\x9c\xc3\xcf\x5f\x16\xfb\xd6\xee\x19\x9a\x57\x27\xcf\xaa\x2a\x32\x97\x5e\xdf\x18\x1b\xf2\x02\xa8\x3a\xf1\xee\x8c\x3b\x5a\x55\xa7\xe5\x4f\xe5\xe9\xb7\xf8\xce\xec\x03\x4f\x9f\x8e\x4d\x53\x3f\xd5\x49\xf9\xb2\x7c\x71\x1b\x3d\x86\x9c\x3f\xfb\x8c\xc1\x52\xf3\x25\x37\xb3\xdd\x02\x06\x0b\xbb\xdd\x3f\x01\x00\x00\xff\xff\x07\x17\xbc\xea\x1d\x06\x00\x00")

func tmplHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHeaderHtml,
		"tmpl/header.html",
	)
}

func tmplHeaderHtml() (*asset, error) {
	bytes, err := tmplHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/header.html", size: 1565, mode: os.FileMode(420), modTime: time.Unix(1498850453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xcd\x6e\xc4\x20\x0c\x84\xef\x3c\x85\xeb\x9e\x53\xd4\x6b\x45\x72\xe9\x93\x10\xec\x55\x90\x08\x59\x19\x67\xd5\x08\xf1\xee\x55\xf7\x27\x55\x7a\xe8\x69\x6f\xcc\x60\xcf\xc8\x5f\xad\xc4\xa7\x98\x19\x70\x5c\x68\xc3\xd6\x6a\x05\xe5\xf9\x9c\xbc\x32\xe0\xcc\x79\xc5\xd6\x8c\xa3\x78\x81\x90\x7c\x29\x3d\x86\x25\xab\x8f\x99\x05\x07\x63\x00\x00\xae\x9f\x91\x7a\x14\x3e\x09\x97\x49\xe3\xcc\x38\x38\x4b\xf1\xf2\x98\x50\x3f\x26\x1e\xae\xef\x9b\x96\x5f\x71\x33\xe8\x68\x1c\x72\xa7\x75\x8e\x14\x75\xfb\x9c\xbc\x28\x42\xd1\x2d\x71\x8f\xe3\x22\xc4\xf2\x01\xef\xe7\x2f\x28\x4b\x8a\x04\xaf\x21\x84\xbd\xf8\x90\x64\xff\xe6\xff\x5f\xf8\x03\x80\xc5\xeb\x2a\xfc\xa4\x4e\x67\x1f\x27\x3b\x7b\x87\x61\xee\x4b\xee\xa5\xeb\xc0\xbe\xed\x58\xa1\xeb\x06\x53\x2b\x70\x26\x68\xed\x3b\x00\x00\xff\xff\x38\x7b\xec\x4c\xa0\x01\x00\x00")

func tmplHistoryBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryBodyHtml,
		"tmpl/history/body.html",
	)
}

func tmplHistoryBodyHtml() (*asset, error) {
	bytes, err := tmplHistoryBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/body.html", size: 416, mode: os.FileMode(420), modTime: time.Unix(1498851487, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\x3d\xaf\xdb\x30\x0c\xdc\xf3\x2b\x04\xbe\xd9\x4f\x7b\x61\x7b\x28\x0a\xb4\x43\xc7\xb7\x17\xb4\xa5\xd8\x44\x14\xd2\x90\x64\xe3\x05\x86\xff\x7b\xe1\x0f\xa5\xa9\x1a\xf4\x63\xe9\x64\x93\xba\xe3\x1d\xc8\x9b\x67\x63\xcf\xc4\x56\xc1\xd5\xf2\x08\xcb\x72\x2a\x19\x27\xd5\x3a\x0c\xa1\x02\xc6\xa9\x41\xaf\xf6\x4f\x41\x3c\x59\x1f\x6c\x2a\xcf\xf4\x6e\x4d\x11\x65\x80\xfa\xa4\x94\x52\xa5\xa1\x3b\xb1\x15\x8e\x48\x6c\xfd\xf1\x96\xbf\x1f\x23\x7a\x8b\xe6\x27\xcc\x86\x6b\xc6\x18\x85\x55\xbc\x0d\xb6\x82\xbd\x80\x8c\x18\xa5\xeb\x9c\x55\xad\x38\x87\x43\xb0\x06\x94\xc1\x88\x47\x7b\x95\xdf\xfb\xa9\x8d\xbe\xb3\xb1\x82\x97\x9d\x0d\x0a\x3d\x61\x61\xdf\x07\x64\x63\x4d\x05\x67\x74\x2b\x76\xeb\xae\xce\xbd\xb8\xbb\x54\x6e\x2e\x0c\xc8\xc9\x4c\xf0\x85\xb0\xbb\x41\xfd\xb6\xdb\x61\x9c\xa8\xc3\x48\xc2\xa5\x5e\x71\xbf\xa1\x52\x2b\x5c\x6c\xe3\xff\x17\xb4\xd4\xfb\x2a\x33\x3a\x66\x9b\x6d\x3c\xb2\x01\xd5\x7b\x7b\xae\xe0\x05\xea\x8f\x4e\xe4\x1a\x2e\xb7\x52\xe3\xc3\x29\xb5\xa1\x29\xbb\x2c\x99\xfb\xca\x7e\xa4\x60\x3f\x43\x4a\xcc\xfd\x2c\x99\x87\xd1\x3d\x98\x48\x60\xc6\x29\xc3\x6d\x58\x47\x75\x89\x87\x3d\x0d\xf5\x3c\xbf\x29\xf8\x22\x57\x0b\xcb\xb2\x5a\x2c\xb5\xa3\xa7\xac\xa4\x80\x6d\xa4\x29\x77\xf0\xb0\x8d\x63\x72\x4f\x21\x8a\xbf\x25\x81\xa3\xfa\x83\xc6\x83\x33\x27\x1d\xd4\x5f\xa5\xfb\x4b\x7c\x1f\xe3\x10\x3e\x68\xdd\x51\xec\xc7\xe6\xb5\x95\xab\x1e\x30\x7a\x6a\x2f\xe8\x88\x75\x73\x1c\xa1\x68\x1d\x59\x8e\x45\x27\xa0\x52\xa8\xbf\x35\x0e\xf9\x02\xf5\xe7\x8d\xfa\x8f\x7a\x06\x43\xdf\x08\x7a\xf3\x9a\x24\x36\xed\x5f\xa7\xa7\x18\xa8\x4f\x89\xf1\x5c\xa9\xd4\xa3\x7b\x9a\x93\xe3\xb7\xd4\x8c\x53\x7d\x9a\x67\x65\xd9\xa8\x65\xf9\x1e\x00\x00\xff\xff\xba\xfe\x31\x7a\x80\x04\x00\x00")

func tmplHistoryMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryMenuHtml,
		"tmpl/history/menu.html",
	)
}

func tmplHistoryMenuHtml() (*asset, error) {
	bytes, err := tmplHistoryMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/menu.html", size: 1152, mode: os.FileMode(420), modTime: time.Unix(1498851507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHistoryScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xed\x6e\xdb\x36\x17\xfe\xef\xab\x38\x50\x7f\x48\x46\x5d\x29\x4e\xdb\x17\x2f\xdc\x38\x58\xe7\xa6\x75\x87\x38\x29\x62\x63\xdd\x16\x04\x03\x2d\x9e\xd8\x6c\x25\x52\x20\x29\xbb\x9e\xa1\x7b\xda\x35\xec\xca\x06\x52\xb2\x2d\xd9\xf2\x47\x82\xe9\x4f\x65\xf1\x3c\xe7\xe3\xe1\x39\x0f\xd9\x2c\x97\x14\x1f\x19\x47\x70\x54\x28\x59\xa2\x9d\x2c\x6b\x5c\xe4\xaf\xa0\x17\x09\x76\x1d\x8d\x3f\x74\xf0\x8d\xcc\x48\x61\x00\x4a\x86\x5d\x67\xaa\x75\xa2\x3a\x41\x30\x9f\xcf\xfd\x89\xd2\x44\xb3\xd0\x0f\x45\x1c\x84\x53\x22\xb5\x0a\x22\x41\x28\x4a\xff\x9b\x72\x2e\x2f\x82\x1c\x78\xd9\x38\xe2\xf8\xb2\x01\x00\x30\x23\x12\xa6\x69\xcc\x28\xd3\x8b\xf5\x07\x22\x25\x59\x8c\x30\x4e\xa0\x0b\xf7\xf6\xab\x79\xee\x39\xce\xe1\x03\xd1\xe8\xb5\xdf\xb4\xff\x77\xd6\x7e\x7d\x7e\x66\x9e\x66\x0b\xce\xcf\x1f\x5a\xd6\xec\xa1\x61\xff\x99\x33\x4e\xc5\xdc\x27\x94\x5e\xcd\x90\xeb\x6b\xa6\x34\x72\x94\x9e\x63\xf2\x74\x5a\xf0\x98\xf2\x50\x33\xc1\x3d\x9c\xe9\x26\x2c\xd7\x11\x4c\x6c\x91\xea\x24\xd5\xd0\x05\x2a\xc2\x34\x46\xae\xfd\x09\xea\xab\x08\xcd\xeb\xcf\x8b\xcf\xd4\x73\x72\x0b\xa7\xf9\xae\x82\x9b\xab\xea\xef\x44\x32\x6e\xdc\xac\x63\xc5\xa8\x14\x99\x60\x39\xde\xca\x96\x96\xc3\x85\x12\x89\xc6\x22\xa2\xe7\x50\x36\x2b\x87\x32\x0f\xf5\x19\xe7\x28\xfb\xa3\xc1\x35\x74\xa1\xf0\x5b\x35\xc9\x73\xf4\x49\x92\x20\xa7\xbd\x29\x8b\xa8\x47\x4b\x5e\xb2\xcd\xab\x12\xe1\x77\x34\x89\x1a\x76\xbf\xe2\x78\x68\x7f\x7b\xce\x72\xe9\x7f\xc5\xb1\x5d\x95\xa9\x8c\xb2\xac\x9c\x45\x10\xdc\xde\xc0\xed\x97\xab\x9b\x2d\x37\xbe\xe0\x22\x41\x5e\x2e\x7b\x8b\xe2\x8d\x87\x9c\x21\xcf\x31\x6e\xb6\x2b\xcc\x2d\x72\x83\xc2\x73\x22\x85\x16\xa1\x88\x9a\xc7\x0c\x25\x12\xba\x18\x6a\xa2\xf1\xa8\x69\x2a\x6b\xdc\x15\x6b\x0a\xb9\xd9\xeb\x04\xb9\x53\xb5\xc9\x1a\x5b\x75\xdc\xde\xc0\xd5\xdd\xdd\xed\xdd\x2e\x17\x28\xa5\x90\x15\x32\xcc\x87\x6d\x3a\x42\xc1\x95\x88\xd0\xb7\x8b\x85\x49\x95\x8e\x3c\xe9\xed\x95\x9d\x4d\xf4\x05\x0f\x23\xa1\xf0\x08\xfd\x05\xef\x17\xe3\xcb\x9e\xe0\x1c\xad\x1d\x58\x20\xf5\x2f\x82\xf1\xa5\x53\x1f\x23\xaf\x74\x70\x35\x1c\xbe\xff\x74\xb5\x1b\xb9\x68\xc3\x13\xb6\xde\x74\x7c\x98\x4a\x89\x5c\x53\xa2\xb1\x68\x3d\x3b\xd8\x35\x6d\x60\xe7\x83\x68\xd4\x2c\x36\xa6\xee\x72\x39\x02\xe7\x9a\x28\x0d\xc3\x05\x0f\x9d\x2c\xeb\x80\x0b\x2f\xcb\x0e\xcd\xc0\xe6\xde\xe0\x25\x38\x81\x03\x2f\x77\x9c\x9a\xc7\xdb\x82\x0c\x04\xd7\x53\x8b\x69\x1f\x06\x6e\xe1\x3e\xa6\x51\xf4\x3b\x12\x99\x87\x83\x9f\xe0\x44\x5c\x5f\xa4\x52\xe5\xa0\xce\x89\x90\x01\xe3\xa9\xc6\x27\x82\x86\x18\x0a\x4e\x55\x1d\xb7\x7b\x25\x4e\xe2\xa3\x44\x35\x35\x9c\x3b\xcd\x8a\xda\xac\xb6\xe2\x5d\xa3\x66\xb8\x46\x02\xd4\x54\xcc\x41\x4f\xd1\x18\x12\xd8\x3b\x80\x4e\xd1\x47\xf5\x83\xbf\x9a\x88\x48\x4c\x4c\x13\xf9\xc6\x57\x73\x37\xa0\x69\x8d\x6f\x4a\x18\xb9\xf9\x65\x78\x7b\xe3\x27\x44\x2a\xdc\x00\x6a\x52\x5c\x9d\x34\xd0\xb5\x40\xff\x03\xd1\xc4\xef\xaf\x8e\x9f\x5d\x7e\x24\x99\xaf\x56\xbf\xa0\x0c\x91\x6b\x32\x41\xaf\x26\x95\x6a\xce\xd6\xf7\xfa\x10\xab\x31\xaf\x3f\xe0\xca\xcf\x09\x87\xdd\x7e\xc8\xf9\x59\xfb\x4d\x0b\xda\x67\x2d\x68\xbf\x6d\xc1\x59\x0b\x5e\x5b\xe0\xeb\xa7\x03\x9f\x11\xf1\x8d\x89\xb4\x0a\xd9\x7e\x06\xf2\x99\x31\xcf\x8b\x98\xed\xff\xd7\x20\x1f\xea\x37\xd7\x6c\x01\x4a\xa2\x53\xb9\xb3\xab\x19\x04\x01\x72\x0a\x82\xaf\x4e\xd8\x7c\x3d\x33\x7d\x65\xdf\x82\xa0\xd7\x7f\x7f\x37\x1a\xe6\xbf\x26\x42\x4c\x22\xf4\xf3\x0b\x91\x6f\x2e\x1a\x9e\x5b\x4c\xa2\xdb\x2a\xa9\x60\x42\xc2\xef\x64\x82\xaa\x03\xf7\x6e\x28\x24\x5a\x80\xdb\x02\x37\x62\x1c\xdd\x87\x75\x8c\x5d\x9f\x0a\xf5\x2d\xbf\x16\x84\xf6\x48\x14\x8d\x49\xf8\xdd\xdb\x2a\xe1\x09\xa8\xdd\xae\x5e\x97\xb5\x92\xef\xbd\xdd\x0f\xcb\x46\xf9\x50\xf8\x90\x5f\x28\xcd\xcc\xdb\x90\xa0\x05\x8c\xd1\xa2\xb9\x5f\xb9\x12\x59\x49\xc8\xd5\xbe\xc8\x71\xc6\x54\x4a\x22\xf6\x17\x31\x01\xed\x34\x8e\xc8\x38\xaa\x9c\x03\x06\x64\x6e\x72\x3d\x11\xa5\x31\xf7\x5c\xa5\x25\xe3\x13\x43\x58\xa1\x58\xee\x01\x63\x9e\xc6\x63\x94\xc6\x78\x53\x40\x9d\xfd\x9d\x98\x2b\xaf\x3a\x88\xf7\xee\xaa\x76\xb7\xb5\xd6\x8d\xad\xce\xba\x77\xff\x74\x4d\x07\x9e\xc1\xab\x3a\x93\x87\xb2\x04\x05\x01\x7c\xe6\x4a\x13\xae\x99\x39\xf4\x08\xa7\x96\xa2\x0d\x6f\x55\xae\xec\x27\x9b\xc1\xe2\x10\x65\x5f\x18\xf6\x8c\xa5\xb7\x4f\xca\xdd\x55\x5e\xd6\xcc\x6d\x96\x8a\x2f\x85\xf0\x4d\x2a\x9e\x61\xa3\x05\x3c\x8d\xa2\xc2\x2a\xab\xe9\x88\xca\xc8\x94\x5b\xe1\x3f\xdb\x61\x73\xc4\x98\x2d\xfb\xed\xb4\x9d\x2d\x25\xe4\x96\x09\xaf\xec\xed\x46\x8c\xdf\x55\x33\x16\x89\x49\x4c\x41\x77\xeb\xa2\x32\x7d\xff\x83\xa9\x4e\xcd\xed\x45\x33\x1d\x61\x07\xdc\x11\x8b\xd1\xdd\x15\x9a\x47\x21\x63\xa2\x3b\xe0\xf6\x3b\x71\xcd\x72\xcc\xf8\xaf\x24\x4a\xb1\x03\xfb\x64\xac\x9d\xcb\xd8\x2e\x92\xfc\x38\x80\x7c\xdb\x82\x7d\xc0\x89\x64\xd4\x68\x4b\x6d\x35\xb6\x0f\x44\xca\x75\x07\x5e\xb5\xeb\x05\x37\xe5\x4c\xef\xc5\x82\x25\x7a\x71\x70\xbd\x4c\xcb\xbd\x3b\x18\x0c\x80\xd2\x42\xe8\xea\x9e\xac\x3e\x0d\xf3\x4c\xcd\x95\xe9\xf4\x50\xfd\x7e\x27\x8e\x4d\x8b\x4c\xc9\xd3\xe3\x65\x3b\x5f\x6b\x0c\x63\xc6\x85\xfc\x74\x8c\xe0\xa3\x0c\x3e\xb1\xae\xe9\xb4\x13\xc7\x1d\xa5\x80\x3c\xb7\xb8\x22\x77\x73\x99\x7c\x22\x9d\x40\xe0\x0f\x13\xd5\x30\x7b\x20\xec\xa9\x94\x36\x0e\x24\x3b\x3b\x3a\x82\xa5\xc9\x3f\x30\x89\x2f\x5a\x2f\x5e\xfc\xf3\x77\xcf\x3d\x14\xcb\x68\xce\xc7\x15\x60\x30\xf0\x29\x05\xcb\xb2\x5b\xfe\x9f\xd0\xae\x40\x17\x57\xb8\xbd\x7a\x77\xcd\xf8\x31\x7d\xd6\x9b\x22\x36\x12\x5d\xd5\x68\x13\xa5\xac\xd0\x85\x66\xad\x45\x7a\xf3\x27\x97\xe5\x12\xcc\x9d\x25\xcb\xfe\x0d\x00\x00\xff\xff\x21\x6f\x03\x78\xe8\x11\x00\x00")

func tmplHistoryScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplHistoryScriptHtml,
		"tmpl/history/script.html",
	)
}

func tmplHistoryScriptHtml() (*asset, error) {
	bytes, err := tmplHistoryScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/history/script.html", size: 4584, mode: os.FileMode(420), modTime: time.Unix(1498851514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcb\x09\xc3\x40\x0c\x05\xef\xaa\xe2\xb1\x05\x24\x0d\x2c\x6e\x22\x15\xd8\x91\x82\x4d\xf6\x63\xec\xbd\x18\xa1\xde\x83\xe2\x40\x58\xf0\x75\x34\x1a\x9e\x2a\x58\x5e\x4b\x11\x84\x29\xd5\x9a\xf7\xf7\x11\x60\x46\x71\x6e\x39\x0d\x44\x71\x96\x91\x07\x02\x00\x55\x34\xc9\x6b\x1a\x9b\x20\x38\x96\x2d\xdc\xcc\x7a\xbe\x3f\xb7\x65\x6d\xce\x29\xde\xcf\x5f\x8a\x53\xe5\xe3\xa2\xe1\xf8\x67\x9e\x46\x77\x95\xc2\x8f\x7f\xcc\x6b\xdf\x45\xaa\x90\xc2\x30\xfb\x04\x00\x00\xff\xff\x17\x3c\x84\x55\xba\x00\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 186, mode: os.FileMode(420), modTime: time.Unix(1498851118, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogBodyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x4f\x33\x21\x10\xc6\xef\x7c\x8a\x09\xe9\xf1\x7d\xbb\x1e\x3c\x19\x76\x8f\x3d\xb5\x89\x31\x1e\x7b\xa1\xcb\x48\x89\x2c\x34\x30\x5d\xd3\x10\xbe\xbb\x59\xa8\xd6\xd8\xae\x7a\x21\xcc\x3c\x3f\xe6\xcf\x13\x52\x52\xf8\x62\x1c\x02\xdf\x79\x75\xe2\x39\xa7\x04\x84\xc3\xc1\x4a\x42\xe0\x03\xba\x23\xcf\x99\x09\x65\x46\xe8\xad\x8c\xb1\xe5\xbd\x77\x24\x8d\xc3\xc0\x3b\xc6\x00\x00\xc4\x2e\x74\xf5\x42\x72\x67\xf1\x83\xab\x41\x39\xff\x47\x0a\xe6\x80\x8a\x57\xae\xb2\xe1\x12\xd4\xc4\xbe\x83\xf5\x34\x89\x68\x68\x7f\x43\x7b\x36\xc3\xac\xb6\xc6\x11\xed\x9c\xb8\xf2\xae\x27\xe3\xdd\x9c\xbe\xc1\x18\xa5\x9e\xad\xfd\x28\x83\x1c\x90\x30\x7c\x03\x44\xf3\x75\x85\x94\x20\x48\xa7\x11\x16\xaf\x78\xfa\x07\x8b\x51\xda\x23\xc2\x43\x0b\x4b\xeb\xf5\x53\x51\x72\xfe\x79\x7b\x11\x29\x78\xa7\xbb\x94\x4a\x11\xc8\x59\x34\xe7\xd4\xed\xd1\x26\xb0\xf4\x59\x16\x6f\x26\xfe\x16\x26\xcc\xa0\x21\x86\xbe\xe5\xdb\x48\x92\x4c\xbf\xbd\x3c\xac\xc6\xe5\xbc\x3c\x38\xcd\xe1\xcd\x28\xda\xb7\xfc\xfe\x8e\xff\xda\x71\xd5\xd3\x6c\xc3\x0b\xb5\x89\xfa\x0f\x54\x71\xf8\x8a\xbb\xf2\x17\x9d\x9a\x3c\x64\x67\x71\xfa\x58\x1d\x63\xa2\x51\x66\xec\xd8\xa7\xfe\x1e\x00\x00\xff\xff\xec\x13\x5d\x11\xd1\x02\x00\x00")

func tmplLogBodyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogBodyHtml,
		"tmpl/log/body.html",
	)
}

func tmplLogBodyHtml() (*asset, error) {
	bytes, err := tmplLogBodyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/body.html", size: 721, mode: os.FileMode(420), modTime: time.Unix(1498851521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogMenuHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\x3d\x8f\xdb\x30\x0c\xdd\xf3\x2b\x04\xde\xec\xd3\x5e\xd8\x1e\x8a\x02\xed\xd0\xf1\xf6\x82\xb6\x14\x9b\x88\x42\x1a\x92\x6c\x5c\x60\xf8\xbf\x17\xfe\x90\x93\x73\x0f\x29\xba\x74\x4a\x48\xbd\xc7\xf7\xcc\xc7\x71\x34\xf6\x4c\x6c\x15\x5c\x2d\xf7\x30\x4d\xa7\x9c\x71\x50\xb5\xc3\x10\x0a\x60\x1c\x2a\xf4\x6a\xfd\xc9\x88\x07\xeb\x83\x4d\xe5\x99\xde\xad\xc9\xa2\x74\x50\x9e\x94\x52\x2a\x37\xb4\x13\x6b\xe1\x88\xc4\xd6\x6f\x6f\xc7\xf7\x6d\x44\x6b\xd1\x7c\xc0\x2c\xb8\xaa\x8f\x51\x58\xc5\x5b\x67\x0b\x58\x0b\x38\x10\xa3\x34\x8d\xb3\xaa\x16\xe7\xb0\x0b\xd6\x80\x32\x18\x71\x6b\xcf\xf2\x6b\x3f\xb5\xd1\x37\x36\x16\xf0\xb2\xb2\x41\xa1\x27\xcc\xec\x7b\x87\x6c\xac\x29\xe0\x8c\x6e\xc6\x2e\xdd\xd9\xb9\x17\xb7\x4b\x1d\xcd\x85\x0e\x39\x99\x09\x3e\x13\x76\x37\x28\xdf\x56\x3b\x8c\x03\x35\x18\x49\x38\xd7\x33\xee\x09\x95\x6a\xe1\x6c\x19\xff\xbf\xa0\xb9\x5e\x57\x79\xa0\xe3\x61\xb3\x95\x47\x36\xa0\x5a\x6f\xcf\x05\xbc\x40\xf9\xd5\x89\x5c\xc3\xe5\x96\x6b\x7c\x88\x52\x1b\x1a\x0e\xc9\x92\xd9\x57\x76\xbf\x82\x35\x86\x74\x31\x7b\x2c\x07\x0f\xbd\x7b\x30\x91\xc0\x8c\xc3\x01\xb7\x60\x1d\x95\x39\x6e\xf6\x34\x94\xe3\xf8\xa6\xe0\x87\x5c\x2d\x4c\xd3\x6c\x31\xd7\x8e\x3e\x67\xa9\x3b\xad\xa5\x10\xc5\xdf\x12\x7b\xab\xfe\x32\x20\x59\xc4\x3a\xd2\x70\xfc\x84\x87\x75\x6e\x1a\x4e\x1a\x28\x7f\x4a\xf3\xdc\xd4\x8e\x6f\x63\xec\xc2\x17\xad\x1b\x8a\x6d\x5f\xbd\xd6\x72\xd5\x1d\x46\x4f\xf5\x05\x1d\xb1\xae\xb6\x14\xb2\xda\x91\xe5\x98\x35\x02\x2a\x5d\xf5\xaf\xca\x21\x5f\xa0\xfc\xbe\x50\xff\x51\xcf\x60\x68\x2b\x41\x6f\x5e\x93\xc4\xa2\xfd\xe7\xf4\x74\x07\xea\x5b\x62\xdc\x95\x3e\xa6\xa9\x7b\xf7\xe9\xa5\x6c\x7f\x73\xcd\x38\x94\xa7\x71\x54\x96\x8d\x9a\xa6\xdf\x01\x00\x00\xff\xff\x76\x8b\x9e\x35\x82\x04\x00\x00")

func tmplLogMenuHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogMenuHtml,
		"tmpl/log/menu.html",
	)
}

func tmplLogMenuHtml() (*asset, error) {
	bytes, err := tmplLogMenuHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/menu.html", size: 1154, mode: os.FileMode(420), modTime: time.Unix(1498851403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplLogScriptHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x2a\x4e\x2e\xca\x2c\x28\x51\xaa\xad\x55\xa8\xae\x56\x48\xcd\x4b\x51\xa8\xad\x05\x04\x00\x00\xff\xff\x3e\x13\xcc\xb1\x1d\x00\x00\x00")

func tmplLogScriptHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplLogScriptHtml,
		"tmpl/log/script.html",
	)
}

func tmplLogScriptHtml() (*asset, error) {
	bytes, err := tmplLogScriptHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/log/script.html", size: 29, mode: os.FileMode(420), modTime: time.Unix(1498851529, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langEnUsAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x82\xf0\x1c\xe4\x00\x59\xb3\xb4\x5b\x87\x2e\x9d\x04\xa2\x62\x2d\x01\xfa\x09\x28\xba\x85\x60\xe8\xee\x85\x1c\xa7\x71\x2b\xa3\x31\xb2\x19\xf6\xf7\x3e\x92\x7e\xe3\x0e\xa0\x3b\x59\xc9\xdd\x11\xea\x33\x40\x17\xc5\x10\x77\xc7\xf9\xf5\x0e\xa0\xec\xa1\x52\x5a\x69\xcc\x69\xc1\x05\xaa\xd4\x38\x1e\x4e\x71\x08\x52\x0a\x68\xcc\xdd\xfe\x8f\xe4\xf7\xe7\x74\xf1\x55\x9d\xcf\xca\x90\xed\x8d\x28\x1b\x94\x27\x21\x6e\xdd\xcf\x80\x1e\x16\x86\x09\x03\x41\xe7\x0e\xcd\xa0\x55\x36\xcd\xf0\xcf\xd4\x33\x71\x8a\x41\xf5\x4c\x24\x36\xf4\x2b\x57\x3f\x91\x73\xb1\x8a\x5e\x26\xb4\x94\x26\x3c\x04\x26\xd4\x8a\x3c\x5a\xa7\xde\xeb\xb8\xb5\x9f\x72\x8d\x83\xc1\xb4\xdc\xeb\x92\x86\x29\xdd\x5e\xb1\x31\x98\xda\x93\xda\xad\x94\x58\x4f\x1f\x8c\x9e\x1e\xdd\x0f\x6c\x00\x31\x04\x67\x4c\x52\x99\xd7\xab\xb0\x94\xc7\x57\xff\x57\x7a\xbb\x8a\x63\xcf\xe8\xef\x37\xf5\x15\xd9\xe9\x5b\x2e\xc7\x81\xb7\x34\xf4\x16\x07\x30\xf8\x49\xdb\xab\xb9\x97\x98\x3b\xd9\x95\xef\x00\x00\x00\xff\xff\xa2\x16\x10\xd2\x54\x03\x00\x00")

func langEnUsAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langEnUsAllJson,
		"lang/en-us.all.json",
	)
}

func langEnUsAllJson() (*asset, error) {
	bytes, err := langEnUsAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/en-us.all.json", size: 852, mode: os.FileMode(420), modTime: time.Unix(1498741549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _langFrAllJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\xcf\x6e\xdb\x48\x0c\xc6\xef\x7d\x0a\xc2\x97\x5e\x8a\x3c\xc0\xde\xda\x78\x53\x27\xd8\xda\x41\x9c\x4d\xd1\x93\x31\x91\x68\x8b\xbb\xf3\x47\x3b\x33\x74\x2a\x18\x7a\x9f\xf5\x73\xf8\xc5\x16\x23\x27\x69\x67\x2c\x06\x2e\xf6\x68\xf3\xf7\x7d\x22\x87\x1c\x4a\xbb\x77\x00\x00\x93\x8f\xad\x9f\xfc\x06\xc7\x1f\xc3\x1f\x2e\x36\x98\xfe\x9a\x7c\xdc\x7a\xd2\x93\x21\xd0\x7f\x78\x86\x79\x23\xc1\x8e\x63\xce\x7e\xd2\xce\x99\xf0\x77\x07\x95\x26\xb4\x11\xc8\xc2\x67\x27\xa8\x2f\x8f\xc8\xab\x04\x07\x36\xb3\xbb\xa4\xd8\x09\xea\x07\xd2\x1a\x73\x7a\xaa\x24\xf8\xc6\xb1\x2f\x58\xac\x04\x76\x7a\xd8\x57\x68\x1e\x7d\x69\x8e\x5b\xaa\x10\xae\x6b\x49\x46\xa1\x75\x81\x22\xad\xe1\x7a\x9a\x4b\x7f\x0f\x51\x10\xa5\x48\x86\x5e\xe1\xa3\x80\x5e\x1d\xf6\x5b\x4f\x58\x94\x31\x73\x06\xa5\xe6\x54\x15\x63\xd9\xcb\x19\x85\xe8\xbc\x74\x4c\xc7\x28\xfd\xc3\x45\xed\x33\x36\x54\xcb\xad\x78\x0e\x1f\xf6\xb9\xea\xda\xd6\xf8\x1d\xfe\x7c\x10\x54\xaf\xe1\x4c\x74\xa3\xac\xd4\x43\x65\xb7\x27\xf5\xdf\xb0\x96\x70\x4e\x03\x12\x4b\x5c\x74\x67\xb2\x39\xfb\x87\x0a\x11\x96\x9d\x15\xe7\x04\xbd\xa5\xc3\xbf\x1e\x21\x74\xb6\x6a\xbc\xb3\x14\x54\x24\x57\xd8\x7c\x51\xd2\x55\xfb\xa2\x7c\x28\x59\xe9\x88\x8d\xa2\x1c\x9d\xd3\xa6\x91\xa6\x6a\xce\x54\xd4\x3d\x97\xee\xe0\xbc\x4c\x77\xee\x7c\x6c\x44\xd8\xd7\x25\xbd\x15\xd9\xed\xc8\x25\x9a\xb3\x79\x44\x0f\x8b\x35\x5c\x39\xad\xdd\x13\xfa\x20\xea\x93\x1a\x6a\x84\xf5\x2b\x99\x59\x2d\x2a\xa9\xfc\x45\x15\xdd\xc9\x93\x6f\x3d\x86\xc0\x5e\xba\x2c\x43\x98\x9c\x05\x15\x8d\x0b\x6d\x73\xd8\x8f\x5c\x83\x3b\x45\xd2\xf8\xdc\x6a\xa6\x11\x1a\xa6\x8a\xb4\xd4\xd3\x41\x03\xaa\xaa\xd8\xb0\x3e\xec\xa1\x7e\xaf\xf8\x2f\xc7\xbe\x7e\xdf\x30\x8d\x78\xdd\xa9\x28\xa5\x7f\xaf\xf8\x7b\x3a\xab\x56\x48\x23\x49\x61\x18\xe8\x26\x6d\xc2\xb7\xf2\xa9\x30\xc6\x74\xee\x2f\xc3\xdd\x20\x97\x67\xb9\xc4\x56\xb0\x58\x62\x1b\x47\xda\xbe\x74\x2c\x0e\xd5\x92\x8b\x99\x5a\x72\x88\x8a\x2c\xd6\xf0\x95\xac\xb4\x6d\x1f\x28\x62\x08\x08\x35\xc3\x36\xbd\x44\x82\xe3\x88\x96\x73\xa7\x7b\x34\x2d\x7a\x15\xe5\xb6\x27\xe2\xb0\x7f\x46\x72\x2d\x19\x0c\x51\x19\xa9\xd2\x1f\xf1\x4c\xf6\x75\x4a\x1e\xab\x61\x0b\x8c\xeb\x52\x4d\xf0\x03\xca\xc5\x28\xbe\x28\x16\x8c\xe5\xab\xa2\x70\x92\xde\x4a\xcf\xf1\x97\x93\x1a\xf1\xf8\xcc\xe2\x63\xef\xd4\x5a\xe9\xe1\x16\x9e\x6a\xbf\xa1\x74\x77\x17\xe5\xf8\xd6\xab\x5a\x75\x25\x6d\x53\x53\x26\xbb\xdd\xc5\xa5\x63\x1b\xfb\x1e\x6a\xd5\x4d\x3e\x8c\xd8\xe5\x48\xb1\x06\x1a\xda\x48\x93\x35\x53\xe5\xd7\x89\x76\x4f\x02\xfb\x49\x15\xbe\x06\x6b\x62\x23\x6d\x6e\xd7\x61\xd1\x3b\xd3\xad\x1a\x4c\x3b\x79\x45\x76\x65\x30\x9e\x6e\xb6\x63\xbd\xd7\xa0\x0c\xfc\x54\xd1\x11\x85\xa8\xb4\xbe\x18\xad\xfe\x4d\x41\x96\x42\x8b\x3e\x38\xbb\xda\x78\xc4\x48\x56\xfa\x66\x9b\xa1\xd6\x2e\x19\xde\x0e\x78\xdf\x8f\x9a\xb0\xf5\xa8\xea\x15\x1a\x45\x7a\x55\xa5\x47\x4b\xdd\x7b\xb1\x81\x46\x85\x9f\xf3\x3c\x3a\xc0\xe0\x10\xc6\x4b\x3b\x5f\x7d\x5e\x8a\xab\x48\x06\xd7\x5e\x9d\x7c\x12\xfd\x5a\xb2\xe9\xa3\x35\x36\x08\x6d\xda\x97\xbb\xdd\xc5\xfd\x8b\x6b\xdf\xff\xbf\x3a\xde\x34\xce\x4b\xf4\x6e\xe3\x95\x39\xaf\x97\x4f\xce\xeb\x62\x87\x76\x8e\xfd\xb9\x3d\xfc\xe6\x18\x1a\xb5\xc5\x5f\x6c\xde\x19\xb2\x63\x4a\xef\xfa\xff\x02\x00\x00\xff\xff\xcd\x16\x5d\x64\x75\x0c\x00\x00")

func langFrAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_langFrAllJson,
		"lang/fr.all.json",
	)
}

func langFrAllJson() (*asset, error) {
	bytes, err := langFrAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lang/fr.all.json", size: 3189, mode: os.FileMode(420), modTime: time.Unix(1498831058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testConfigfortestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\x3c\x9c\x43\xfb\x41\xd2\x34\x50\x4a\xf1\xe1\x83\x2e\xdd\xc3\x42\x59\x42\x37\xfd\x01\x63\x69\x1c\x8b\xc8\x1a\x23\x8d\xd3\xfa\xdf\x2f\x4a\xea\x34\xa5\x39\xac\x4e\xd2\x3c\xbd\x37\x33\x6f\x66\xb1\x58\x14\x33\x78\x0a\xdb\x81\xb6\x8c\x6b\x0e\x8b\x21\xcd\xd1\xc4\xff\x0a\x7c\x86\x2b\x1c\xe2\xc5\xec\xe3\x60\x4d\x91\xba\x84\x46\x22\x6a\x2f\xd2\xa5\xdd\x58\xcc\xf0\x5b\x62\x47\xde\x8f\xb0\x12\xae\x14\xa6\xa5\xb0\xe5\x02\xa7\x2f\xaf\x2f\xcf\x15\xca\x56\xb5\x4f\xd5\x72\x49\xbd\xbb\x99\x90\x1b\x23\x5d\x0e\x2c\xd3\x6e\xb4\xa4\xb4\x2c\x8b\x19\xb4\x65\xec\x78\x9c\xc3\xe9\x55\x42\x13\x39\x17\x32\xb1\x2d\xa5\xb6\x16\x8a\xf6\xab\xc6\x59\xb6\x47\x63\x38\xa5\x8d\xec\x38\x54\x28\x47\x19\xa2\xe6\x7b\xf9\xd9\xc5\x0b\x37\x91\x53\x0b\x75\x1d\xcf\x51\x33\x82\x28\x54\x90\x72\x17\xa8\xd9\xd0\x90\x18\xa3\x0c\xa0\xc8\x59\xd7\xec\xd8\xa2\x1e\x21\x3d\x87\x37\x26\x6d\x39\x82\x82\x3d\xa5\xc4\xb5\x0b\x48\x6c\x24\xd8\xec\x5f\x3c\xea\x6f\x5c\xc7\xb1\x42\x79\x7f\x7b\x96\xfb\x57\x03\x8d\x03\xc3\xba\xd4\x7b\x1a\xe1\x42\x93\xdd\x53\x27\x21\x41\x02\x8c\x84\x24\x3e\xbb\xf7\x71\x7b\x34\xea\xf6\xa4\x6c\x2b\x94\x99\x59\x16\xc0\xbf\xcb\xbd\x71\xdd\xd3\x61\x18\xed\x66\xb3\xbe\xa4\x95\xe3\x6b\x89\x8a\x0a\x65\xb5\x5a\xad\x56\xe5\xb7\x71\xbb\xd0\xf8\xe1\xfd\xe9\x07\x02\x67\x6b\x29\x8e\x70\xc7\xbc\x05\x4e\xe0\x25\xed\x09\xfb\xc3\x71\x7f\xb0\xc2\x8b\x21\xdf\x4a\xd2\xef\x68\xae\xa1\x42\xf9\x70\xfb\x70\x7f\x0e\xbe\x26\x8e\x81\x3a\xae\x50\x46\x91\x2f\xbc\x35\xa5\xf4\x26\xd1\x5e\x80\x9e\x48\xa9\xa6\x94\x59\xd3\x8c\xce\xda\xfa\xf9\xde\x73\xd4\x62\x86\xd5\xc1\x2f\x60\xf1\x3f\xee\xa0\x91\x4c\x6e\xc8\xcb\xf6\x99\xf7\xec\x2b\xdc\xe5\x65\x14\xe4\x65\xc8\x3b\x69\xc4\x32\x5c\x80\x34\x8d\x77\x81\xd1\xe5\x77\x3f\x28\x3a\x31\xbb\x6a\xf2\xe3\xf8\x68\xc8\x27\x2e\x66\x47\x2e\x77\xbd\x27\xe5\x39\x92\x92\x3a\x83\xc6\xf9\x83\x50\x23\xde\x72\x3c\x6c\x9f\x0b\xa8\x87\x60\x3d\xdb\x02\xb0\xbc\x3f\x29\x4c\xa7\xf8\x1b\x00\x00\xff\xff\x1e\x93\x09\x2a\xb2\x03\x00\x00")

func testConfigfortestYamlBytes() ([]byte, error) {
	return bindataRead(
		_testConfigfortestYaml,
		"test/configForTest.yaml",
	)
}

func testConfigfortestYaml() (*asset, error) {
	bytes, err := testConfigfortestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/configForTest.yaml", size: 946, mode: os.FileMode(420), modTime: time.Unix(1498741549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/bloomsky/body.html": tmplBloomskyBodyHtml,
	"tmpl/bloomsky/menu.html": tmplBloomskyMenuHtml,
	"tmpl/bloomsky/script.html": tmplBloomskyScriptHtml,
	"tmpl/bloomsky.txt": tmplBloomskyTxt,
	"tmpl/endScript.html": tmplEndscriptHtml,
	"tmpl/header.html": tmplHeaderHtml,
	"tmpl/history/body.html": tmplHistoryBodyHtml,
	"tmpl/history/menu.html": tmplHistoryMenuHtml,
	"tmpl/history/script.html": tmplHistoryScriptHtml,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/log/body.html": tmplLogBodyHtml,
	"tmpl/log/menu.html": tmplLogMenuHtml,
	"tmpl/log/script.html": tmplLogScriptHtml,
	"lang/en-us.all.json": langEnUsAllJson,
	"lang/fr.all.json": langFrAllJson,
	"test/configForTest.yaml": testConfigfortestYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lang": &bintree{nil, map[string]*bintree{
		"en-us.all.json": &bintree{langEnUsAllJson, map[string]*bintree{}},
		"fr.all.json": &bintree{langFrAllJson, map[string]*bintree{}},
	}},
	"test": &bintree{nil, map[string]*bintree{
		"configForTest.yaml": &bintree{testConfigfortestYaml, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"bloomsky": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplBloomskyBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplBloomskyMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplBloomskyScriptHtml, map[string]*bintree{}},
		}},
		"bloomsky.txt": &bintree{tmplBloomskyTxt, map[string]*bintree{}},
		"endScript.html": &bintree{tmplEndscriptHtml, map[string]*bintree{}},
		"header.html": &bintree{tmplHeaderHtml, map[string]*bintree{}},
		"history": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplHistoryBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplHistoryMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplHistoryScriptHtml, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"log": &bintree{nil, map[string]*bintree{
			"body.html": &bintree{tmplLogBodyHtml, map[string]*bintree{}},
			"menu.html": &bintree{tmplLogMenuHtml, map[string]*bintree{}},
			"script.html": &bintree{tmplLogScriptHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

